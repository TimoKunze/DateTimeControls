//////////////////////////////////////////////////////////////////////
/// \mainpage DateTimeControls Documentation
///
/// \section intro_sec Introduction
///
/// %DateTimeControls is a collection of date and time ActiveX controls. The \c Calendar control wraps
/// the \c SysMonthCal32 window class and the \c DateTimePicker control wraps the \c SysDateTimePick32
/// window class.\n
/// The controls are optimized for Visual Basic 6.0, but should also work in any other environment that
/// supports COM controls.
///
/// \section basics_sec Basics
///
/// The controls superclass the mentioned native window classes of Windows: \c SysDateTimePick32 and
/// \c SysMonthCal32. Although I tried to wrap all features of these window classes (status: Windows 10),
/// some things may be missing. In these cases you usually may use the Win32 API and handle the controls
/// as native windows of the corresponding class. One of my goals was it to create controls that may be
/// controlled via API as well as via the classes that I implemented.
///
/// \section reqs_sec Requirements
///
/// %DateTimeControls ANSI runs on the following operating systems:
/// - Windows XP (SP3 or later)
/// - Windows Server 2003 (SP2 or later)
/// - Windows Vista (SP2 or later)
/// - Windows Server 2008 (SP2 or later)
/// - Windows 7 (SP1 or later)
/// - Windows Server 2008 R2 (SP1 or later)
/// - Windows 8
/// - Windows Server 2012
/// - Windows 8.1
/// - Windows Server 2012 R2
/// - Windows 10
/// - Windows Server 2016
///
/// Some features have additional requirements which are mentioned in the affected feature's
/// documentation.\n
/// Limited support means, that I won't invest much work to support those systems. If a feature works on
/// a system tagged with "limited support" - fine; if it does not and it's easy to fix, I'll fix it, but if
/// it's difficult to fix, I probably won't fix it. Also I will test the control much less on those systems.
///
/// \section support_sec Support
///
/// There's no entitlement to support. Period. However, you have good chances to get help if you post your
/// questions on <a href="https://github.com/TimoKunze/DateTimeControls">GitHub</a> or in the
/// <a href="https://www.timosoft-software.de/forum/viewforum.php?f=39">forums</a>.\n
/// Also the project is open source, so feel free to have a look at the source code. You may modify it, but
/// please consider sharing your changes with the rest of the world.
///
/// \section lic_sec License
///
/// <pre>
///      MIT License
///
///      Copyright (c) 2009-2018 Timo Kunze
///
///      Permission is hereby granted, free of charge, to any person obtaining a copy
///      of this software and associated documentation files (the "Software"), to deal
///      in the Software without restriction, including without limitation the rights
///      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
///      copies of the Software, and to permit persons to whom the Software is
///      furnished to do so, subject to the following conditions:
///
///      The above copyright notice and this permission notice shall be included in all
///      copies or substantial portions of the Software.
///
///      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
///      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
///      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
///      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
///      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
///      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
///      SOFTWARE.
/// </pre>
///
/// \section acks_sec Acknowledgements
///
/// Thanks go to:
/// - <a href="https://www.winehq.com">Wine Headquarters</a>, because Wine helped me a lot on
///   understanding how Windows is working.
/// - Microsoft, for ATL, WTL and Visual Studio - great libraries and a great IDE
/// - <a href="https://www.geoffchappell.com">Geoff Chappell</a>, for his website about undocumented Win32
///   API stuff.
/// - Igor Tandetnik, for his great help on learning ATL and WTL
/// - Dimitri van Heesch, for Doxygen
/// - <a href="http://www.zabkat.com/">Nikos Bozinis</a>, for his awesome help with the Vista drag'n'drop
///   stuff.
/// - <a href="https://www.dateicommander.de">Christian LÃ¼tgens</a>, for his great work as beta-tester
///   and for his help when I needed a 2nd opinion on some decisions.
/// - All donators
/// - For great music: Heaven Shall Burn, Arch Enemy, Machine Head, Trivium, Deadlock, Draconian, Soulfly,
///   Delain, Lacuna Coil, Ensiferum, Epica, Sirenia, Tristania, Nightwish, Battlelore, Amon Amarth, Volbeat,
///   Guns N' Roses
///
/// \section faq_sec FAQ
///
/// <strong>1. Why is the \c Font property ignored?</strong>\n
/// It isn't. My controls have a property \c UseSystemFont which defaults to \c True. This property tells
/// the control to use the system font rather than the font set by the \c Font property.\n
/// Why is this property's default \c True? Well, if I set system wide settings (like fonts) I expect all
/// applications to follow them. Unfortunately ignoring system wide settings seems to be trendy, so see
/// my decision as an educational measure.
///
/// <strong>2. Why is event xyz not fired?</strong>\n
/// Firing an event is relative time-consuming, even if the event isn't handled by the application at all.
/// Therefore I implemented a \c DisabledEvents property which can be used to deactivate certain events.\n
/// By default many events are deactivated.
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
/// \namespace DTCtlsLibA
/// \brief <em>Contains COM definitions for the controls' public interfaces</em>
///
/// This is the ANSI version of the DateTimeControls COM library.
//////////////////////////////////////////////////////////////////////


#include "olectl.h"
#include "CompilerFlags.h"
#include "DispIDs.h"

#ifndef DOXYGEN_SHOULD_SKIP_THIS
	// interface is not automation marshaling conformant, requires Windows NT 4.0 SP4 or greater
	midl_pragma warning(disable: 2039)
	// identifier length exceeds 31 characters
	midl_pragma warning(disable: 2111)
	// too many methods in the interface, requires Windows NT 4.0 SP3 or greater
	midl_pragma warning(disable: 2362)
#endif

import "oaidl.idl";
import "ocidl.idl";


[
	uuid(19AD6CAB-F3B8-4c05-81A1-55135F225D05),
	version(1.5),
	helpstring("TimoSoft DateTimeControls 1.5 (ANSI)")
]
library DTCtlsLibA
{
	importlib("stdole2.tlb");


	/// \brief <em>Constants used with the \c Appearance properties</em>
	///
	/// \sa ICalendar::Appearance, IDateTimePicker::Appearance
	[helpstring("Constants used with the 'Appearance' properties.")]
	typedef enum AppearanceConstants {
		/// \brief The control is drawn with a flat border
		[helpstring("The control is drawn flat.")]
		a2D,
		/// \brief The control is drawn with a normal 3D border
		[helpstring("The control is drawn with a normal 3D border.")]
		a3D,
		/// \brief The control is drawn with a light 3D border
		[helpstring("The control is drawn with a light 3D border.")]
		a3DLight,
		/// \brief Let the control decide about the outer border style
		///
		/// \remarks This value can't be set at runtime and is valid for the \c DateTimePicker control only.
		[helpstring("The control decides itself which border to draw. This value can't be set at runtime and is valid for the 'DateTimePicker' control only.")]
		aDefault
	} AppearanceConstants;

	/// \brief <em>Constants used with the \c BorderStyle properties</em>
	///
	/// \sa ICalendar::BorderStyle, IDateTimePicker::BorderStyle
	[helpstring("Constants used with the 'BorderStyle' properties.")]
	typedef enum BorderStyleConstants {
		/// \brief The control is drawn without an inner border
		[helpstring("The control is drawn without an additional border.")]
		bsNone,
		/// \brief The control is drawn with an inner border
		[helpstring("The control is drawn with an additional border.")]
		bsFixedSingle
	} BorderStyleConstants;

	/// \brief <em>Constants used with the \c GetRectangle and \c CalendarGetRectangle method</em>
	///
	/// \sa ICalendar::GetRectangle, IDateTimePicker::CalendarGetRectangle
	[helpstring("Constants used with the 'GetRectangle' and 'CalendarGetRectangle' method.")]
	typedef enum ControlPartConstants {
		/// \brief Retrieves the bounding rectangle of the whole control
		[helpstring("Retrieves the bounding rectangle of the whole control.")]
		cpControl = 0/*MCGIP_CALENDARCONTROL*/,
		/// \brief Retrieves the bounding rectangle of the next-month button
		[helpstring("Retrieves the bounding rectangle of the next-month button.")]
		cpNextButton = 1/*MCGIP_NEXT*/,
		/// \brief Retrieves the bounding rectangle of the previous-month button
		[helpstring("Retrieves the bounding rectangle of the previous-month button.")]
		cpPreviousButton = 2/*MCGIP_PREV*/,
		/// \brief Retrieves the bounding rectangle of the previous-month button
		[helpstring("Retrieves the bounding rectangle of the previous-month button.")]
		cpFooter = 3/*MCGIP_FOOTER*/,
		/// \brief Retrieves the bounding rectangle of the specified calendar
		[helpstring("Retrieves the bounding rectangle of the specified calendar.")]
		cpCalendar = 4/*MCGIP_CALENDAR*/,
		/// \brief Retrieves the bounding rectangle of the specified calendar's header
		[helpstring("Retrieves the bounding rectangle of the specified calendar's header.")]
		cpCalendarHeader = 5/*MCGIP_CALENDARHEADER*/,
		/// \brief Retrieves the bounding rectangle of the specified calendar's body
		[helpstring("Retrieves the bounding rectangle of the specified calendar's body.")]
		cpCalendarBody = 6/*MCGIP_CALENDARBODY*/,
		/// \brief Retrieves the bounding rectangle of the specified calendar grid row
		[helpstring("Retrieves the bounding rectangle of the specified calendar grid row.")]
		cpCalendarRow = 7/*MCGIP_CALENDARROW*/,
		/// \brief Retrieves the bounding rectangle of the specified calendar grid cell
		[helpstring("Retrieves the bounding rectangle of the specified calendar grid cell.")]
		cpCalendarCell = 8/*MCGIP_CALENDARCELL*/
	} ControlPartConstants;

	/// \brief <em>Constants used with the \c DateFormat property</em>
	///
	/// \sa IDateTimePicker::DateFormat
	[helpstring("Constants used with the 'DateFormat' property.")]
	typedef enum DateFormatConstants {
		/// \brief The date is displayed in short format, e. g. &ldquo;12/26/08&rdquo;
		[helpstring("The date is displayed in short format, e. g. ""12/26/08"".")]
		dfShortDate,
		/// \brief The date is displayed in short format, but with a four-digit year, e. g. &ldquo;12/26/2008&rdquo;
		[helpstring("The date is displayed in short format, but with a four-digit year, e. g. ""12/26/2008"".")]
		dfShortDateWithFourDigitYear,
		/// \brief The date is displayed in long format, e. g. &ldquo;Friday, December 26, 2008&rdquo;
		[helpstring("The date is displayed in long format, e. g. ""Friday, December 26, 2008"".")]
		dfLongDate,
		/// \brief The time is displayed, e. g. &ldquo;10:01:34 PM&rdquo;
		///
		/// \remarks Activating this format will change the \c Style property to \c sUpDown.
		[helpstring("The time is displayed, e. g. ""10:01:34 PM"". Activating this format will change the 'Style' property to 'sUpDown'.")]
		dfTime,
		/// \brief The date is displayed using the custom format specified by the \c CustomDateFormat property
		///
		/// \sa IDateTimePicker::CustomDateFormat
		[helpstring("The date is displayed using the custom format specified by the 'CustomDateFormat' property.")]
		dfCustom
	} DateFormatConstants;

	/// \brief <em>Flags used with the \c DisabledEvents properties</em>
	///
	/// \sa ICalendar::DisabledEvents, IDateTimePicker::DisabledEvents
	[helpstring("Flags used with the 'DisabledEvents' properties. They can be combined.")]
	typedef enum DisabledEventsConstants {
		/// \brief Mouse events won't be fired
		///
		/// The following events won't be fired: \c MouseDown, \c MouseUp, \c MouseEnter, \c MouseHover,
		/// \c MouseLeave, \c DateMouseEnter, \c DateMouseLeave, \c MouseMove, \c MouseWheel
		///
		/// \sa _ICalendarEvents::MouseDown, _ICalendarEvents::MouseUp, _ICalendarEvents::MouseEnter,
		///     _ICalendarEvents::MouseHover, _ICalendarEvents::MouseLeave, _ICalendarEvents::DateMouseEnter,
		///     _ICalendarEvents::DateMouseLeave, _ICalendarEvents::MouseMove, _ICalendarEvents::MouseWheel,
		///     _IDateTimePickerEvents::MouseDown, _IDateTimePickerEvents::MouseUp,
		///     _IDateTimePickerEvents::MouseEnter, _IDateTimePickerEvents::MouseHover,
		///     _IDateTimePickerEvents::MouseLeave, _IDateTimePickerEvents::MouseMove,
		///     _IDateTimePickerEvents::MouseWheel
		[helpstring("Disables the following events: MouseDown, MouseUp, MouseEnter, MouseHover, MouseLeave, DateMouseEnter, DateMouseLeave, MouseMove, MouseWheel")]
		deMouseEvents = 0x01,
		/// \brief Click events won't be fired
		///
		/// The following events won't be fired: \c Click, \c DblClick, \c MClick, \c MDblClick,
		/// \c RClick, \c RDblClick, \c XClick, \c XDblClick
		///
		/// \sa _ICalendarEvents::Click, _ICalendarEvents::DblClick, _ICalendarEvents::MClick,
		///     _ICalendarEvents::MDblClick, _ICalendarEvents::RClick, _ICalendarEvents::RDblClick,
		///     _ICalendarEvents::XClick, _ICalendarEvents::XDblClick,
		///     _IDateTimePickerEvents::Click, _IDateTimePickerEvents::DblClick,
		///     _IDateTimePickerEvents::MClick, _IDateTimePickerEvents::MDblClick,
		///     _IDateTimePickerEvents::RClick, _IDateTimePickerEvents::RDblClick,
		///     _IDateTimePickerEvents::XClick, _IDateTimePickerEvents::XDblClick
		[helpstring("Disables the following events: Click, DblClick, MClick, MDblClick, RClick, RDblClick, XClick, XDblClick")]
		deClickEvents = 0x02,
		/// \brief Mouse events concerning the drop-down calendar control won't be fired
		///
		/// The following events won't be fired: \c CalendarMouseDown, \c CalendarMouseUp,
		/// \c CalendarMouseEnter, \c CalendarMouseHover, \c CalendarMouseLeave, \c CalendarDateMouseEnter,
		/// \c CalendarDateMouseLeave, \c CalendarMouseMove, \c CalendarMouseWheel
		///
		/// \sa _IDateTimePickerEvents::CalendarMouseDown, _IDateTimePickerEvents::CalendarMouseUp,
		///     _IDateTimePickerEvents::CalendarMouseEnter, _IDateTimePickerEvents::CalendarMouseHover,
		///     _IDateTimePickerEvents::CalendarMouseLeave, _IDateTimePickerEvents::CalendarDateMouseEnter,
		///     _IDateTimePickerEvents::CalendarDateMouseLeave, _IDateTimePickerEvents::CalendarMouseMove,
		///     _IDateTimePickerEvents::CalendarMouseWheel
		[helpstring("Disables the following events: CalendarMouseDown, CalendarMouseUp, CalendarMouseEnter, CalendarMouseHover, CalendarMouseLeave, CalendarMouseLeave, CalendarDateMouseEnter, CalendarDateMouseLeave, CalendarMouseMove, CalendarMouseWheel")]
		deCalendarMouseEvents = 0x04,
		/// \brief Keyboard events won't be fired
		///
		/// The following events won't be fired: \c KeyDown, \c KeyUp, \c KeyPress
		///
		/// \sa _ICalendarEvents::KeyDown, _ICalendarEvents::KeyUp, _ICalendarEvents::KeyPress,
		///     _IDateTimePickerEvents::KeyDown, _IDateTimePickerEvents::KeyUp,
		///     _IDateTimePickerEvents::KeyPress
		[helpstring("Disables the following events: KeyDown, KeyUp, KeyPress")]
		deKeyboardEvents = 0x08,
		/// \brief Keyboard events concerning the drop-down calendar control won't be fired
		///
		/// The following events won't be fired: \c CalendarKeyDown, \c CalendarKeyUp, \c CalendarKeyPress
		///
		/// \sa _IDateTimePickerEvents::CalendarKeyDown, _IDateTimePickerEvents::CalendarKeyUp,
		///     _IDateTimePickerEvents::CalendarKeyPress
		[helpstring("Disables the following events: CalendarKeyDown, CalendarKeyUp, CalendarKeyPress")]
		deCalendarKeyboardEvents = 0x10,
		/// \brief Click events concerning the drop-down calendar control won't be fired
		///
		/// The following events won't be fired: \c CalendarClick, \c CalendarMClick, \c CalendarRClick
		///
		/// \sa _IDateTimePickerEvents::CalendarClick, _IDateTimePickerEvents::CalendarMClick,
		///     _IDateTimePickerEvents::CalendarRClick, _IDateTimePickerEvents::CalendarXClick
		[helpstring("Disables the following events: CalendarClick, CalendarMClick, CalendarRClick, CalendarXClick")]
		deCalendarClickEvents = 0x20,
		/// \brief The \c ParseUserInput event won't be fired
		///
		/// The following event won't be fired: \c ParseUserInput
		///
		/// \remarks If this flag is set, the control accepts only valid user input. Otherwise it accepts any
		///          user input and raises the \c ParseUserInput event after the user has finished editing. The
		///          application must handle this event and tell the control the date that has been entered and
		///          whether it is valid.
		///
		/// \sa _IDateTimePickerEvents::ParseUserInput
		[helpstring("Disables the following event: ParseUserInput.")]
		deParseUserInput = 0x400
	} DisabledEventsConstants;

	/// \brief <em>Constants used with the \c IOLEDataObject::GetDropDescription and IOLEDataObject::SetDropDescription methods</em>
	///
	/// \sa IOLEDataObject::GetDropDescription, IOLEDataObject::SetDropDescription
	[helpstring("Constants used with the 'OLEDataObject.GetDropDescription' and 'OLEDataObject.SetDropDescription' methods.")]
	typedef enum DropDescriptionIconConstants {
		/// \brief No drop description is displayed
		[helpstring("No drop description is displayed.")]
		ddiNone = -1/*DROPIMAGE_INVALID*/,     // should be 8 (DROPIMAGE_NOIMAGE)
		/// \brief The drop description icon that visualizes the \c odeNone drop effect is displayed
		[helpstring("The drop description icon that visualizes the 'odeNone' drop effect is displayed.")]
		ddiNoDrop = 0/*DROPIMAGE_NONE*/,
		/// \brief The drop description icon that visualizes the \c odeCopy drop effect is displayed
		[helpstring("The drop description icon that visualizes the 'odeCopy' drop effect is displayed.")]
		ddiCopy = 1/*DROPIMAGE_COPY*/,
		/// \brief The drop description icon that visualizes the \c odeMove drop effect is displayed
		[helpstring("The drop description icon that visualizes the 'odeMove' drop effect is displayed.")]
		ddiMove = 2/*DROPIMAGE_MOVE*/,
		/// \brief The drop description icon that visualizes the \c odeLink drop effect is displayed
		[helpstring("The drop description icon that visualizes the 'odeLink' drop effect is displayed.")]
		ddiLink = 4/*DROPIMAGE_LINK*/,
		/// \brief The drop description icon that visualizes a drop, which causes a metadata change, is displayed
		[helpstring("The drop description icon that visualizes a drop, which causes a metadata change, is displayed.")]
		ddiMetadataChange = 6/*DROPIMAGE_LABEL*/,
		/// \brief The drop description icon that visualizes a warning is displayed
		[helpstring("The drop description icon that visualizes a warning is displayed.")]
		ddiWarning = 7/*DROPIMAGE_WARNING*/,
		/// \brief The default drop description is displayed
		///
		/// \remarks Requires Windows 7 or newer.
		[helpstring("The default drop description is displayed. Requires Windows 7 or newer.")]
		ddiUseDefault = 8/*DROPIMAGE_NOIMAGE*/     // should be -1 (DROPIMAGE_INVALID)
	} DropDescriptionIconConstants;

	/// \brief <em>Constants used with the \c DropDownAlignment property</em>
	///
	/// \sa IDateTimePicker::DropDownAlignment
	[helpstring("Constants used with the 'DropDownAlignment' property.")]
	typedef enum DropDownAlignmentConstants {
		/// \brief The drop-down calendar control is left-aligned
		[helpstring("The drop-down calendar control is left-aligned.")]
		ddaLeft,
		/// \brief The drop-down calendar control is right-aligned
		[helpstring("The drop-down calendar control is right-aligned.")]
		ddaRight
	} DropDownAlignmentConstants;

	/// \brief <em>Constants used with the extended mouse button events</em>
	///
	/// \sa _ICalendarEvents::MouseDown, _ICalendarEvents::MouseEnter, _ICalendarEvents::MouseHover,
	///     _ICalendarEvents::MouseLeave, _ICalendarEvents::DateMouseEnter, _ICalendarEvents::DateMouseLeave,
	///     _ICalendarEvents::MouseMove, _ICalendarEvents::MouseUp, _ICalendarEvents::XClick,
	///     _ICalendarEvents::XDblClick,\n
	///     _IDateTimePickerEvents::CalendarMouseDown, _IDateTimePickerEvents::CalendarMouseUp,
	///     _IDateTimePickerEvents::CalendarMouseEnter, _IDateTimePickerEvents::CalendarMouseHover,
	///     _IDateTimePickerEvents::CalendarMouseLeave, _IDateTimePickerEvents::CalendarDateMouseEnter,
	///     _IDateTimePickerEvents::CalendarDateMouseLeave, _IDateTimePickerEvents::CalendarMouseMove,
	///     _IDateTimePickerEvents::MouseDown, _IDateTimePickerEvents::MouseEnter,
	///     _IDateTimePickerEvents::MouseHover, _IDateTimePickerEvents::MouseLeave,
	///     _IDateTimePickerEvents::MouseMove, _IDateTimePickerEvents::MouseUp,
	///     _IDateTimePickerEvents::CalendarXClick, _IDateTimePickerEvents::XClick,
	///     _IDateTimePickerEvents::XDblClick
	[helpstring("Constants used with the extended mouse button events.")]
	typedef enum ExtendedMouseButtonConstants {
		/// \brief Identifies the first extended mouse button
		[helpstring("Identifies the first extended mouse button.")]
		embXButton1 = 0x20,
		/// \brief Identifies the second extended mouse button
		[helpstring("Identifies the second extended mouse button.")]
		embXButton2 = 0x40
	} ExtendedMouseButtonConstants;

	/// \brief <em>Flags used with the \c HitTest and \c CalendarHitTest methods</em>
	///
	/// \sa ICalendar::HitTest, IDateTimePicker::CalendarHitTest
	[helpstring("Flags used with the 'HitTest' and 'CalendarHitTest' methods.")]
	typedef enum HitTestConstants {
		/// \brief Outside the control or in an inactive portion of the control
		///
		/// The specified point lies outside the control or in an inactive portion of the control.
		[helpstring("The specified point lies outside the control or in an inactive portion of the control.")]
		htOutsideControl = 0x00000000/*MCHT_NOWHERE*/,
		/// \brief Over a month's title
		///
		/// The specified point lies over a month's title.
		[helpstring("The specified point lies over a month's title.")]
		htTitle = 0x00010000/*MCHT_TITLE*/,
		/// \brief Within the calendar
		///
		/// The specified point lies within the calendar.
		[helpstring("The specified point lies within the calendar.")]
		htCalendar = 0x00020000/*MCHT_CALENDAR*/,
		/// \brief On the &ldquo;Today&rdquo; link
		///
		/// The specified point lies on the &ldquo;Today&rdquo; link at the bottom of the control.
		[helpstring("The specified point lies on the 'Today' link at the bottom of the control.")]
		htTodayLink = 0x00030000/*MCHT_TODAYLINK*/,
		/// \brief Outside the calendar, but within the control
		///
		/// The specified point lies outside the calendar, but within the control.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		[helpstring("The specified point lies outside the calendar, but within the control. Requires comctl32.dll version 6.10 or higher.")]
		htControl = 0x00100000/*MCHT_CALENDARCONTROL*/,
		/// \brief In an area that causes scrolling to the next month
		///
		/// The specified point lies in an area that will cause the calendar to scroll its display to the next
		/// month or set of months.
		[helpstring("The specified point lies in an area that will cause the calendar to scroll its display to the next month or set of months.")]
		htNextMonth = 0x01000000/*MCHT_NEXT*/,
		/// \brief In an area that causes scrolling to the previous month
		///
		/// The specified point lies in an area that will cause the calendar to scroll its display to the
		/// previous month or set of months.
		[helpstring("The specified point lies in an area that will cause the calendar to scroll its display to the previous month or set of months.")]
		htPrevMonth = 0x02000000/*MCHT_PREV*/,
		/// \brief Over the background of a month's title
		///
		/// The specified point lies over the background of a month's title.
		[helpstring("The specified point lies over the background of a month's title.")]
		htTitleBackground = htTitle/*MCHT_TITLEBK*/,
		/// \brief Over the month name in a month's title
		///
		/// The specified point lies over the month name in a month's title.
		[helpstring("The specified point lies over the month name in a month's title.")]
		htTitleMonth = htTitle | 0x0001/*MCHT_TITLEMONTH*/,
		/// \brief Over the year value in a month's title
		///
		/// The specified point lies over the year value in a month's title.
		[helpstring("The specified point lies over the year value in a month's title.")]
		htTitleYear = htTitle | 0x0002/*MCHT_TITLEYEAR*/,
		/// \brief Over the button that causes scrolling to the next month
		///
		/// The specified point lies over the button in the top right corner of the control, which causes the
		/// control to scroll its display to the next month or set of months.
		[helpstring("The specified point lies over the button in the top right corner of the control, which causes the control to scroll its display to the next month or set of months.")]
		htTitleNextButton = htTitle | htNextMonth | 0x0003/*MCHT_TITLEBTNNEXT*/,
		/// \brief Over the button that causes scrolling to the previous month
		///
		/// The specified point lies over the button in the top right corner of the control, which causes the
		/// control to scroll its display to the previous month or set of months.
		[helpstring("The specified point lies over the button in the top right corner of the control, which causes the control to scroll its display to the previous month or set of months.")]
		htTitlePrevButton = htTitle | htPrevMonth | 0x0003/*MCHT_TITLEBTNPREV*/,
		/// \brief Within the calendar's background
		///
		/// The specified point lies within the calendar's background.
		[helpstring("The specified point lies within the calendar's background.")]
		htCalendarBackground = htCalendar/*MCHT_CALENDARBK*/,
		/// \brief On a particular date within the calendar
		///
		/// The specified point lies on a particular date within the calendar.
		[helpstring("The specified point lies on a particular date within the calendar.")]
		htDate = htCalendar | 0x0001/*MCHT_CALENDARDATE*/,
		/// \brief Over a date from the next month
		///
		/// The specified point lies over a date from the next month (partially displayed at the end of the
		/// currently displayed month).
		[helpstring("The specified point lies over a date from the next month (partially displayed at the end of the currently displayed month).")]
		htDateOfNextMonth = htDate | htNextMonth/*MCHT_CALENDARDATENEXT*/,
		/// \brief Over a date from the previous month
		///
		/// The specified point lies over a date from the previous month (partially displayed at the end of the
		/// currently displayed month).
		[helpstring("The specified point lies over a date from the previous month (partially displayed at the end of the currently displayed month).")]
		htDateOfPrevMonth = htDate | htPrevMonth/*MCHT_CALENDARDATEPREV*/,
		/// \brief Over a day abbreviation
		///
		/// The specified point lies over a day abbreviation.
		[helpstring("The specified point lies over a day abbreviation.")]
		htDayAbbreviation = htCalendar | 0x0002/*MCHT_CALENDARDAY*/,
		/// \brief Over a week number
		///
		/// The specified point lies over a week number.
		[helpstring("The specified point lies over a week number.")]
		htWeekNumber = htCalendar | 0x0003/*MCHT_CALENDARWEEKNUM*/,
		/// \brief Over the minimum date(s) in the calendar
		///
		/// The specified point lies over the minimum date(s) in the calendar.
		[helpstring("The specified point lies over the minimum date(s) in the calendar.")]
		htMinDate = htCalendar | 0x0004/*MCHT_CALENDARDATEMIN*/,
		/// \brief Over the maximum date(s) in the calendar
		///
		/// The specified point lies over the maximum date(s) in the calendar.
		[helpstring("The specified point lies over the maximum date(s) in the calendar.")]
		htMaxDate = htCalendar | 0x0005/*MCHT_CALENDARDATEMAX*/
	} HitTestConstants;

	/// \brief <em>Constants used with the \c IMEMode property</em>
	///
	/// \sa IDateTimePicker::IMEMode
	[helpstring("Constants used with the 'IMEMode' property.")]
	typedef enum IMEModeConstants {
		/// \brief Use the same IME settings as the control's parent
		[helpstring("Inherit the IME status from the control's parent.")]
		imeInherit = -1,
		/// \brief Don't change anything on the control's default IME settings
		[helpstring("Leaves the control's IME status untouched.")]
		imeNoControl = 0,
		/// \brief Set the control's IME status to "on"
		[helpstring("Sets the control's IME status to \"on\".")]
		imeOn = 1,
		/// \brief Set the control's IME status to "off"
		[helpstring("Sets the control's IME status to \"off\".")]
		imeOff = 2,
		/// \brief Don't use IME
		[helpstring("Disables IME for the control.")]
		imeDisable = 3,
		/// \brief Set the control's IME status to "Hiragana Double-Byte Characters"
		///
		/// \remarks This flag is valid only if the input language is Japanese.
		[helpstring("Sets the control's IME status to \"Hiragana Double-Byte Characters\" (Japanese IME only).")]
		imeHiragana = 4,
		/// \brief Set the control's IME status to "Hiragana Double-Byte Characters"
		///
		/// \remarks This flag is valid only if the input language is Japanese.
		[helpstring("Sets the control's IME status to \"Katakana Double-Byte Characters\" (Japanese IME only).")]
		imeKatakana = 5,
		/// \brief Set the control's IME status to "Katakana Single-Byte Characters"
		///
		/// \remarks This flag is valid only if the input language is Japanese.
		[helpstring("Sets the control's IME status to \"Katakana Single-Byte Characters\" (Japanese IME only).")]
		imeKatakanaHalf = 6,
		/// \brief Set the control's IME status to "Alphanumeric Double-Byte Characters"
		///
		/// \remarks This flag is valid only if the input language is Korean or Japanese.
		[helpstring("Sets the control's IME status to \"Alphanumeric Double-Byte Characters\" (Korean and Japanese IME only).")]
		imeAlphaFull = 7,
		/// \brief Set the control's IME status to "Alphanumeric Single-Byte Characters"
		///
		/// \remarks This flag is valid only if the input language is Korean or Japanese.
		[helpstring("Sets the control's IME status to \"Alphanumeric Single-Byte Characters\" (Korean and Japanese IME only).")]
		imeAlpha = 8,
		/// \brief Set the control's IME status to "Hangul Single-Byte Characters"
		///
		/// \remarks This flag is valid only if the input language is Korean.
		[helpstring("Sets the control's IME status to \"Hangul Single-Byte Characters\" (Korean IME only).")]
		imeHangulFull = 9,
		/// \brief Set the control's IME status to "Hangul Double-Byte Characters"
		///
		/// \remarks This flag is valid only if the input language is Korean.
		[helpstring("Sets the control's IME status to \"Hangul Double-Byte Characters\" (Korean IME only).")]
		imeHangul = 10
	} IMEModeConstants;

	/// \brief <em>Constants used with the \c MousePointer properties</em>
	///
	/// \sa ICalendar::MousePointer, IDateTimePicker::MousePointer
	[helpstring("Constants used with the 'MousePointer' properties.")]
	typedef enum MousePointerConstants {
		/// \brief The default mouse cursor is used
		[helpstring("The default mouse cursor is used.")]
		mpDefault,
		/// \brief The default arrow is used as mouse cursor
		[helpstring("The default arrow is used as mouse cursor.")]
		mpArrow,
		/// \brief A cross is used as mouse cursor
		[helpstring("A cross is used as mouse cursor.")]
		mpCross,
		/// \brief A vertical beam (like in textboxes) is used as mouse cursor
		[helpstring("A vertical beam (like in textboxes) is used as mouse cursor.")]
		mpIBeam,
		/// \brief An icon is used as mouse cursor
		[helpstring("An icon is used as mouse cursor.")]
		mpIcon,
		/// \brief A mouse cursor indicating window sizing is used
		[helpstring("A mouse cursor indicating window sizing is used.")]
		mpSize,
		/// \brief A mouse cursor indicating window sizing is used
		///
		/// This is the cursor that is used while resizing a window into the direction of its
		/// upper-right or lower-left corner.
		[helpstring("A mouse cursor indicating window sizing to the direction of a window's upper-right or lower-left corner is used.")]
		mpSizeNESW,
		/// \brief A mouse cursor indicating window sizing is used
		///
		/// This is the cursor that is used while resizing a window into the direction of its upper or
		/// lower border.
		[helpstring("A mouse cursor indicating window sizing to the direction of a window's upper or lower border is used.")]
		mpSizeNS,
		/// \brief A mouse cursor indicating window sizing is used
		///
		/// This is the cursor that is used while resizing a window into the direction of its
		/// upper-left or lower-right corner.
		[helpstring("A mouse cursor indicating window sizing to the direction of a window's upper-left or lower-right corner is used.")]
		mpSizeNWSE,
		/// \brief A mouse cursor indicating window sizing is used
		///
		/// This is the cursor that is used while resizing a window into the direction of its left or
		/// right border.
		[helpstring("A mouse cursor indicating window sizing to the direction of a window's left or right border is used.")]
		mpSizeEW,
		/// \brief An arrow pointing upwardly is used as mouse cursor
		[helpstring("An arrow pointing upwardly is used as mouse cursor.")]
		mpUpArrow,
		/// \brief An hourglass is used as mouse cursor.
		[helpstring("An hourglass is used as mouse cursor.")]
		mpHourglass,
		/// \brief An mouse cursor indicating that the control can't be a drop target is used
		[helpstring("An mouse cursor indicating that the control can't be a drop target is used.")]
		mpNoDrop,
		/// \brief The default arrow with a small hourglass is used as mouse cursor
		[helpstring("The default arrow with a small hourglass is used as mouse cursor.")]
		mpArrowHourglass,
		/// \brief The default arrow with a small question mark is used as mouse cursor
		[helpstring("The default arrow with a small question mark is used as mouse cursor.")]
		mpArrowQuestion,
		/// \brief A mouse cursor indicating window sizing to all directions is used
		[helpstring("A mouse cursor indicating window sizing to all directions is used.")]
		mpSizeAll,
		/// \brief A hand typically used for hyperlinks is used as mouse cursor
		[helpstring("A hand typically used for hyperlinks is used as mouse cursor.")]
		mpHand,
		/// \brief A mouse cursor indicating that the program waits for some media is used
		[helpstring("A mouse cursor indicating that the program waits for some media is used.")]
		mpInsertMedia,
		/// \brief A mouse cursor indicating scrolling to all directions is used
		[helpstring("A mouse cursor indicating scrolling to all directions is used.")]
		mpScrollAll,
		/// \brief A mouse cursor indicating scrolling upwardly is used
		[helpstring("A mouse cursor indicating scrolling upwardly is used.")]
		mpScrollN,
		/// \brief A mouse cursor indicating scrolling to the window's upper-right corner is used
		[helpstring("A mouse cursor indicating scrolling to the window's upper-right corner is used.")]
		mpScrollNE,
		/// \brief A mouse cursor indicating scrolling to the window's right border is used
		[helpstring("A mouse cursor indicating scrolling to the window's right border is used.")]
		mpScrollE,
		/// \brief A mouse cursor indicating scrolling to the window's lower-right corner is used
		[helpstring("A mouse cursor indicating scrolling to the window's lower-right corner is used.")]
		mpScrollSE,
		/// \brief A mouse cursor indicating scrolling downwards is used
		[helpstring("A mouse cursor indicating scrolling downwards is used.")]
		mpScrollS,
		/// \brief A mouse cursor indicating scrolling to the window's lower-left corner is used
		[helpstring("A mouse cursor indicating scrolling to the window's lower-left corner is used.")]
		mpScrollSW,
		/// \brief A mouse cursor indicating scrolling to the window's left border is used
		[helpstring("A mouse cursor indicating scrolling to the window's left border is used.")]
		mpScrollW,
		/// \brief A mouse cursor indicating scrolling to the window's upper-left corner is used
		[helpstring("A mouse cursor indicating scrolling to the window's upper-left corner is used.")]
		mpScrollNW,
		/// \brief A mouse cursor indicating scrolling upwardly or downwards is used
		[helpstring("A mouse cursor indicating scrolling upwardly or downwards is used.")]
		mpScrollNS,
		/// \brief A mouse cursor indicating scrolling to the window's left or right border is used
		[helpstring("A mouse cursor indicating scrolling to the window's left or right border is used.")]
		mpScrollEW,
		/// \brief The custom mouse cursor defined by the \c MouseIcon property is used
		[helpstring("The custom mouse cursor defined by the MouseIcon property is used.")]
		mpCustom = 0x63
	} MousePointerConstants;

	/// \brief <em>Constants used with OLE drag'n'drop</em>
	///
	/// \sa _ICalendarEvents::OLEDragEnter, _ICalendarEvents::OLEDragMouseMove,
	///     _ICalendarEvents::OLEDragDrop,
	///     _IDateTimePickerEvents::CalendarOLEDragEnter, _IDateTimePickerEvents::CalendarOLEDragMouseMove,
	///     _IDateTimePickerEvents::CalendarOLEDragDrop, _IDateTimePickerEvents::OLEDragEnter,
	///     _IDateTimePickerEvents::OLEDragMouseMove, _IDateTimePickerEvents::OLEDragDrop
	[helpstring("Constants used with the OLEDrag* events.")]
	typedef enum OLEDropEffectConstants {
		/// \brief No OLE drag and drop operation has occurred or will occur
		[helpstring("No OLE drag and drop operation has occurred or will occur.")]
		odeNone = 0 /*DROPEFFECT_NONE*/,
		/// \brief A copy has occured or will occur
		[helpstring("A copy has occured or will occur.")]
		odeCopy = 1 /*DROPEFFECT_COPY*/,
		/// \brief A move has occured or will occur
		[helpstring("A move has occured or will occur.")]
		odeMove = 2 /*DROPEFFECT_MOVE*/,
		/// \brief A link has occured or will occur
		[helpstring("A link has occured or will occur.")]
		odeLink = 4 /*DROPEFFECT_LINK*/,
		/// \brief Combination of \c odeCopy and \c odeMove
		[helpstring("Combination of 'odeCopy' and 'odeMove'.")]
		odeCopyOrMove = odeCopy | odeMove,
		/// \brief The drop target window has scrolled or will scroll
		[helpstring("The drop target window has scrolled or will scroll.")]
		odeScroll = 0x80000000 /*DROPEFFECT_SCROLL*/
	} OLEDropEffectConstants;

	/// \brief <em>Flags used with the \c RightToLeft properties</em>
	///
	/// \sa ICalendar::RightToLeft, IDateTimePicker::RightToLeft
	[helpstring("Flags used with the 'RightToLeft' properties. They can be combined.")]
	typedef enum RightToLeftConstants {
		/// \brief Read text from right to left
		///
		/// The control's text is read from right to left, but the general layout is left to right.
		[helpstring("The control's text is read from right to left, but the general layout is left to right.")]
		rtlText = 1,
		/// \brief Use a right to left layout
		///
		/// The general layout is right to left.
		[helpstring("The general layout is right to left.")]
		rtlLayout = 2
	} RightToLeftConstants;

	/// \brief <em>Flags used with the \c MouseWheel events</em>
	///
	/// \sa _ICalendarEvents::MouseWheel, _IDateTimePickerEvents::CalendarMouseWheel,
	///     _IDateTimePickerEvents::MouseWheel
	[helpstring("Flags used with the 'MouseWheel' events.")]
	typedef enum ScrollAxisConstants {
		/// \brief Scroll vertically
		[helpstring("The control will scroll vertically.")]
		saVertical = 1,
		/// \brief Scroll horizontally
		[helpstring("The control will scroll horizontally.")]
		saHorizontal = 2
	} ScrollAxisConstants;

	/// \brief <em>Constants used with the \c StartOfWeek properties</em>
	///
	/// \sa ICalendar::StartOfWeek, IDateTimePicker::StartOfWeek
	[helpstring("Constants used with the 'StartOfWeek' properties.")]
	typedef enum StartOfWeekConstants {
		/// \brief A week starts on the day specified by the currently active locale
		[helpstring("A week starts on the day specified by the currently active locale.")]
		sowUseLocale = -1/*LOCALE_IFIRSTDAYOFWEEK*/,
		/// \brief A week starts on Monday
		[helpstring("A week starts on Monday.")]
		sowMonday = 0,
		/// \brief A week starts on Tuesday
		[helpstring("A week starts on Tuesday.")]
		sowTuesday,
		/// \brief A week starts on Wednesday
		[helpstring("A week starts on Wednesday.")]
		sowWednesday,
		/// \brief A week starts on Thursday
		[helpstring("A week starts on Thursday.")]
		sowThursday,
		/// \brief A week starts on Friday
		[helpstring("A week starts on Friday.")]
		sowFriday,
		/// \brief A week starts on Saturday
		[helpstring("A week starts on Saturday.")]
		sowSaturday,
		/// \brief A week starts on Sunday
		[helpstring("A week starts on Sunday.")]
		sowSunday
	} StartOfWeekConstants;

	/// \brief <em>Constants used with the \c Style property</em>
	///
	/// \sa IDateTimePicker::Style
	[helpstring("Constants used with the 'Style' property.")]
	typedef enum StyleConstants {
		/// \brief The control appears like a combo box and provides a drop-down calendar
		///
		/// \sa IDateTimePicker::hWndCalendar
		[helpstring("The control appears like a combo box and provides a drop-down calendar.")]
		sDropDown,
		/// \brief The control displays an up-down control instead of the drop-down button
		///
		/// \sa IDateTimePicker::hWndUpDown
		[helpstring("The control displays an up-down control instead of the drop-down button.")]
		sUpDown
	} StyleConstants;

	/// \brief <em>Constants used with the \c View and \c CalendarView properties</em>
	///
	/// \sa ICalendar::View, IDateTimePicker::CalendarView
	[helpstring("Constants used with the 'View' and 'CalendarView' properties.")]
	typedef enum ViewConstants {
		/// \brief The calendar displays the dates of a single month
		[helpstring("The calendar displays the dates of a single month.")]
		vMonth = 0/*MCMV_MONTH*/,
		/// \brief The calendar displays the months of a single year
		[helpstring("The calendar displays the months of a single year.")]
		vYear = 1/*MCMV_YEAR*/,
		/// \brief The calendar displays the years of a single decade
		[helpstring("The calendar displays the years of a single decade.")]
		vDecade = 2/*MCMV_DECADE*/,
		/// \brief The calendar displays the decades of a single century
		[helpstring("The calendar displays the decades of a single century.")]
		vCentury = 3/*MCMV_CENTURY*/
	} ViewConstants;


	/// \interface IOLEDataObject
	/// \brief <em>Wraps the \c IDataObject interface</em>
	///
	/// This interface provides easy access to data being transferred using the \c IDataObject interface.
	///
	/// \sa _IOLEDataObjectEvents,
	///     <a href="https://msdn.microsoft.com/en-us/library/ms688421.aspx">IDataObject</a>
	[
		object,
		uuid(B7E9E3C2-6A85-4e67-8789-79448F16CAFA),
		dual,
		nonextensible,
		helpstring("IOLEDataObject interface"),
		pointer_default(unique)
	]
	interface IOLEDataObject : IDispatch
	{
		/// \brief <em>Deletes the contents of the \c OLEDataObject object</em>
		///
		/// \remarks This method will succeed only if the \c OLEDataObject wraps the control's own
		///          implementation of the \c IDataObject interface.
		///
		/// \sa SetData,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms688421.aspx">IDataObject</a>
		[id(DISPID_ODO_CLEAR), helpstring("Deletes the contents of the 'OLEDataObject' object.")]
		HRESULT Clear(void);
		/// \brief <em>Retrieves the best format settings from the \c OLEDataObject object</em>
		///
		/// Call this method to retrieve data format settings that match best with the data format, that you
		/// actually want to work with. Set the parameters to the data format settings you want to work with.
		/// The method will set them to the settings you should use.
		///
		/// \param[in,out] formatID An integer value specifying the data format. Valid values are those defined
		///                by VB's \c ClipBoardConstants enumeration, but also any other format that was
		///                registered using the \c RegisterClipboardFormat API function.
		/// \param[in,out] index An integer value that is assigned to the internal \c FORMATETC struct's
		///                \c lindex member. Usually you pass -1 here, but some formats like
		///                \c CFSTR_FILECONTENTS require multiple \c FORMATETC structs for the same format. In
		///                such cases you'll give each struct of this format a separate index.
		/// \param[in,out] dataOrViewAspect An integer value that is assigned to the internal \c FORMATETC
		///                struct's \c dwAspect member. Any of the \c DVASPECT_* values defined by the
		///                Microsoft&reg; Windows&reg; SDK are valid. The default is \c DVASPECT_CONTENT.
		///
		/// \sa GetData, GetFormat,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms649049.aspx">RegisterClipboardFormat</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms682177.aspx">FORMATETC</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/bb776902.aspx#CFSTR_FILECONTENTS">CFSTR_FILECONTENTS</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms690318.aspx">DVASPECT</a>
		[id(DISPID_ODO_GETCANONICALFORMAT), helpstring("Call this method to retrieve data format settings that match best with the data format, that you actually want to work with.")]
		HRESULT GetCanonicalFormat([in, out] LONG* formatID, [in, out] LONG* Index, [in, out] LONG* dataOrViewAspect);
		/// \brief <em>Retrieves data from the \c OLEDataObject object</em>
		///
		/// Retrieves data from the \c OLEDataObject object, that has the specified format.
		///
		/// \param[in] formatID An integer value specifying the format of the data to retrieve. Valid values
		///            are those defined by VB's \c ClipBoardConstants enumeration, but also any other format
		///            that has been registered using the \c RegisterClipboardFormat API function.
		/// \param[in] index An integer value that is assigned to the internal \c FORMATETC struct's \c lindex
		///            member. Usually you pass -1 here, but some formats like \c CFSTR_FILECONTENTS require
		///            multiple \c FORMATETC structs for the same format. In such cases you'll give each struct
		///            of this format a separate index.
		/// \param[in] dataOrViewAspect An integer value that is assigned to the internal \c FORMATETC struct's
		///            \c dwAspect member. Any of the \c DVASPECT_* values defined by the Microsoft&reg;
		///            Windows&reg; SDK are valid. The default is \c DVASPECT_CONTENT.
		///
		/// \return The data that has the specified format.
		///
		/// \remarks This method will fail, if the \c OLEDataObject object does not contain data of the
		///          specified format.
		///
		/// \sa GetCanonicalFormat, GetFormat, SetData,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms649049.aspx">RegisterClipboardFormat</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms682177.aspx">FORMATETC</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/bb776902.aspx#CFSTR_FILECONTENTS">CFSTR_FILECONTENTS</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms690318.aspx">DVASPECT</a>
		[id(DISPID_ODO_GETDATA), helpstring("Retrieves data from the 'OLEDataObject' object.")]
		HRESULT GetData([in] LONG formatID, [in, defaultvalue(-1)] LONG Index, [in, defaultvalue(1)] LONG dataOrViewAspect, [out, retval] VARIANT* pData);
		/// \brief <em>Retrieves the \c DROPDESCRIPTION data stored by the \c OLEDataObject object</em>
		///
		/// Retrieves the \c DROPDESCRIPTION data stored by the \c OLEDataObject object. The drop description
		/// describes what will happen if the user drops the dragged data at the current position. It is
		/// displayed at the bottom of the drag image.
		///
		/// \param[in,out] targetDescription Receives the description of the current drop target.
		/// \param[in,out] actionDescription Receives the description of the whole drop action, i. e. a string
		///                like <em>"Copy to %1"</em> where <em>"Copy to"</em> is the description of the current
		///                drop effect and <em>"%1"</em> is the placeholder for the drop target description
		///                specified by \c targetDescription.
		/// \param[in,out] icon Receives the icon used to visualize the current drop effect. Any of the values
		///                defined by the \c DropDescriptionIconConstants enumeration is valid.
		///
		/// \remarks In the \c actionDescription string, the sign "%" is escaped as "%%".\n
		///          Requires Windows Vista or newer.
		///
		/// \sa SetDropDescription, ICalendar::SupportOLEDragImages, IDateTimePicker::SupportOLEDragImages,
		///     DropDescriptionIconConstants,
		///     <a href="https://msdn.microsoft.com/en-us/library/bb773268.aspx">DROPDESCRIPTION</a>
		[id(DISPID_ODO_GETDROPDESCRIPTION), helpstring("Retrieves the 'DROPDESCRIPTION' data stored by the 'OLEDataObject' object. Requires Windows Vista or newer.")]
		HRESULT GetDropDescription([in, out, optional] VARIANT* targetDescription, [in, out, optional] VARIANT* actionDescription, [in, out, defaultvalue(0)] DropDescriptionIconConstants* Icon);
		/// \brief <em>Retrieves whether the \c OLEDataObject object contains data in a specific format</em>
		///
		/// \param[in] formatID An integer value specifying the format to check for. Valid values are those
		///            defined by VB's \c ClipBoardConstants enumeration, but also any other format that was
		///            registered using the \c RegisterClipboardFormat API function.
		/// \param[in] index An integer value that is assigned to the internal \c FORMATETC struct's \c lindex
		///            member. Usually you pass -1 here, but some formats like \c CFSTR_FILECONTENTS require
		///            multiple \c FORMATETC structs for the same format. In such cases you'll give each struct
		///            of this format a separate index.
		/// \param[in] dataOrViewAspect An integer value that is assigned to the internal \c FORMATETC struct's
		///            \c dwAspect member. Any of the \c DVASPECT_* values defined by the Microsoft&reg;
		///            Windows&reg; SDK are valid. The default is \c DVASPECT_CONTENT.
		///
		/// \return \c True, if the \c OLEDataObject object contains data in the specified format;
		///         otherwise \c False.
		///
		/// \sa GetCanonicalFormat, GetData, SetData,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms649049.aspx">RegisterClipboardFormat</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms682177.aspx">FORMATETC</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/bb776902.aspx#CFSTR_FILECONTENTS">CFSTR_FILECONTENTS</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms690318.aspx">DVASPECT</a>
		[id(DISPID_ODO_GETFORMAT), helpstring("Retrieves whether the 'OLEDataObject' object contains data in a specific format.")]
		HRESULT GetFormat([in] LONG formatID, [in, defaultvalue(-1)] LONG Index, [in, defaultvalue(1)] LONG dataOrViewAspect, [out, retval] VARIANT_BOOL* pFormatAvailable);
		/// \brief <em>Inserts data into the \c OLEDataObject object using the specified format</em>
		///
		/// \param[in] formatID An integer value specifying the format of the data being passed. Valid values
		///            are those defined by VB's \c ClipBoardConstants enumeration, but also any other format
		///            that has been registered using the \c RegisterClipboardFormat API function.
		/// \param[in] data The data to insert. If not specified, the \c OLESetData event will be raised if
		///            data of the specified format is requested from the \c OLEDataObject object.
		/// \param[in] index An integer value that is assigned to the internal \c FORMATETC struct's \c lindex
		///            member. Usually you pass -1 here, but some formats like \c CFSTR_FILECONTENTS require
		///            multiple \c FORMATETC structs for the same format. In such cases you'll give each struct
		///            of this format a separate index.
		/// \param[in] dataOrViewAspect An integer value that is assigned to the internal \c FORMATETC struct's
		///            \c dwAspect member. Any of the \c DVASPECT_* values defined by the Microsoft&reg;
		///            Windows&reg; SDK are valid. The default is \c DVASPECT_CONTENT.
		///
		/// \remarks The \c data parameter is optional only if the \c OLEDataObject wraps the control's own
		///          implementation of the \c IDataObject interface.
		///
		/// \sa GetData, Clear,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms649049.aspx">RegisterClipboardFormat</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms688421.aspx">IDataObject</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms682177.aspx">FORMATETC</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/bb776902.aspx#CFSTR_FILECONTENTS">CFSTR_FILECONTENTS</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms690318.aspx">DVASPECT</a>
		[id(DISPID_ODO_SETDATA), helpstring("Inserts data into the 'OLEDataObject' object using the specified format.")]
		HRESULT SetData([in] LONG formatID, [in, optional] VARIANT data, [in, defaultvalue(-1)] LONG Index, [in, defaultvalue(1)] LONG dataOrViewAspect);
		/// \brief <em>Sets the drop description displayed below the drag image</em>
		///
		/// Sets the \c DROPDESCRIPTION data. The drop description describes what will happen if the user drops
		/// the dragged data at the current position. It is displayed at the bottom of the drag image.
		///
		/// \param[in] targetDescription The description of the current drop target.
		/// \param[in] actionDescription The description of the whole drop action, i. e. a string like <em>"Copy
		///            to %1"</em> where <em>"Copy to"</em> is the description of the current drop effect and
		///            <em>"%1"</em> is the placeholder for the drop target description specified by
		///            \c targetDescription.
		/// \param[in] icon The icon used to visualize the current drop effect. Any of the values defined by
		///            the \c DropDescriptionIconConstants enumeration is valid.
		///
		/// \remarks In the \c actionDescription string, the sign "%" is escaped as "%%".\n
		///          Requires Windows Vista or newer.
		///
		/// \sa GetDropDescription, ICalendar::SupportOLEDragImages, IDateTimePicker::SupportOLEDragImages,
		///     DropDescriptionIconConstants,
		///     <a href="https://msdn.microsoft.com/en-us/library/bb773268.aspx">DROPDESCRIPTION</a>
		[id(DISPID_ODO_SETDROPDESCRIPTION), helpstring("Sets the drop description displayed below the drag image. Requires Windows Vista or newer.")]
		HRESULT SetDropDescription([in, optional] VARIANT targetDescription, [in, optional] VARIANT actionDescription, [in, defaultvalue(ddiNone)] DropDescriptionIconConstants Icon);
	}


	/// \interface _IOLEDataObjectEvents
	/// \brief <em>The \c OLEDataObject class' events interface</em>
	///
	/// This interface defines all events the \c OLEDataObject class may raise.
	///
	/// \sa IOLEDataObject
	[
		uuid(B5FFB199-1201-4a29-9C7B-A5F5E6BB0F36),
		helpstring("IOLEDataObject-event-interface")
	]
	dispinterface _IOLEDataObjectEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c OLEDataObject class</em>
	///
	/// This COM class implements the \c IOLEDataObject and \c _IOLEDataObjectEvents interfaces.
	///
	/// \sa IOLEDataObject, _IOLEDataObjectEvents
	[
		uuid(6FB9B139-1CD8-44d8-A112-28C3CDB4396A),
		version(1.5),
		noncreatable,
		helpstring("OLEDataObject Class 1.5 (ANSI)")
	]
	coclass OLEDataObject
	{
		[default] interface IOLEDataObject;
		[default, source] dispinterface _IOLEDataObjectEvents;
	};


	/// \interface ICalendar
	/// \author Timo "TimoSoft" Kunze
	/// \brief <em>The main interface</em>
	///
	/// This is the calendar control's main interface. It wraps the control window.
	///
	/// \sa _ICalendarEvents
	[
		object,
		uuid(BCCA8A84-4302-4026-9043-F6E056DFC22F),
		dual,
		nonextensible,
		helpstring("ICalendar interface"),
		pointer_default(unique)
	]
	interface ICalendar : IDispatch
	{
		/// \brief <em>Controls the style of the control's outer border</em>
		///
		/// Retrieves or sets the kind of border that is drawn around the control. Any of the values defined
		/// by the \c AppearanceConstants enumeration except \c aDefault is valid.
		///
		/// \sa BorderStyle, Padding, AppearanceConstants
		[propget, id(DISPID_CAL_APPEARANCE), helpstring("Retrieves or sets the kind of border that is drawn around the control.")]
		HRESULT Appearance([out, retval] AppearanceConstants* pValue);
		[propput, id(DISPID_CAL_APPEARANCE), helpstring("Retrieves or sets the kind of border that is drawn around the control.")]
		HRESULT Appearance([in] AppearanceConstants newValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's application ID</em>
		///
		///   Retrieves the control's application ID. This property is part of the fingerprint that
		///   uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppName, AppShortName, Build, CharSet, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_CAL_APPID), hidden]
		HRESULT AppID([out, retval] SHORT* pValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's application name</em>
		///
		///   Retrieves the control's application name. This property is part of the fingerprint that
		///   uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppShortName, Build, CharSet, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_CAL_APPNAME), hidden]
		HRESULT AppName([out, retval] BSTR* pValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's short application name</em>
		///
		///   Retrieves the control's short application name. This property is part of the fingerprint
		///   that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, Build, CharSet, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_CAL_APPSHORTNAME), hidden]
		HRESULT AppShortName([out, retval] BSTR* pValue);
		/// \brief <em>Specifies the control's background color</em>
		///
		/// Retrieves or sets the control's background color.
		///
		/// \sa ForeColor, TitleBackColor, TitleForeColor, MonthBackColor, TrailingForeColor
		[propget, id(DISPID_CAL_BACKCOLOR), helpstring("Retrieves or sets the control's background color.")]
		HRESULT BackColor([out, retval] OLE_COLOR* pValue);
		[propput, id(DISPID_CAL_BACKCOLOR), helpstring("Retrieves or sets the control's background color.")]
		HRESULT BackColor([in] OLE_COLOR newValue);
		/// \brief <em>Controls the style of the control's inner border</em>
		///
		/// Retrieves or sets the kind of inner border that is drawn around the control. Any of the values
		/// defined by the \c BorderStyleConstants enumeration is valid.
		///
		/// \sa Appearance, Padding, BorderStyleConstants
		[propget, id(DISPID_CAL_BORDERSTYLE), helpstring("Retrieves or sets the kind of inner border that is drawn around the control.")]
		HRESULT BorderStyle([out, retval] BorderStyleConstants* pValue);
		[propput, id(DISPID_CAL_BORDERSTYLE), helpstring("Retrieves or sets the kind of inner border that is drawn around the control.")]
		HRESULT BorderStyle([in] BorderStyleConstants newValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's build number</em>
		///
		///   Retrieves the control's build number. This property is part of the fingerprint
		///   that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa Version, AppID, AppName, AppShortName, CharSet, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_CAL_BUILD), hidden]
		HRESULT Build([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the number of calendars currently displayed</em>
		///
		/// Retrieves the number of calendars currently displayed.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa MinimizeRectangle
		[propget, id(DISPID_CAL_CALENDARCOUNT), helpstring("Retrieves the number of calendars currently displayed."), nonbrowsable]
		HRESULT CalendarCount([out, retval] LONG* pValue);
		/// \brief <em>Determines whether the specified calendar grid cell is selected</em>
		///
		/// Retrieves whether the specified calendar grid cell is selected. If set to \c True, the cell is
		/// selected; otherwise not.
		///
		/// \param[in] columnIndex The column index of the grid cell for which to retrieve the selection state.
		///            The index starts at -1, which identifies the week numbers column.
		/// \param[in] rowIndex The row index of the grid cell for which to retrieve the selection state. The
		///            index starts at -1, which identifies the week days row.
		/// \param[in] calendarIndex The zero-based index of the calendar for which to retrieve the selection
		///            state. The control can display up to 12 calendars at once.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa CaretDate, MultiSelect, GetSelection, SetSelection, CalendarGridCellText
		[propget, id(DISPID_CAL_CALENDARGRIDCELLSELECTED), helpstring("Retrieves whether the specified calendar grid cell is selected. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT CalendarGridCellSelected([in] LONG columnIndex, [in] LONG rowIndex, [in, defaultvalue(0)] LONG calendarIndex, [out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves the text of the specified calendar grid cell</em>
		///
		/// Retrieves the text being displayed in the specified calendar grid cell. The string contains the
		/// Unicode character 8206 before each part of the text, e. g. &ldquo;?January, ?2009&rdquo; (? stands
		/// for character 8206). This marker can be used to extract specific parts from the text.
		///
		/// \param[in] columnIndex The column index of the grid cell for which to retrieve the text. The index
		///            starts at -1, which identifies the week numbers column.
		/// \param[in] rowIndex The row index of the grid cell for which to retrieve the text. The index starts
		///            at -1, which identifies the week days row.
		/// \param[in] calendarIndex The zero-based index of the calendar for which to retrieve the text. The
		///            control can display up to 12 calendars at once.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa HeaderText, CaretDateText, CalendarGridCellSelected
		[propget, id(DISPID_CAL_CALENDARGRIDCELLTEXT), helpstring("Retrieves the text being displayed in the specified calendar grid cell. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT CalendarGridCellText([in] LONG columnIndex, [in] LONG rowIndex, [in, defaultvalue(0)] LONG calendarIndex, [out, retval] BSTR* pValue);
		/// \brief <em>Specifies the currently selected date</em>
		///
		/// Retrieves or sets the currently selected date.
		///
		/// \remarks This is the control's default property.
		///
		/// \sa MultiSelect, MinDate, MaxDate, CaretDateText, _ICalendarEvents::SelectionChanged
		[propget, id(DISPID_CAL_CARETDATE), helpstring("Retrieves or sets the currently selected date."), bindable, displaybind, requestedit, defaultbind, nonbrowsable]
		HRESULT CaretDate([out, retval] DATE* pValue);
		[propput, id(DISPID_CAL_CARETDATE), helpstring("Retrieves or sets the currently selected date."), bindable, displaybind, requestedit, defaultbind, nonbrowsable]
		HRESULT CaretDate([in] DATE newValue);
		/// \brief <em>Retrieves the caret date's text</em>
		///
		/// Retrieves the text representing the caret date. The string contains the Unicode character 8206
		/// before each part of the text, e. g. &ldquo;?January, ?2009&rdquo; (? stands for character 8206).
		/// This marker can be used to extract specific parts from the text.
		///
		/// \param[in] calendarIndex The zero-based index of the calendar for which to retrieve the text. The
		///            control can display up to 12 calendars at once.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa CaretDate, CalendarGridCellText, HeaderText
		[propget, id(DISPID_CAL_CARETDATETEXT), helpstring("Retrieves the text representing the caret date. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT CaretDateText([in, defaultvalue(0)] LONG calendarIndex, [out, retval] BSTR* pValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's character set</em>
		///
		///   Retrieves the control's character set (Unicode or ANSI). This property is part of the
		///   fingerprint that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, AppShortName, Build, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_CAL_CHARSET), hidden]
		HRESULT CharSet([out, retval] BSTR* pValue);
		/// \brief <em>Controls which events are fired</em>
		///
		/// Retrieves or sets the events that won't be fired. Disabling events increases performance.
		/// Any combination of the values defined by the \c DisabledEventsConstants enumeration is valid.
		///
		/// \sa DisabledEventsConstants
		[propget, id(DISPID_CAL_DISABLEDEVENTS), helpstring("Retrieves or sets the events that won't be fired. Disabling events increases performance."), nonbrowsable]
		HRESULT DisabledEvents([out, retval] DisabledEventsConstants* pValue);
		[propput, id(DISPID_CAL_DISABLEDEVENTS), helpstring("Retrieves or sets the events that won't be fired. Disabling events increases performance."), nonbrowsable]
		HRESULT DisabledEvents([in] DisabledEventsConstants newValue);
		/// \brief <em>Controls redrawing of the control</em>
		///
		/// Enables or disables automatic redrawing of the control. Disabling redraw while doing large changes
		/// on the control may increase performance. If set to \c False, the control will redraw itself
		/// automatically; otherwise not.
		[propget, id(DISPID_CAL_DONTREDRAW), helpstring("Enables or disables automatic redrawing of the control.")]
		HRESULT DontRedraw([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_CAL_DONTREDRAW), helpstring("Enables or disables automatic redrawing of the control.")]
		HRESULT DontRedraw([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls the speed of automatic scrolling during drag'n'drop</em>
		///
		/// Retrieves or sets the period of time (in milliseconds) that is used as the time-base to calculate
		/// the velocity of auto-scrolling during a drag'n'drop operation. If set to 0, auto-scrolling is
		/// disabled. If set to -1, the system's double-click time is used.
		///
		/// \sa RegisterForOLEDragDrop, _ICalendarEvents::OLEDragMouseMove
		[propget, id(DISPID_CAL_DRAGSCROLLTIMEBASE), helpstring("Retrieves or sets the period of time (in milliseconds) that is used as the time-base to calculate the velocity of auto-scrolling during a drag'n'drop operation.")]
		HRESULT DragScrollTimeBase([out, retval] LONG* pValue);
		[propput, id(DISPID_CAL_DRAGSCROLLTIMEBASE), helpstring("Retrieves or sets the period of time (in milliseconds) that is used as the time-base to calculate the velocity of auto-scrolling during a drag'n'drop operation.")]
		HRESULT DragScrollTimeBase([in] LONG newValue);
		/// \brief <em>Controls whether the control accepts user input</em>
		///
		/// Enables or disables the control for user input. If set to \c True, it reacts to user input;
		/// otherwise not.
		[propget, id(DISPID_CAL_ENABLED), helpstring("Enables or disables the control for user input.")]
		HRESULT Enabled([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_CAL_ENABLED), helpstring("Enables or disables the control for user input.")]
		HRESULT Enabled([in] VARIANT_BOOL newValue);
		/// \brief <em>Retrieves the specified calendar's first date</em>
		///
		/// Retrieves the specified calendar's first date that belongs to the month it is displaying.
		///
		/// \param[in] rowIndex The zero-based row index for which to retrieve the date. If set to -1, the
		///            first date of the whole calendar is retrieved.
		/// \param[in] calendarIndex The zero-based index of the calendar for which to retrieve the date. The
		///            control can display up to 12 calendars at once.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa LastDate, MinDate
		[propget, id(DISPID_CAL_FIRSTDATE), helpstring("Retrieves the specified calendar's first date that belongs to the month it is displaying. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT FirstDate([in, defaultvalue(-1)] LONG rowIndex, [in, defaultvalue(0)] LONG calendarIndex, [out, retval] DATE* pValue);
		/// \brief <em>Specifies the control's font</em>
		///
		/// Retrieves or sets the control's font. It's used to draw the control's content.
		///
		/// \remarks Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar
		///          controls.
		///
		/// \sa UseSystemFont
		[propget, id(DISPID_CAL_FONT), helpstring("Retrieves or sets the control's font. Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar controls.")]
		HRESULT Font([out, retval] IFontDisp** ppFont);
		[propput, id(DISPID_CAL_FONT), helpstring("Retrieves or sets the control's font. Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar controls.")]
		HRESULT Font([in] IFontDisp* pNewFont);
		[propputref, id(DISPID_CAL_FONT), helpstring("Retrieves or sets the control's font. Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar controls.")]
		HRESULT Font([in] IFontDisp* pNewFont);
		/// \brief <em>Specifies the control's text color</em>
		///
		/// Retrieves or sets the control's text color.
		///
		/// \remarks Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar
		///          controls.
		///
		/// \sa BackColor, TitleBackColor, TitleForeColor, MonthBackColor, TrailingForeColor
		[propget, id(DISPID_CAL_FORECOLOR), helpstring("Retrieves or sets the control's text color. Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar controls.")]
		HRESULT ForeColor([out, retval] OLE_COLOR* pValue);
		[propput, id(DISPID_CAL_FORECOLOR), helpstring("Retrieves or sets the control's text color. Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar controls.")]
		HRESULT ForeColor([in] OLE_COLOR newValue);
		/// \brief <em>Retrieves the text being displayed in the calendar header, for instance &ldquo;January, 2009&rdquo;</em>
		///
		/// Retrieves the text being displayed in the calendar header, for instance
		/// &ldquo;January, 2009&rdquo;. The string contains the Unicode character 8206 before each part of the
		/// text, e. g. &ldquo;?January, ?2009&rdquo; (? stands for character 8206). This marker can be used to
		/// extract specific parts from the text.
		///
		/// \param[in] calendarIndex The zero-based index of the calendar for which to retrieve the text. The
		///            control can display up to 12 calendars at once.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa CalendarGridCellText, CaretDateText
		[propget, id(DISPID_CAL_HEADERTEXT), helpstring("Retrieves the text being displayed in the calendar header, for instance 'January, 2009'. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT HeaderText([in, defaultvalue(0)] LONG calendarIndex, [out, retval] BSTR* pValue);
		/// \brief <em>Specifies whether the &ldquo;Today&rdquo; date is highlighted</em>
		///
		/// Retrieves or sets whether the &ldquo;Today&rdquo; date is highlighted, e. g. by drawing a circle
		/// around it. If set to \c True, it is highlighted; otherwise not.
		///
		/// \sa ShowTodayDate
		[propget, id(DISPID_CAL_HIGHLIGHTTODAYDATE), helpstring("Retrieves or sets whether the 'Today' date is highlighted, e. g. by drawing a circle around it.")]
		HRESULT HighlightTodayDate([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_CAL_HIGHLIGHTTODAYDATE), helpstring("Retrieves or sets whether the 'Today' date is highlighted, e. g. by drawing a circle around it.")]
		HRESULT HighlightTodayDate([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls when the \c MouseHover event is fired</em>
		///
		/// Retrieves or sets the number of milliseconds the mouse cursor must be located over the
		/// control's client area before the \c MouseHover event is fired. If set to -1, the system hover
		/// time is used.
		///
		/// \sa _ICalendarEvents::MouseHover
		[propget, id(DISPID_CAL_HOVERTIME), helpstring("Retrieves or sets the number of milliseconds the mouse cursor must be located over the control's client area before the 'MouseHover' event is fired.")]
		HRESULT HoverTime([out, retval] LONG* pValue);
		[propput, id(DISPID_CAL_HOVERTIME), helpstring("Retrieves or sets the number of milliseconds the mouse cursor must be located over the control's client area before the 'MouseHover' event is fired.")]
		HRESULT HoverTime([in] LONG newValue);
		/// \brief <em>Retrieves the control's window handle</em>
		///
		/// Retrieves the control's window handle.
		///
		/// \remarks This property is read-only.
		///
		/// \sa _ICalendarEvents::RecreatedControlWindow, _ICalendarEvents::DestroyedControlWindow
		[propget, id(DISPID_CAL_HWND), helpstring("Retrieves the control's window handle."), nonbrowsable]
		HRESULT hWnd([out, retval] OLE_HANDLE* pValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's release type</em>
		///
		///   Retrieves the control's release type. This property is part of the fingerprint
		///   that uniquely identifies each software written by Timo "TimoSoft" Kunze. If set to
		///   \c True, the control was compiled for release; otherwise it was compiled for debugging.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, AppShortName, Build, CharSet, Programmer, Tester
		/// \endif
		[propget, id(DISPID_CAL_ISRELEASE), hidden]
		HRESULT IsRelease([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Specifies whether the control keeps the selection while the user navigates to the next or previous view</em>
		///
		/// Retrieves or sets whether selected dates remain selected while the user scrolls to the next or
		/// previous view. If set to \c True, the selection is kept on navigation; otherwise not.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa MaxSelectedDates, MultiSelect, ScrollRate, GetSelection, SetSelection
		[propget, id(DISPID_CAL_KEEPSELECTIONONNAVIGATION), helpstring("Retrieves or sets whether selected dates remain selected while the user scrolls to the next or previous view. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT KeepSelectionOnNavigation([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_CAL_KEEPSELECTIONONNAVIGATION), helpstring("Retrieves or sets whether selected dates remain selected while the user scrolls to the next or previous view. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT KeepSelectionOnNavigation([in] VARIANT_BOOL newValue);
		/// \brief <em>Retrieves the specified calendar's last date</em>
		///
		/// Retrieves the specified calendar's last date that belongs to the month it is displaying.
		///
		/// \param[in] rowIndex The zero-based row index for which to retrieve the date. If set to -1, the last
		///            date of the whole calendar is retrieved.
		/// \param[in] calendarIndex The zero-based index of the calendar for which to retrieve the date. The
		///            control can display up to 12 calendars at once.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa FirstDate, MaxDate
		[propget, id(DISPID_CAL_LASTDATE), helpstring("Retrieves the specified calendar's last date that belongs to the month it is displaying. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT LastDate([in, defaultvalue(-1)] LONG rowIndex, [in, defaultvalue(0)] LONG calendarIndex, [out, retval] DATE* pValue);
		/// \brief <em>Specifies the maximum allowable date</em>
		///
		/// Retrieves or sets the maximum date accepted by the control.
		///
		/// \sa MinDate, LastDate, CaretDate
		[propget, id(DISPID_CAL_MAXDATE), helpstring("Retrieves or sets the maximum date accepted by the control.")]
		HRESULT MaxDate([out, retval] DATE* pValue);
		[propput, id(DISPID_CAL_MAXDATE), helpstring("Retrieves or sets the maximum date accepted by the control.")]
		HRESULT MaxDate([in] DATE newValue);
		/// \brief <em>Specifies the maximum number of dates that can be selected at the same time</em>
		///
		/// Retrieves or sets the maximum number of dates that can be selected at the same time.
		///
		/// \remarks This property is ignored if the \c MultiSelect property is set to \c False.
		///
		/// \sa MultiSelect, GetSelection, SetSelection, KeepSelectionOnNavigation
		[propget, id(DISPID_CAL_MAXSELECTEDDATES), helpstring("Retrieves or sets the maximum number of dates that can be selected at the same time.")]
		HRESULT MaxSelectedDates([out, retval] LONG* pValue);
		[propput, id(DISPID_CAL_MAXSELECTEDDATES), helpstring("Retrieves or sets the maximum number of dates that can be selected at the same time.")]
		HRESULT MaxSelectedDates([in] LONG newValue);
		/// \brief <em>Specifies the minimum allowable date</em>
		///
		/// Retrieves or sets the minimum date accepted by the control.
		///
		/// \sa MaxDate, FirstDate, CaretDate
		[propget, id(DISPID_CAL_MINDATE), helpstring("Retrieves or sets the minimum date accepted by the control.")]
		HRESULT MinDate([out, retval] DATE* pValue);
		[propput, id(DISPID_CAL_MINDATE), helpstring("Retrieves or sets the minimum date accepted by the control.")]
		HRESULT MinDate([in] DATE newValue);
		/// \brief <em>Specifies the month portion's background color</em>
		///
		/// Retrieves or sets the background color of the month portion of the control.
		///
		/// \remarks Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar
		///          controls.
		///
		/// \sa BackColor, ForeColor, TitleBackColor, TitleForeColor, TrailingForeColor
		[propget, id(DISPID_CAL_MONTHBACKCOLOR), helpstring("Retrieves or sets the background color of the month portion of the control. Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar controls.")]
		HRESULT MonthBackColor([out, retval] OLE_COLOR* pValue);
		[propput, id(DISPID_CAL_MONTHBACKCOLOR), helpstring("Retrieves or sets the background color of the month portion of the control. Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar controls.")]
		HRESULT MonthBackColor([in] OLE_COLOR newValue);
		/// \brief <em>Controls the control's mouse cursor</em>
		///
		/// Retrieves or sets a user-defined mouse cursor. It's used if \c MousePointer is set to
		/// \c mpCustom.
		///
		/// \sa MousePointer, MousePointerConstants
		[propget, id(DISPID_CAL_MOUSEICON), helpstring("Retrieves or sets a user-defined mouse cursor.")]
		HRESULT MouseIcon([out, retval] IPictureDisp** ppMouseIcon);
		[propput, id(DISPID_CAL_MOUSEICON), helpstring("Retrieves or sets a user-defined mouse cursor.")]
		HRESULT MouseIcon([in] IPictureDisp* pNewMouseIcon);
		[propputref, id(DISPID_CAL_MOUSEICON), helpstring("Retrieves or sets a user-defined mouse cursor.")]
		HRESULT MouseIcon([in] IPictureDisp* pNewMouseIcon);
		/// \brief <em>Controls the control's mouse cursor</em>
		///
		/// Retrieves or sets the cursor's type that's used if the mouse cursor is placed within the
		/// control's client area. Any of the values defined by the \c MousePointerConstants enumeration
		/// is valid.
		///
		/// \sa MouseIcon, MousePointerConstants
		[propget, id(DISPID_CAL_MOUSEPOINTER), helpstring("Retrieves or sets the cursor's type that's used if the mouse cursor is placed within the control's client area.")]
		HRESULT MousePointer([out, retval] MousePointerConstants* pValue);
		[propput, id(DISPID_CAL_MOUSEPOINTER), helpstring("Retrieves or sets the cursor's type that's used if the mouse cursor is placed within the control's client area.")]
		HRESULT MousePointer([in] MousePointerConstants newValue);
		/// \brief <em>Specifies whether multiple dates can be selected</em>
		///
		/// Retrieves or sets whether multiple dates can be selected at the same time. If set to \c True,
		/// the user may select multiple dates; otherwise not.
		///
		/// \attention Changing this property will destroy and recreate the control window.
		///
		/// \sa MaxSelectedDates, GetSelection, SetSelection, KeepSelectionOnNavigation
		[propget, id(DISPID_CAL_MULTISELECT), helpstring("Retrieves or sets whether multiple dates can be selected at the same time. Changing this property will destroy and recreate the control window.")]
		HRESULT MultiSelect([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_CAL_MULTISELECT), helpstring("Retrieves or sets whether multiple dates can be selected at the same time. Changing this property will destroy and recreate the control window.")]
		HRESULT MultiSelect([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies the size of the control's padding</em>
		///
		/// Retrieves or sets the distance (in pixels) between the control's content and the frame that the
		/// active theme might draw around the control.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa UsePadding, Appearance, BorderStyle
		[propget, id(DISPID_CAL_PADDING), helpstring("Retrieves or sets the distance (in pixels) between the control's content and the frame that the active theme might draw around the control. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT Padding([out, retval] LONG* pValue);
		[propput, id(DISPID_CAL_PADDING), helpstring("Retrieves or sets the distance (in pixels) between the control's content and the frame that the active theme might draw around the control. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT Padding([in] LONG newValue);
		/// \brief <em>Specifies whether the \c ContextMenu event can be invoked using the keyboard</em>
		///
		/// Retrieves or sets whether the control fires the \c ContextMenu event if the user presses
		/// [SHIFT]+[F10] or [WINDOWS CONTEXTMENU]. If set to \c True, the events get fired; otherwise not.
		///
		/// \sa _ICalendarEvents::ContextMenu
		[propget, id(DISPID_CAL_PROCESSCONTEXTMENUKEYS), helpstring("Retrieves or sets whether the control fires the 'ContextMenu' event if the user presses [SHIFT]+[F10] or [WINDOWS CONTEXTMENU].")]
		HRESULT ProcessContextMenuKeys([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_CAL_PROCESSCONTEXTMENUKEYS), helpstring("Retrieves or sets whether the control fires the 'ContextMenu' event if the user presses [SHIFT]+[F10] or [WINDOWS CONTEXTMENU].")]
		HRESULT ProcessContextMenuKeys([in] VARIANT_BOOL newValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the name(s) of the control's programmer(s)</em>
		///
		///   Retrieves the name(s) of the control's programmer(s). This property is part of the
		///   fingerprint that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, AppShortName, Build, CharSet, IsRelease, Tester
		/// \endif
		[propget, id(DISPID_CAL_PROGRAMMER), hidden]
		HRESULT Programmer([out, retval] BSTR* pValue);
		/// \brief <em>Controls the control's behavior in drag'n'drop operations</em>
		///
		/// Retrieves or sets whether the control is registered as a target for OLE drag'n'drop. If set to
		/// \c True, the control accepts OLE drag'n'drop actions; otherwise not.
		///
		/// \sa SupportOLEDragImages, _ICalendarEvents::OLEDragEnter
		[propget, id(DISPID_CAL_REGISTERFOROLEDRAGDROP), helpstring("Retrieves or sets whether the control is registered as a target for OLE drag'n'drop.")]
		HRESULT RegisterForOLEDragDrop([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_CAL_REGISTERFOROLEDRAGDROP), helpstring("Retrieves or sets whether the control is registered as a target for OLE drag'n'drop.")]
		HRESULT RegisterForOLEDragDrop([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls the control's right-to-left features</em>
		///
		/// Enables or disables bidirectional features. Any combination of the values defined by the
		/// \c RightToLeftConstants enumeration is valid.
		///
		/// \sa RightToLeftConstants
		[propget, id(DISPID_CAL_RIGHTTOLEFT), helpstring("Enables or disables bidirectional features.")]
		HRESULT RightToLeft([out, retval] RightToLeftConstants* pValue);
		[propput, id(DISPID_CAL_RIGHTTOLEFT), helpstring("Enables or disables bidirectional features.")]
		HRESULT RightToLeft([in] RightToLeftConstants newValue);
		/// \brief <em>Specifies the number of months that the control moves its display if one of the scroll buttons is clicked</em>
		///
		/// Retrieves or sets the scroll rate of the control. The scroll rate is the number of months that the
		/// control moves its display when the user clicks a scroll button.\n
		/// If set to zero, the control scrolls by the number of months it is displaying.
		///
		/// \sa HitTest, KeepSelectionOnNavigation
		[propget, id(DISPID_CAL_SCROLLRATE), helpstring("Retrieves or sets the scroll rate of the control. The scroll rate is the number of months that the control moves its display when the user clicks a scroll button. If 0, the control scrolls by the number of months it is displaying.")]
		HRESULT ScrollRate([out, retval] LONG* pValue);
		[propput, id(DISPID_CAL_SCROLLRATE), helpstring("Retrieves or sets the scroll rate of the control. The scroll rate is the number of months that the control moves its display when the user clicks a scroll button. If 0, the control scrolls by the number of months it is displaying.")]
		HRESULT ScrollRate([in] LONG newValue);
		/// \brief <em>Specifies whether the &ldquo;Today&rdquo; date is displayed at the bottom of the control</em>
		///
		/// Retrieves or sets whether the &ldquo;Today&rdquo; date is displayed at the bottom of the control.
		/// If set to \c True, it is displayed; otherwise not.
		///
		/// \sa HighlightTodayDate, GetMaxTodayWidth
		[propget, id(DISPID_CAL_SHOWTODAYDATE), helpstring("Retrieves or sets whether the 'Today' date is displayed at the bottom of the control.")]
		HRESULT ShowTodayDate([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_CAL_SHOWTODAYDATE), helpstring("Retrieves or sets whether the 'Today' date is displayed at the bottom of the control.")]
		HRESULT ShowTodayDate([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether dates from the previous or next month are displayed</em>
		///
		/// Retrieves or sets whether dates from the previous or next month are displayed to fill up weeks that
		/// start or end in the previous or next month. If set to \c True, such trailing dates are displayed;
		/// otherwise not.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa StartOfWeek
		[propget, id(DISPID_CAL_SHOWTRAILINGDATES), helpstring("Retrieves or sets whether dates from the previous or next month are displayed. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT ShowTrailingDates([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_CAL_SHOWTRAILINGDATES), helpstring("Retrieves or sets whether dates from the previous or next month are displayed. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT ShowTrailingDates([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether week numbers are displayed to the left of each row of days</em>
		///
		/// Retrieves or sets whether week numbers are displayed to the left of each row of days. Week 1 is
		/// defined as the first week that contains at least four days. If set to \c True, week numbers are
		/// displayed; otherwise not.
		///
		/// \sa StartOfWeek
		[propget, id(DISPID_CAL_SHOWWEEKNUMBERS), helpstring("Retrieves or sets whether week numbers are displayed to the left of each row of days.")]
		HRESULT ShowWeekNumbers([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_CAL_SHOWWEEKNUMBERS), helpstring("Retrieves or sets whether week numbers are displayed to the left of each row of days.")]
		HRESULT ShowWeekNumbers([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies which day is handled as the first day of a week</em>
		///
		/// Retrieves or sets the day that is handled as the first day of a week. Any of the values defined by
		/// the \c StartOfWeekConstants enumeration is valid.
		///
		/// \sa StartOfWeekConstants
		[propget, id(DISPID_CAL_STARTOFWEEK), helpstring("Retrieves or sets the day that is handled as the first day of a week.")]
		HRESULT StartOfWeek([out, retval] StartOfWeekConstants* pValue);
		[propput, id(DISPID_CAL_STARTOFWEEK), helpstring("Retrieves or sets the day that is handled as the first day of a week.")]
		HRESULT StartOfWeek([in] StartOfWeekConstants newValue);
		/// \brief <em>Controls the control's behavior in drag'n'drop operations</em>
		///
		/// Retrieves or sets whether the control creates an \c IDropTargetHelper object, so that a drag image
		/// can be displayed during OLE drag'n'drop. If set to \c True, the control creates the object;
		/// otherwise not.
		///
		/// \remarks Requires shell32.dll version 5.0 or higher.
		///
		/// \sa RegisterForOLEDragDrop, FinishOLEDragDrop,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms646238.aspx">IDropTargetHelper</a>
		[propget, id(DISPID_CAL_SUPPORTOLEDRAGIMAGES), helpstring("Retrieves or sets whether the control creates an 'IDropTargetHelper' object, so that a drag image can be displayed during OLE drag'n'drop. Requires shell32.dll version 5.0 or higher.")]
		HRESULT SupportOLEDragImages([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_CAL_SUPPORTOLEDRAGIMAGES), helpstring("Retrieves or sets whether the control creates an 'IDropTargetHelper' object, so that a drag image can be displayed during OLE drag'n'drop. Requires shell32.dll version 5.0 or higher.")]
		HRESULT SupportOLEDragImages([in] VARIANT_BOOL newValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the name(s) of the control's tester(s)</em>
		///
		///   Retrieves the name(s) of the control's tester(s). This property is part of the
		///   fingerprint that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, AppShortName, Build, CharSet, IsRelease, Programmer
		/// \endif
		[propget, id(DISPID_CAL_TESTER), hidden]
		HRESULT Tester([out, retval] BSTR* pValue);
		/// \brief <em>Specifies the title portion's background color</em>
		///
		/// Retrieves or sets the background color of the title portion of the control.
		///
		/// \remarks Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar
		///          controls.
		///
		/// \sa BackColor, ForeColor, TitleForeColor, MonthBackColor, TrailingForeColor
		[propget, id(DISPID_CAL_TITLEBACKCOLOR), helpstring("Retrieves or sets the background color of the title portion of the control. Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar controls.")]
		HRESULT TitleBackColor([out, retval] OLE_COLOR* pValue);
		[propput, id(DISPID_CAL_TITLEBACKCOLOR), helpstring("Retrieves or sets the background color of the title portion of the control. Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar controls.")]
		HRESULT TitleBackColor([in] OLE_COLOR newValue);
		/// \brief <em>Specifies the title portion's text color</em>
		///
		/// Retrieves or sets the text color of the title portion of the control.
		///
		/// \remarks Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar
		///          controls.
		///
		/// \sa BackColor, ForeColor, TitleBackColor, MonthBackColor, TrailingForeColor
		[propget, id(DISPID_CAL_TITLEFORECOLOR), helpstring("Retrieves or sets the text color of the title portion of the control. Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar controls.")]
		HRESULT TitleForeColor([out, retval] OLE_COLOR* pValue);
		[propput, id(DISPID_CAL_TITLEFORECOLOR), helpstring("Retrieves or sets the text color of the title portion of the control. Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar controls.")]
		HRESULT TitleForeColor([in] OLE_COLOR newValue);
		/// \brief <em>Specifies the date that is displayed as the &ldquo;Today&rdquo; date</em>
		///
		/// Retrieves or sets the date that is displayed as the &ldquo;Today&rdquo; date. If this property is
		/// set to zero, the system default is used.
		///
		/// \sa ShowTodayDate, HighlightTodayDate, CaretDate, GetMaxTodayWidth
		[propget, id(DISPID_CAL_TODAYDATE), helpstring("Retrieves or sets the date that is displayed as the 'Today' date."), nonbrowsable]
		HRESULT TodayDate([out, retval] DATE* pValue);
		[propput, id(DISPID_CAL_TODAYDATE), helpstring("Retrieves or sets the date that is displayed as the 'Today' date."), nonbrowsable]
		HRESULT TodayDate([in] DATE newValue);
		/// \brief <em>Specifies the text color of trailing dates</em>
		///
		/// Retrieves or sets the text color of trailing dates.
		///
		/// \remarks Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar
		///          controls.
		///
		/// \sa BackColor, ForeColor, TitleBackColor, TitleForeColor, MonthBackColor
		[propget, id(DISPID_CAL_TRAILINGFORECOLOR), helpstring("Retrieves or sets the text color of trailing dates. Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar controls.")]
		HRESULT TrailingForeColor([out, retval] OLE_COLOR* pValue);
		[propput, id(DISPID_CAL_TRAILINGFORECOLOR), helpstring("Retrieves or sets the text color of trailing dates. Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar controls.")]
		HRESULT TrailingForeColor([in] OLE_COLOR newValue);
		/// \brief <em>Controls the control's padding</em>
		///
		/// Retrieves or sets whether the control applies the padding specified by the \c Padding property. If
		/// set to \c True, the padding is applied; otherwise not.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa Padding
		[propget, id(DISPID_CAL_USEPADDING), helpstring("Retrieves or sets whether the control applies the padding specified by the 'Padding' property. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT UsePadding([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_CAL_USEPADDING), helpstring("Retrieves or sets whether the control applies the padding specified by the 'Padding' property. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT UsePadding([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether the control uses the shortest instead of the short day names</em>
		///
		/// Retrieves or sets whether the control uses the shortest instead of the short day names for the day
		/// of week column header. If set to \c True, the shortest, otherwise the short names are used.
		///
		/// \remarks Not all locales seem to define shortest day names. Therefore it may happen that there is
		///          no difference between short day names and shortest day names.\n
		///          Requires comctl32.dll version 6.10 or higher.
		[propget, id(DISPID_CAL_USESHORTESTDAYNAMES), helpstring("Retrieves or sets whether the control uses the shortest instead of the short day names for the day of week column header. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT UseShortestDayNames([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_CAL_USESHORTESTDAYNAMES), helpstring("Retrieves or sets whether the control uses the shortest instead of the short day names for the day of week column header. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT UseShortestDayNames([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether the control uses the system font</em>
		///
		/// Retrieves or sets whether the control uses the system's default dialog font or the font specified
		/// by the \c Font property. If set to \c True, the system font; otherwise the specified font is used.
		///
		/// \remarks Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar
		///          controls.
		///
		/// \sa Font
		[propget, id(DISPID_CAL_USESYSTEMFONT), helpstring("Retrieves or sets whether the control uses the system's default dialog font or the font specified by the 'Font' property. Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar controls.")]
		HRESULT UseSystemFont([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_CAL_USESYSTEMFONT), helpstring("Retrieves or sets whether the control uses the system's default dialog font or the font specified by the 'Font' property. Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar controls.")]
		HRESULT UseSystemFont([in] VARIANT_BOOL newValue);
		/// \brief <em>Retrieves the control's version</em>
		///
		/// \remarks This property is read-only.
		[propget, id(DISPID_CAL_VERSION), helpstring("Retrieves the control's version."), nonbrowsable]
		HRESULT Version([out, retval] BSTR* pValue);
		/// \brief <em>Specifies the control's view mode</em>
		///
		/// Retrieves or sets the control's view mode. Any of the values defined by the \c ViewConstants
		/// enumeration is valid.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa _ICalendarEvents::ViewChanged, ViewConstants
		[propget, id(DISPID_CAL_VIEW), helpstring("Retrieves or sets the control's view mode. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT View([out, retval] ViewConstants* pValue);
		[propput, id(DISPID_CAL_VIEW), helpstring("Retrieves or sets the control's view mode. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT View([in] ViewConstants newValue);

		/// \brief <em>Displays the control's credits</em>
		///
		/// Displays some information about this control and its author.
		[id(DISPID_CAL_ABOUT), helpstring("Displays some information about this control and its author.")]
		HRESULT About(void);
		/// \brief <em>Retrieves details about the currently visible range of dates</em>
		///
		/// Retrieves details about the currently visible range of dates. These details include the first and
		/// the last visible date and the number of visible months.
		///
		/// \param[in] includePartialVisibleMonths If set to \c True, trailing dates are included; otherwise
		///            only entirely displayed months are counted.
		/// \param[out] firstVisibleDate The first visible date.
		/// \param[out] lastVisibleDate The last visible date.
		///
		/// \return The number of months currently visible.
		///
		/// \sa CaretDate
		[id(DISPID_CAL_COUNTVISIBLEMONTHS), helpstring("Retrieves details about the currently visible range of dates.")]
		HRESULT CountVisibleMonths([in, defaultvalue(-1)] VARIANT_BOOL includePartialVisibleMonths, [in, out, defaultvalue(0)] DATE* firstVisibleDate, [in, out, defaultvalue(0)] DATE* lastVisibleDate, [out, retval] LONG* pVisibleMonths);
		/// \brief <em>Retrieves the maximum width of the &ldquo;Today&rdquo; string</em>
		///
		/// Retrieves the maximum width of the &ldquo;Today&rdquo; string.
		///
		/// \return The maximum width of the &ldquo;Today&rdquo; string.
		///
		/// \sa ShowTodayDate, TodayDate
		[id(DISPID_CAL_GETMAXTODAYWIDTH), helpstring("Retrieves the maximum width of the 'Today' string.")]
		HRESULT GetMaxTodayWidth([out, retval] OLE_XSIZE_PIXELS* pWidth);
		/// \brief <em>Retrieves the control's minimum size required to display a full month</em>
		///
		/// Retrieves the control's minimum size required to display a full month.
		///
		/// \param[out] width The minimum width.
		/// \param[out] height The minimum height.
		///
		/// \sa MinimizeRectangle
		[id(DISPID_CAL_GETMINIMUMSIZE), helpstring("Retrieves the control's minimum size required to display a full month.")]
		HRESULT GetMinimumSize([in, out, defaultvalue(0)] OLE_XSIZE_PIXELS* Width, [in, out, defaultvalue(0)] OLE_YSIZE_PIXELS* Height);
		/// \brief <em>Retrieves the bounding rectangle of the specified control part</em>
		///
		/// Retrieves the bounding rectangle (in pixels relative to the control's upper-left corner) of the
		/// specified control part.
		///
		/// \param[in] controlPart The part of the control for which to retrieve the rectangle. Any of the
		///            values defined by the \c ControlPartConstants enumeration is valid.
		/// \param[in] columnIndex The column index of the grid cell for which to retrieve the rectangle. The
		///            index starts at -1, which identifies the week numbers column. This parameter is ignored
		///            if \c controlPart is not equal to \c cpCalendarCell.
		/// \param[in] rowIndex The row index of the grid cell or row for which to retrieve the rectangle. The
		///            index starts at -1, which identifies the week days row. This parameter is ignored
		///            if \c controlPart is not equal to \c cpCalendarRow or \c cpCalendarCell.
		/// \param[in] calendarIndex The zero-based index of the calendar for which to retrieve the rectangle.
		///            The control can display up to 12 calendars at once. This parameter is ignored
		///            if \c controlPart is equal to \c cpControl, \c cpNextButton, \c cpPreviousButton or
		///            \c cpFooter.
		/// \param[out] left The x-coordinate (in pixels) of the upper-left corner of the control part's
		///             bounding rectangle relative to the control's upper-left corner.
		/// \param[out] top The y-coordinate (in pixels) of the upper-left corner of the control part's
		///             bounding rectangle relative to the control's upper-left corner.
		/// \param[out] right The x-coordinate (in pixels) of the lower-right corner of the control part's
		///             bounding rectangle relative to the control's upper-left corner.
		/// \param[out] bottom The y-coordinate (in pixels) of the lower-right corner of the control part's
		///             bounding rectangle relative to the control's upper-left corner.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa ControlPartConstants
		[id(DISPID_CAL_GETRECTANGLE), helpstring("Retrieves the bounding rectangle (in pixels relative to the control's upper-left corner) of the specified control part. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT GetRectangle([in] ControlPartConstants controlPart, [in, defaultvalue(0)] LONG columnIndex, [in, defaultvalue(0)] LONG rowIndex, [in, defaultvalue(0)] LONG calendarIndex, [in, out, defaultvalue(0)] OLE_XPOS_PIXELS* Left, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* Top, [in, out, defaultvalue(0)] OLE_XPOS_PIXELS* Right, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* Bottom);
		/// \brief <em>Retrieves the current selection's start and end date</em>
		///
		/// Retrieves the first and the last date of the currently selected range of dates.
		///
		/// \param[out] selectionStart The first selected date.
		/// \param[out] selectionEnd The last selected date.
		///
		/// \remarks This method fails if the \c MultiSelect property is set to \c False.
		///
		/// \sa SetSelection, CalendarGridCellSelected, MultiSelect, KeepSelectionOnNavigation,
		///     _ICalendarEvents::SelectionChanged
		[id(DISPID_CAL_GETSELECTION), helpstring("Retrieves the first and the last date of the currently selected range of dates.")]
		HRESULT GetSelection([in, out, defaultvalue(0)] DATE* selectionStart, [in, out, defaultvalue(0)] DATE* selectionEnd);
		/// \brief <em>Hit-tests the specified point</em>
		///
		/// Retrieves the control's parts that lie below the point ('x'; 'y').
		///
		/// \param[in] x The x-coordinate (in pixels) of the point to check. It must be relative to the
		///            control's upper-left corner.
		/// \param[in] y The y-coordinate (in pixels) of the point to check. It must be relative to the
		///            control's upper-left corner.
		/// \param[out] hitTestDetails Receives a value specifying the exact part of the control the
		///             specified point lies in. Any of the values defined by the \c HitTestConstants
		///             enumeration is valid.
		/// \param[out] indexOfHitCalendar <strong>Comctl32.dll version 6.10 and newer only:</strong> Receives
		///             the zero-based index of the calendar that contains the specified point (in case that
		///             multiple calendars are displayed).
		/// \param[out] indexOfHitColumn <strong>Comctl32.dll version 6.10 and newer only:</strong> Receives
		///             the zero-based index of the column in the calendar grid that the specified point is
		///             over.
		/// \param[out] indexOfHitRow <strong>Comctl32.dll version 6.10 and newer only:</strong> Receives the
		///             zero-based index of the row in the calendar grid that the specified point is over.
		/// \param[out] cellRectangleLeft <strong>Comctl32.dll version 6.10 and newer only:</strong> Receives
		///             the distance (in pixels) between the control's left border and the left border of the
		///             calendar grid cell that the specified point is over.
		/// \param[out] cellRectangleTop <strong>Comctl32.dll version 6.10 and newer only:</strong> Receives
		///             the distance (in pixels) between the control's upper border and the upper border of the
		///             calendar grid cell that the specified point is over.
		/// \param[out] cellRectangleRight <strong>Comctl32.dll version 6.10 and newer only:</strong> Receives
		///             the distance (in pixels) between the control's left border and the right border of the
		///             calendar grid cell that the specified point is over.
		/// \param[out] cellRectangleBottom <strong>Comctl32.dll version 6.10 and newer only:</strong> Receives
		///             the distance (in pixels) between the control's upper border and the lower border of the
		///             calendar grid cell that the specified point is over.
		///
		/// \return The date that the specified point is over. Zero, if no date was hit.
		///
		/// \sa HitTestConstants
		[id(DISPID_CAL_HITTEST), helpstring("Retrieves the control's parts that the point ('x'; 'y') is over.")]
		HRESULT HitTest([in] OLE_XPOS_PIXELS x, [in] OLE_YPOS_PIXELS y, [in, out, defaultvalue(0)] HitTestConstants* hitTestDetails, [in, out, defaultvalue(0)] LONG* indexOfHitCalendar, [in, out, defaultvalue(0)] LONG* indexOfHitColumn, [in, out, defaultvalue(0)] LONG* indexOfHitRow, [in, out, defaultvalue(0)] OLE_XPOS_PIXELS* cellRectangleLeft, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* cellRectangleTop, [in, out, defaultvalue(0)] OLE_XPOS_PIXELS* cellRectangleRight, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* cellRectangleBottom, [out, retval] DATE* pHitDate);
		/// \brief <em>Loads the control's settings from the specified file</em>
		///
		/// \param[in] file The file to read from.
		///
		/// \return \c True if the settings could be loaded; otherwise \c False.
		///
		/// \sa SaveSettingsToFile
		[id(DISPID_CAL_LOADSETTINGSFROMFILE), helpstring("Loads the control's settings from the specified file.")]
		HRESULT LoadSettingsFromFile([in] BSTR file, [out, retval] VARIANT_BOOL* pSucceeded);
		/// \brief <em>Changes the specified rectangle to the smallest size that still fits the same number of calendars</em>
		///
		/// Calculates how many calendars will fit in the specified rectangle, and then sets the rectangle to
		/// the minimum size that it needs to be to fit that number of calendars.
		///
		/// \param[in,out] left On entry, specifies the x-coordinate (in pixels) of the left border of the
		///                rectangle to minimize. On return, it receives the x-coordinate of the left border of
		///                the minimized rectangle.
		/// \param[in,out] top On entry, specifies the y-coordinate (in pixels) of the top border of the
		///                rectangle to minimize. On return, it receives the y-coordinate of the top border of
		///                the minimized rectangle.
		/// \param[in,out] right On entry, specifies the x-coordinate (in pixels) of the right border of the
		///                rectangle to minimize. On return, it receives the x-coordinate of the right border
		///                of the minimized rectangle.
		/// \param[in,out] bottom On entry, specifies the y-coordinate (in pixels) of the bottom border of the
		///                rectangle to minimize. On return, it receives the y-coordinate of the bottom border
		///                of the minimized rectangle.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa GetMinimumSize, CalendarCount
		[id(DISPID_CAL_MINIMIZERECTANGLE), helpstring("Calculates how many calendars will fit in the specified rectangle, and then sets the rectangle to the minimum size that it needs to be to fit that number of calendars. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT MinimizeRectangle([in, out] OLE_XPOS_PIXELS* Left, [in, out] OLE_YPOS_PIXELS* Top, [in, out] OLE_XPOS_PIXELS* Right, [in, out] OLE_YPOS_PIXELS* Bottom);
		/// \brief <em>Advises the control to redraw itself</em>
		[id(DISPID_CAL_REFRESH), helpstring("Advises the control to redraw itself.")]
		HRESULT Refresh(void);
		/// \brief <em>Saves the control's settings to the specified file</em>
		///
		/// \param[in] file The file to write to.
		///
		/// \return \c True if the settings could be saved; otherwise \c False.
		///
		/// \sa LoadSettingsFromFile
		[id(DISPID_CAL_SAVESETTINGSTOFILE), helpstring("Saves the control's settings to the specified file.")]
		HRESULT SaveSettingsToFile([in] BSTR file, [out, retval] VARIANT_BOOL* pSucceeded);
		/// \brief <em>Sets the dates that are displayed using a bold font</em>
		///
		/// Sets the dates that are displayed using a bold font.
		///
		/// \param[in] states An array containing the state for each currently displayed date. If a date's
		///            entry is set to \c True, it is displayed bold; otherwise not.\n
		///            <strong>Note:</strong> To simplify handling, it is assumed that each month has 31 days.
		///            So if the state for April 30th is stored at index 30, the state for May 1st would be
		///            stored at index 32 instead of 31.\n
		///            This array must contain at least \c n * 31 elements where \c n is the number of months
		///            returned by \c CountVisibleMonths(True).
		///
		/// \return \c True on success; otherwise \c False.
		///
		/// \remarks Due to a bug in Windows, bold dates won't show up bold if using comctl32.dll version 6.10
		///          on Windows Vista.\n
		///          If the control's view changes or it is closed, any previously set bold states are lost.
		///
		/// \sa CountVisibleMonths, _ICalendarEvents::GetBoldDates
		[id(DISPID_CAL_SETBOLDDATES), helpstring("Sets the dates that are displayed using a bold font. See helpfile for some important notes about the support of bold dates.")]
		HRESULT SetBoldDates([in] SAFEARRAY(VARIANT_BOOL)* states, [out, retval] VARIANT_BOOL* pSucceeded);
		/// \brief <em>Sets the selection's start and end date</em>
		///
		/// Sets the first and the last date of the selected range of dates.
		///
		/// \param[in] selectionStart The first date to select.
		/// \param[in] selectionEnd The last date to select.
		///
		/// \remarks This method fails if the \c MultiSelect property is set to \c False.
		///
		/// \sa GetSelection, CalendarGridCellSelected, MultiSelect, KeepSelectionOnNavigation,
		///     _ICalendarEvents::SelectionChanged
		[id(DISPID_CAL_SETSELECTION), helpstring("Sets the first and the last date of the selected range of dates.")]
		HRESULT SetSelection([in] DATE selectionStart, [in] DATE selectionEnd);

		/// \brief <em>Specifies whether the control intercepts double clicks</em>
		///
		/// Enables or disables double clicks. If set to \c True, double clicks are accepted; otherwise all
		/// clicks are handled as single clicks.
		///
		/// \remarks Enabling double-clicks may lead to accidental double-clicks, e.g. if the user rapidly
		///          clicks onto the navigation arrows for selecting another month.
		///
		/// \sa _ICalendarEvents::DblClick, _ICalendarEvents::MDblClick, _ICalendarEvents::RDblClick,
		///     _ICalendarEvents::XDblClick
		[propget, id(DISPID_CAL_DETECTDOUBLECLICKS), helpstring("Enables or disables double clicks. Enabling double-clicks may lead to accidental double-clicks, e.g. if the user rapidly clicks onto the navigation arrows for selecting another month.")]
		HRESULT DetectDoubleClicks([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_CAL_DETECTDOUBLECLICKS), helpstring("Enables or disables double clicks. Enabling double-clicks may lead to accidental double-clicks, e.g. if the user rapidly clicks onto the navigation arrows for selecting another month.")]
		HRESULT DetectDoubleClicks([in] VARIANT_BOOL newValue);

		/// \brief <em>Finishes a pending drop operation</em>
		///
		/// During a drag'n'drop operation the drag image is displayed until the \c OLEDragDrop event has been
		/// handled. This order is intended by Microsoft Windows. However, if a message box is displayed from
		/// within the \c OLEDragDrop event, or the drop operation cannot be performed asynchronously and takes
		/// a long time, it may be desirable to remove the drag image earlier.\n
		/// This method will break the intended order and finish the drag'n'drop operation (including removal
		/// of the drag image) immediately.
		///
		/// \remarks This method will fail if not called from the \c OLEDragDrop event handler or if no drag
		///          images are used.
		///
		/// \sa _ICalendarEvents::OLEDragDrop, SupportOLEDragImages
		[id(DISPID_CAL_FINISHOLEDRAGDROP), helpstring("Finishes a pending drop operation from within the 'OLEDragDrop' event, removing the drag image, but breaking the intended order. See documentation for details.")]
		HRESULT FinishOLEDragDrop(void);
	};


	/// \interface _ICalendarEvents
	/// \author Timo "TimoSoft" Kunze
	/// \brief <em>The \c Calendar class' events interface</em>
	///
	/// This interface defines all events the \c Calendar class may raise.
	///
	/// \sa ICalendar
	[
		uuid(E8178CC1-DE2B-49a0-835D-C3A07EC04912),
		helpstring("ICalendar-event-interface")
	]
	dispinterface _ICalendarEvents
	{
		properties:
		methods:
			/// \brief <em>The date selection was changed</em>
			///
			/// Will be fired after another date or range of dates was selected.
			///
			/// \param[in] firstSelectedDate The first selected date.
			/// \param[in] lastSelectedDate The last selected date.
			///
			/// \remarks This event maps directly to the \c MCN_SELCHANGE notification that the \c SysMonthCal32
			///          window is sending whenever the selection changes. This notification is sent twice (and
			///          therefore the event is raised twice), if the user clicks one of the scroll buttons to
			///          view another month.\n
			///          Also \c MCN_SELCHANGE is sent (and the event raised) at regular intervals to detect date
			///          changes.
			///
			/// \sa ICalendar::GetSelection, ICalendar::SetSelection, ICalendar::CaretDate,
			///     <a href="https://msdn.microsoft.com/en-us/library/bb760937.aspx">MCN_SELCHANGE</a>
			[id(DISPID_CALE_SELECTIONCHANGED), helpstring("Will be fired after another date or range of dates was selected.")]
			void SelectionChanged(DATE firstSelectedDate, DATE lastSelectedDate);
			/// \brief <em>The user clicked into the control's client area</em>
			///
			/// Will be fired if the user clicks into the control's client area using the left mouse button.
			///
			/// \param[in] hitDate The date that was clicked. May be zero.
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be \c vbLeftButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was clicked. Any of the values
			///            defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa DblClick, MClick, RClick, XClick, HitTestConstants, ICalendar::DisabledEvents
			[id(DISPID_CALE_CLICK), helpstring("Will be fired if the user clicks into the control's client area using the left mouse button. This event may be disabled.")]
			void Click(DATE hitDate, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The context menu should be displayed</em>
			///
			/// Will be fired if the control's context menu should be displayed.
			///
			/// \param[in] hitDate The date the context menu refers to. Will be zero if the context menu
			///            should be displayed for the whole control instead of only for a single date.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the menu's proposed position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the menu's proposed position relative to the
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the menu's proposed position
			///            lies in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			/// \param[in,out] showDefaultMenu If set to \c True, the default context menu is displayed;
			///                otherwise the control doesn't display any context menu itself, but you may
			///                display your custom menu.
			///
			/// \sa RClick, HitTestConstants
			[id(DISPID_CALE_CONTEXTMENU), helpstring("Will be fired if the control's context menu should be displayed.")]
			void ContextMenu(DATE hitDate, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails, VARIANT_BOOL* showDefaultMenu);
			/// \brief <em>The mouse cursor was moved into a date cell's bounding rectangle</em>
			///
			/// Will be fired if the user moved the mouse cursor into the specified date cell's bounding
			/// rectangle.
			///
			/// \param[in] hitDate The date that was entered.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Most of the values defined by the \c HitTestConstants enumeration are valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa DateMouseLeave, MouseMove, HitTestConstants, ExtendedMouseButtonConstants,
			///     ICalendar::DisabledEvents
			[id(DISPID_CALE_DATEMOUSEENTER), helpstring("Will be fired if the user moved the mouse cursor into the specified date cell's bounding rectangle. This event may be disabled.")]
			void DateMouseEnter(DATE hitDate, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The mouse cursor was moved out of a date cell's bounding rectangle</em>
			///
			/// Will be fired if the user moved the mouse cursor out of the specified date cell's bounding
			/// rectangle.
			///
			/// \param[in] hitDate The date that was left.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Most of the values defined by the \c HitTestConstants enumeration are valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa DateMouseEnter, MouseMove, HitTestConstants, ExtendedMouseButtonConstants,
			///     ICalendar::DisabledEvents
			[id(DISPID_CALE_DATEMOUSELEAVE), helpstring("Will be fired if the user moved the mouse cursor out of the specified date cell's bounding rectangle. This event may be disabled.")]
			void DateMouseLeave(DATE hitDate, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The user double-clicked into the control's client area</em>
			///
			/// Will be fired if the user double-clicks into the control's client area using the left mouse
			/// button.
			///
			/// \param[in] hitDate The date that was double-clicked. May be zero.
			/// \param[in] button The mouse buttons that were pressed during the double-click. This should
			///            always be \c vbLeftButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the
			///            double-click. Any combination of the values defined by VB's \c ShiftConstants
			///            enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the double-click's position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the double-click's position relative to the
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was double-clicked. Any of the
			///            values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa Click, MDblClick, RDblClick, XDblClick, HitTestConstants, ICalendar::DetectDoubleClicks,
			///     ICalendar::DisabledEvents
			[id(DISPID_CALE_DBLCLICK), helpstring("Will be fired if the user double-clicks into the control's client area using the left mouse button. This event may be disabled.")]
			void DblClick(DATE hitDate, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The control window was destroyed</em>
			///
			/// Will be fired after the control window was destroyed.
			///
			/// \param[in] hWnd The control's window handle.
			///
			/// \sa RecreatedControlWindow, ICalendar::hWnd
			[id(DISPID_CALE_DESTROYEDCONTROLWINDOW), helpstring("Will be fired after the control window was destroyed.")]
			void DestroyedControlWindow(LONG hWnd);
			/// \brief <em>The control needs to know which dates shall be displayed bold</em>
			///
			/// Will be fired if the control needs to know which dates shall be displayed bold.
			///
			/// \param[in] firstDate The first date for which to retrieve the state.
			/// \param[in] numberOfDates The number of dates for which to retrieve the states.
			/// \param[in,out] states An array containing the state for each date.
			///
			/// \remarks Due to a bug in Windows, bold dates won't show up bold if using comctl32.dll version
			///          6.10 on Windows Vista.
			///
			/// \sa ICalendar::SetBoldDates
			[id(DISPID_CALE_GETBOLDDATES), helpstring("Will be fired if the control needs to know which dates shall be displayed bold. Due to a bug in Windows, bold dates won't show up bold if using comctl32.dll version 6.10 on Windows Vista.")]
			void GetBoldDates(DATE FirstDate, LONG numberOfDates, SAFEARRAY(VARIANT_BOOL)* states);
			/// \brief <em>A key was pressed while the control has the focus</em>
			///
			/// Will be fired if the user presses a key while the control has the focus.
			///
			/// \param[in,out] keyCode The pressed key. Any of the values defined by VB's
			///                \c KeyCodeConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			///
			/// \remarks You may set \c keyCode to 0 to eat the message.\n
			///          This event may be disabled.
			///
			/// \sa KeyUp, KeyPress, ICalendar::DisabledEvents
			[id(DISPID_CALE_KEYDOWN), helpstring("Will be fired if the user presses a key while the control has the focus. This event may be disabled.")]
			void KeyDown(SHORT* keyCode, SHORT shift);
			/// \brief <em>An alphanumeric key was pressed and released while the control has the focus</em>
			///
			/// Will be fired if the user presses and releases an alphanumeric key while the control has the
			/// focus.
			///
			/// \param[in,out] keyAscii The pressed key's ASCII code.
			///
			/// \remarks You may set \c keyAscii to 0 to eat the message.\n
			///          This event may be disabled.
			///
			/// \sa KeyDown, KeyUp, ICalendar::DisabledEvents
			[id(DISPID_CALE_KEYPRESS), helpstring("Will be fired if the user presses and releases an alphanumeric key while the control has the focus. This event may be disabled.")]
			void KeyPress(SHORT* keyAscii);
			/// \brief <em>A key was released while the control has the focus</em>
			///
			/// Will be fired if the user releases a key while the control has the focus.
			///
			/// \param[in,out] keyCode The released key. Any of the values defined by VB's
			///                \c KeyCodeConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			///
			/// \remarks You may set \c keyCode to 0 to eat the message.\n
			///          This event may be disabled.
			///
			/// \sa KeyDown, KeyPress, ICalendar::DisabledEvents
			[id(DISPID_CALE_KEYUP), helpstring("Will be fired if the user releases a key while the control has the focus. This event may be disabled.")]
			void KeyUp(SHORT* keyCode, SHORT shift);
			/// \brief <em>The user clicked into the control's client area</em>
			///
			/// Will be fired if the user clicks into the control's client area using the middle mouse button.
			///
			/// \param[in] hitDate The date that was clicked. May be zero.
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be \c vbMiddleButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was clicked. Any of the values
			///            defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MDblClick, Click, RClick, XClick, HitTestConstants, ICalendar::DisabledEvents
			[id(DISPID_CALE_MCLICK), helpstring("Will be fired if the user clicks into the control's client area using the middle mouse button. This event may be disabled.")]
			void MClick(DATE hitDate, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The user double-clicked into the control's client area</em>
			///
			/// Will be fired if the user double-clicks into the control's client area using the middle mouse
			/// button.
			///
			/// \param[in] hitDate The date that was double-clicked. May be zero.
			/// \param[in] button The mouse buttons that were pressed during the double-click. This should
			///            always be \c vbMiddleButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the
			///            double-click. Any combination of the values defined by VB's \c ShiftConstants
			///            enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the double-click's position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the double-click's position relative to the
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was double-clicked. Any
			///            of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MClick, DblClick, RDblClick, XDblClick, HitTestConstants, ICalendar::DetectDoubleClicks,
			///     ICalendar::DisabledEvents
			[id(DISPID_CALE_MDBLCLICK), helpstring("Will be fired if the user double-clicks into the control's client area using the middle mouse button. This event may be disabled.")]
			void MDblClick(DATE hitDate, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>A mouse button was pressed over the control's client area</em>
			///
			/// Will be fired if the user presses a mouse button while the mouse cursor is located over the
			/// control's client area.
			///
			/// \param[in] hitDate The date that the mouse cursor is located over. May be zero.
			/// \param[in] button The pressed mouse button. Any of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position
			///            lies in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseUp, Click, MClick, RClick, XClick, HitTestConstants, ExtendedMouseButtonConstants,
			///     ICalendar::DisabledEvents
			[id(DISPID_CALE_MOUSEDOWN), helpstring("Will be fired if the user presses a mouse button while the mouse cursor is located over the control's client area. This event may be disabled.")]
			void MouseDown(DATE hitDate, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The mouse cursor was moved into the control's client area</em>
			///
			/// Will be fired if the user moved the mouse cursor into the control's client area.
			///
			/// \param[in] hitDate The date that the mouse cursor is located over. May be zero.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position
			///            lies in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseLeave, DateMouseEnter, MouseHover, MouseMove, HitTestConstants,
			///     ExtendedMouseButtonConstants, ICalendar::DisabledEvents
			[id(DISPID_CALE_MOUSEENTER), helpstring("Will be fired if the user moved the mouse cursor into the control's client area. This event may be disabled.")]
			void MouseEnter(DATE hitDate, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The mouse cursor was moved into the control's client area a specified period of time before</em>
			///
			/// Will be fired if the mouse cursor has been located over the control's client area for the
			/// number of milliseconds specified by the \c ICalendar::HoverTime property.
			///
			/// \param[in] hitDateThe date that the mouse cursor is located over. May be zero.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position
			///            lies in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseEnter, MouseLeave, MouseMove, ICalendar::HoverTime, HitTestConstants,
			///     ExtendedMouseButtonConstants, ICalendar::DisabledEvents
			[id(DISPID_CALE_MOUSEHOVER), helpstring("Will be fired if the mouse cursor has been located over the control's client area for the number of milliseconds specified by the 'HoverTime' property. This event may be disabled.")]
			void MouseHover(DATE hitDate, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The mouse cursor was moved out of the control's client area</em>
			///
			/// Will be fired if the user moves the mouse cursor out of the control's client area.
			///
			/// \param[in] hitDate The date that the mouse cursor is located over. May be zero.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position
			///            lies in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseEnter, DateMouseLeave, MouseHover, MouseMove, HitTestConstants,
			///     ExtendedMouseButtonConstants, ICalendar::DisabledEvents
			[id(DISPID_CALE_MOUSELEAVE), helpstring("Will be fired if the user moves the mouse cursor out of the control's client area. This event may be disabled.")]
			void MouseLeave(DATE hitDate, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The mouse cursor was moved over the control's client area</em>
			///
			/// Will be fired if the user moves the mouse cursor over the control's client area.
			///
			/// \param[in] hitDate The date that the mouse cursor is located over. May be zero.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position
			///            lies in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseEnter, MouseLeave, MouseDown, MouseUp, MouseWheel, HitTestConstants,
			///     ExtendedMouseButtonConstants, ICalendar::DisabledEvents
			[id(DISPID_CALE_MOUSEMOVE), helpstring("Will be fired if the user moves the mouse cursor over the control's client area. This event may be disabled.")]
			void MouseMove(DATE hitDate, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>A mouse button was released over the control's client area</em>
			///
			/// Will be fired if the user releases a mouse button while the mouse cursor is located over the
			/// control's client area.
			///
			/// \param[in] hitDate The date that the mouse cursor is located over. May be zero.
			/// \param[in] button The released mouse button. Any of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position
			///            lies in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseDown, Click, MClick, RClick, XClick, HitTestConstants, ExtendedMouseButtonConstants,
			///     ICalendar::DisabledEvents
			[id(DISPID_CALE_MOUSEUP), helpstring("Will be fired if the user releases a mouse button while the mouse cursor is located over the control's client area. This event may be disabled.")]
			void MouseUp(DATE hitDate, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The mouse wheel was rotated over the control's client area</em>
			///
			/// Will be fired if the user rotates the mouse wheel over the control's client area.
			///
			/// \param[in] hitDate The date that the mouse cursor is located over. May be zero.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] scrollAxis Specifies whether the user intents to scroll vertically or horizontally.
			///            Any of the values defined by the \c ScrollAxisConstants enumeration is valid.
			/// \param[in] wheelDelta The distance the wheel has been rotated.
			/// \param[in] hitTestDetails The exact part of the control that the mouse cursor's position lies
			///            in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseMove, HitTestConstants, ExtendedMouseButtonConstants, ScrollAxisConstants,
			///     ICalendar::DisabledEvents
			[id(DISPID_CALE_MOUSEWHEEL), helpstring("Will be fired if the user rotates the mouse wheel over the control's client area. This event may be disabled.")]
			void MouseWheel(DATE hitDate, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, ScrollAxisConstants scrollAxis, SHORT wheelDelta, HitTestConstants hitTestDetails);
			/// \brief <em>The data was dropped onto the control during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user completes the operation while the mouse cursor
			/// is located over the control's client area.
			///
			/// \param[in] data The dropped data.
			/// \param[in,out] effect On entry, a bit field of the drop effects (defined by the
			///                \c OLEDropEffectConstants enumeration) supported by the drag source. On
			///                return, this paramter must be set to the drop effect that the target finally
			///                executed.
			/// \param[in] dropTarget The date that is below the mouse cursor's position.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks Don't forget to release any references that you hold to the data object.
			///
			/// \sa OLEDragEnter, OLEDragMouseMove, OLEDragLeave, MouseUp,
			///     ICalendar::RegisterForOLEDragDrop, ICalendar::FinishOLEDragDrop, OLEDropEffectConstants,
			///     HitTestConstants
			[id(DISPID_CALE_OLEDRAGDROP), helpstring("Will be fired during OLE drag'n'drop if the user completes the operation while the mouse cursor is located over the control's client area.")]
			void OLEDragDrop(IOLEDataObject* data, OLEDropEffectConstants* effect, DATE dropTarget, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The data was dragged into the control during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user moved the mouse cursor into the control's
			/// client area.
			///
			/// \param[in] data The dragged data.
			/// \param[in,out] effect On entry, a bit field of the drop effects (defined by the
			///                \c OLEDropEffectConstants enumeration) supported by the drag source. On
			///                return, this paramter must be set to the drop effect that the target wants
			///                to be used on drop.
			/// \param[in] dropTarget The date that is below the mouse cursor's position.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			/// \param[in,out] autoHScrollVelocity The speed multiplier for horizontal auto-scrolling. If set to
			///                0, horizontal auto-scrolling is disabled; if set to a value less than 0, the
			///                control auto-scrolls to the left; if set to a value greater than 0, the control
			///                auto-scrolls to the right. The higher/lower the value is, the faster the control
			///                scrolls.
			///
			/// \sa OLEDragMouseMove, OLEDragLeave, OLEDragDrop, MouseEnter, ICalendar::RegisterForOLEDragDrop,
			///     OLEDropEffectConstants, ICalendar::DragScrollTimeBase, HitTestConstants
			[id(DISPID_CALE_OLEDRAGENTER), helpstring("Will be fired during OLE drag'n'drop if the user moved the mouse cursor into the control's client area.")]
			void OLEDragEnter(IOLEDataObject* data, OLEDropEffectConstants* effect, DATE dropTarget, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails, LONG* autoHScrollVelocity);
			/// \brief <em>The data was dragged out of the control during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user moves the mouse cursor out of the control's
			/// client area or if the user canceled the drag'n'drop operation.
			///
			/// \param[in] data The dragged data.
			/// \param[in] dropTarget The date that is below the mouse cursor's position.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks Don't forget to release any references that you hold to the data object.
			///
			/// \sa OLEDragEnter, OLEDragMouseMove, OLEDragDrop, MouseLeave, ICalendar::RegisterForOLEDragDrop,
			///     HitTestConstants
			[id(DISPID_CALE_OLEDRAGLEAVE), helpstring("Will be fired during OLE drag'n'drop if the user moves the mouse cursor over the control's client area or if the user canceled the drag'n'drop operation.")]
			void OLEDragLeave(IOLEDataObject* data, DATE dropTarget, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The data was dragged over the control during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user moves the mouse cursor over the control's
			/// client area.
			///
			/// \param[in] data The dragged data.
			/// \param[in,out] effect On entry, a bit field of the drop effects (defined by the
			///                \c OLEDropEffectConstants enumeration) supported by the drag source. On
			///                return, this paramter must be set to the drop effect that the target wants
			///                to be used on drop.
			/// \param[in] dropTarget The date that is below the mouse cursor's position.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			/// \param[in,out] autoHScrollVelocity The speed multiplier for horizontal auto-scrolling. If set to
			///                0, horizontal auto-scrolling is disabled; if set to a value less than 0, the
			///                control auto-scrolls to the left; if set to a value greater than 0, the control
			///                auto-scrolls to the right. The higher/lower the value is, the faster the control
			///                scrolls.
			///
			/// \sa OLEDragEnter, OLEDragLeave, OLEDragDrop, MouseMove, ICalendar::RegisterForOLEDragDrop,
			///     OLEDropEffectConstants, ICalendar::DragScrollTimeBase, HitTestConstants
			[id(DISPID_CALE_OLEDRAGMOUSEMOVE), helpstring("Will be fired during OLE drag'n'drop if the user moves the mouse cursor over the control's client area.")]
			void OLEDragMouseMove(IOLEDataObject* data, OLEDropEffectConstants* effect, DATE dropTarget, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails, LONG* autoHScrollVelocity);
			/// \brief <em>The user clicked into the control's client area</em>
			///
			/// Will be fired if the user clicks into the control's client area using the right mouse button.
			///
			/// \param[in] hitDate The date that was clicked. May be zero.
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be \c vbRightButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was clicked. Any of the
			///            values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa ContextMenu, RDblClick, Click, MClick, XClick, HitTestConstants, ICalendar::DisabledEvents
			[id(DISPID_CALE_RCLICK), helpstring("Will be fired if the user clicks into the control's client area using the right mouse button. This event may be disabled.")]
			void RClick(DATE hitDate, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The user double-clicked into the control's client area</em>
			///
			/// Will be fired if the user double-clicks into the control's client area using the right mouse
			/// button.
			///
			/// \param[in] hitDate The date that was double-clicked. May be zero.
			/// \param[in] button The mouse buttons that were pressed during the double-click. This should
			///            always be \c vbRightButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the
			///            double-click. Any combination of the values defined by VB's \c ShiftConstants
			///            enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the double-click's position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the double-click's position relative to the
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was double-clicked. Any
			///            of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa RClick, DblClick, MDblClick, XDblClick, HitTestConstants, ICalendar::DetectDoubleClicks,
			///     ICalendar::DisabledEvents
			[id(DISPID_CALE_RDBLCLICK), helpstring("Will be fired if the user double-clicks into the control's client area using the right mouse button. This event may be disabled.")]
			void RDblClick(DATE hitDate, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The control window was recreated</em>
			///
			/// Will be fired after the control window was destroyed and recreated.\n
			/// Some properties can't be changed after the control window was created. If such a property is
			/// changed and the control window already exists, it is destroyed and recreated.
			///
			/// \param[in] hWnd The control's window handle.
			///
			/// \sa DestroyedControlWindow, ICalendar::hWnd
			[id(DISPID_CALE_RECREATEDCONTROLWINDOW), helpstring("Will be fired after the control window was destroyed and recreated.")]
			void RecreatedControlWindow(LONG hWnd);
			/// \brief <em>The control window was resized</em>
			///
			/// Will be fired after the control window was resized.
			[id(DISPID_CALE_RESIZEDCONTROLWINDOW), helpstring("Will be fired after the control window was resized.")]
			void ResizedControlWindow(void);
			/// \brief <em>The view mode was changed</em>
			///
			/// Will be fired after the control's view mode was changed.
			///
			/// \param[in] oldView The previous view mode.
			/// \param[in] newView The new view mode.
			///
			/// \remarks Requires comctl32.dll version 6.10 or higher.
			///
			/// \sa ICalendar::View, ViewConstants
			[id(DISPID_CALE_VIEWCHANGED), helpstring("Will be fired after the control's view mode was changed. Requires comctl32.dll version 6.10 or higher.")]
			void ViewChanged(ViewConstants oldView, ViewConstants newView);
			/// \brief <em>The user clicked into the control's client area</em>
			///
			/// Will be fired if the user clicks into the control's client area using one of the extended mouse
			/// buttons.
			///
			/// \param[in] hitDate The date that was clicked. May be zero.
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be a constant defined by the \c ExtendedMouseButtonConstants enumeration.
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was clicked. Any of the
			///            values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa XDblClick, Click, MClick, RClick, HitTestConstants, ExtendedMouseButtonConstants,
			///     ICalendar::DisabledEvents
			[id(DISPID_CALE_XCLICK), helpstring("Will be fired if the user clicks into the control's client area using one of the extended mouse buttons. This event may be disabled.")]
			void XClick(DATE hitDate, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The user double-clicked into the control's client area</em>
			///
			/// Will be fired if the user double-clicks into the control's client area using one of the extended
			/// mouse buttons.
			///
			/// \param[in] hitDate The date that was double-clicked. May be zero.
			/// \param[in] button The mouse buttons that were pressed during the double-click. This should
			///            be a constant defined by the \c ExtendedMouseButtonConstants enumeration.
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the
			///            double-click. Any combination of the values defined by VB's \c ShiftConstants
			///            enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the double-click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the double-click's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was double-clicked. Any
			///            of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa XClick, DblClick, MDblClick, RDblClick, HitTestConstants, ExtendedMouseButtonConstants,
			///     ICalendar::DetectDoubleClicks, ICalendar::DisabledEvents
			[id(DISPID_CALE_XDBLCLICK), helpstring("Will be fired if the user double-clicks into the control's client area using one of the extended mouse buttons. This event may be disabled.")]
			void XDblClick(DATE hitDate, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
	};


	/// \author Timo "TimoSoft" Kunze
	/// \brief <em>The \c Calendar class</em>
	///
	/// The control's main COM class. It implements the \c ICalendar and
	/// \c _ICalendarEvents interfaces.
	///
	/// \sa ICalendar, _ICalendarEvents
	[
		uuid(B741D94E-C010-4d75-8C58-329D5A6AA470),
		version(1.5),
		helpstring("Calendar Control 1.5 (ANSI)")
	]
	coclass Calendar
	{
		[default] interface ICalendar;
		[default, source] dispinterface _ICalendarEvents;
	};


	/// \interface IDateTimePicker
	/// \author Timo "TimoSoft" Kunze
	/// \brief <em>The main interface</em>
	///
	/// This is the date time picker control's main interface. It wraps the control window.
	///
	/// \sa _IDateTimePickerEvents
	[
		object,
		uuid(211C5E33-3FBC-4a84-9A04-057AE9FACC9E),
		dual,
		nonextensible,
		helpstring("IDateTimePicker interface"),
		pointer_default(unique)
	]
	interface IDateTimePicker : IDispatch
	{
		/// \brief <em>Specifies whether a checkbox is displayed allowing to have no date currently selected</em>
		///
		/// Retrieves or sets whether a checkbox is displayed allowing to have no date currently selected. If
		/// set to \c True, the checkbox is displayed; otherwise not.
		///
		/// \attention Changing this property will destroy and recreate the control window.
		///
		/// \sa DateSelected, CurrentDate, GetCheckboxRectangle
		[propget, id(DISPID_DTP_ALLOWNULLSELECTION), helpstring("Retrieves or sets whether a checkbox is displayed allowing to have no date currently selected. Changing this property will destroy and recreate the control window.")]
		HRESULT AllowNullSelection([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_DTP_ALLOWNULLSELECTION), helpstring("Retrieves or sets whether a checkbox is displayed allowing to have no date currently selected. Changing this property will destroy and recreate the control window.")]
		HRESULT AllowNullSelection([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls the style of the control's outer border</em>
		///
		/// Retrieves or sets the kind of border that is drawn around the control. Any of the values defined
		/// by the \c AppearanceConstants enumeration is valid.
		///
		/// \sa BorderStyle, AppearanceConstants
		[propget, id(DISPID_DTP_APPEARANCE), helpstring("Retrieves or sets the kind of border that is drawn around the control.")]
		HRESULT Appearance([out, retval] AppearanceConstants* pValue);
		[propput, id(DISPID_DTP_APPEARANCE), helpstring("Retrieves or sets the kind of border that is drawn around the control.")]
		HRESULT Appearance([in] AppearanceConstants newValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's application ID</em>
		///
		///   Retrieves the control's application ID. This property is part of the fingerprint that
		///   uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppName, AppShortName, Build, CharSet, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_DTP_APPID), hidden]
		HRESULT AppID([out, retval] SHORT* pValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's application name</em>
		///
		///   Retrieves the control's application name. This property is part of the fingerprint that
		///   uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppShortName, Build, CharSet, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_DTP_APPNAME), hidden]
		HRESULT AppName([out, retval] BSTR* pValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's short application name</em>
		///
		///   Retrieves the control's short application name. This property is part of the fingerprint
		///   that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, Build, CharSet, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_DTP_APPSHORTNAME), hidden]
		HRESULT AppShortName([out, retval] BSTR* pValue);
		/// \brief <em>Controls the style of the control's inner border</em>
		///
		/// Retrieves or sets the kind of inner border that is drawn around the control. Any of the values
		/// defined by the \c BorderStyleConstants enumeration is valid.
		///
		/// \sa Appearance, BorderStyleConstants
		[propget, id(DISPID_DTP_BORDERSTYLE), helpstring("Retrieves or sets the kind of inner border that is drawn around the control.")]
		HRESULT BorderStyle([out, retval] BorderStyleConstants* pValue);
		[propput, id(DISPID_DTP_BORDERSTYLE), helpstring("Retrieves or sets the kind of inner border that is drawn around the control.")]
		HRESULT BorderStyle([in] BorderStyleConstants newValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's build number</em>
		///
		///   Retrieves the control's build number. This property is part of the fingerprint
		///   that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa Version, AppID, AppName, AppShortName, CharSet, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_DTP_BUILD), hidden]
		HRESULT Build([out, retval] LONG* pValue);
		/// \brief <em>Specifies the drop-down calendar control's background color</em>
		///
		/// Retrieves or sets the drop-down calendar control's background color.
		///
		/// \sa CalendarForeColor, CalendarTitleBackColor, CalendarTitleForeColor, CalendarMonthBackColor,
		///     CalendarTrailingForeColor
		[propget, id(DISPID_DTP_CALENDARBACKCOLOR), helpstring("Retrieves or sets the drop-down calendar control's background color.")]
		HRESULT CalendarBackColor([out, retval] OLE_COLOR* pValue);
		[propput, id(DISPID_DTP_CALENDARBACKCOLOR), helpstring("Retrieves or sets the drop-down calendar control's background color.")]
		HRESULT CalendarBackColor([in] OLE_COLOR newValue);
		/// \brief <em>Retrieves the text of the drop-down calendar's caret date</em>
		///
		/// Retrieves the text representing the drop-down calendar's caret date. The string contains the
		/// Unicode character 8206 before each part of the text, e. g. &ldquo;?January, ?2009&rdquo; (? stands
		/// for character 8206). This marker can be used to extract specific parts from the text.
		///
		/// \remarks This property fails if the \c hWndCalendar property is set to 0.\n
		///          Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa CalendarGridCellText, CalendarHeaderText, hWndCalendar
		[propget, id(DISPID_DTP_CALENDARCARETDATETEXT), helpstring("Retrieves the text representing the drop-down calendar's caret date. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT CalendarCaretDateText([out, retval] BSTR* pValue);
		/// \brief <em>Controls the speed of automatic scrolling during drag'n'drop</em>
		///
		/// Retrieves or sets the period of time (in milliseconds) that is used as the time-base to calculate
		/// the velocity of auto-scrolling of the drop-down calendar control during a drag'n'drop operation.
		/// If set to 0, auto-scrolling is disabled. If set to -1, the system's double-click time is used.
		///
		/// \sa RegisterForOLEDragDrop, DragDropDownTime, _IDateTimePickerEvents::OLEDragMouseMove
		[propget, id(DISPID_DTP_CALENDARDRAGSCROLLTIMEBASE), helpstring("Retrieves or sets the period of time (in milliseconds) that is used as the time-base to calculate the velocity of auto-scrolling of the drop-down calendar control during a drag'n'drop operation.")]
		HRESULT CalendarDragScrollTimeBase([out, retval] LONG* pValue);
		[propput, id(DISPID_DTP_CALENDARDRAGSCROLLTIMEBASE), helpstring("Retrieves or sets the period of time (in milliseconds) that is used as the time-base to calculate the velocity of auto-scrolling of the drop-down calendar control during a drag'n'drop operation.")]
		HRESULT CalendarDragScrollTimeBase([in] LONG newValue);
		/// \brief <em>Retrieves the drop-down calendar's first date</em>
		///
		/// Retrieves the drop-down calendar's first date that belongs to the month it is displaying.
		///
		/// \param[in] rowIndex The zero-based row index for which to retrieve the date. If set to -1, the
		///            first date of the whole calendar is retrieved.
		///
		/// \remarks This property fails if the \c hWndCalendar property is set to 0.\n
		///          Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa CalendarLastDate, MinDate, hWndCalendar
		[propget, id(DISPID_DTP_CALENDARFIRSTDATE), helpstring("Retrieves the drop-down calendar's first date that belongs to the month it is displaying. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT CalendarFirstDate([in, defaultvalue(-1)] LONG rowIndex, [out, retval] DATE* pValue);
		/// \brief <em>Specifies the drop-down calendar control's font</em>
		///
		/// Retrieves or sets the drop-down calendar control's font. It's used to draw the drop-down calendar
		/// control's content.
		///
		/// \remarks Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar
		///          controls.
		///
		/// \sa CalendarUseSystemFont, Font
		[propget, id(DISPID_DTP_CALENDARFONT), helpstring("Retrieves or sets the drop-down calendar control's font. Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar controls.")]
		HRESULT CalendarFont([out, retval] IFontDisp** ppFont);
		[propput, id(DISPID_DTP_CALENDARFONT), helpstring("Retrieves or sets the drop-down calendar control's font. Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar controls.")]
		HRESULT CalendarFont([in] IFontDisp* pNewFont);
		[propputref, id(DISPID_DTP_CALENDARFONT), helpstring("Retrieves or sets the drop-down calendar control's font. Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar controls.")]
		HRESULT CalendarFont([in] IFontDisp* pNewFont);
		/// \brief <em>Specifies the drop-down calendar control's text color</em>
		///
		/// Retrieves or sets the drop-down calendar control's text color.
		///
		/// \remarks Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar
		///          controls.
		///
		/// \sa CalendarBackColor, CalendarTitleBackColor, CalendarTitleForeColor, CalendarMonthBackColor,
		///     CalendarTrailingForeColor
		[propget, id(DISPID_DTP_CALENDARFORECOLOR), helpstring("Retrieves or sets the drop-down calendar control's text color. Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar controls.")]
		HRESULT CalendarForeColor([out, retval] OLE_COLOR* pValue);
		[propput, id(DISPID_DTP_CALENDARFORECOLOR), helpstring("Retrieves or sets the drop-down calendar control's text color. Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar controls.")]
		HRESULT CalendarForeColor([in] OLE_COLOR newValue);
		/// \brief <em>Determines whether the specified drop-down calendar grid cell is selected</em>
		///
		/// Retrieves whether the specified drop-down calendar grid cell is selected. If set to \c True, the
		/// cell is selected; otherwise not.
		///
		/// \param[in] columnIndex The column index of the grid cell for which to retrieve the selection state.
		///            The index starts at -1, which identifies the week numbers column.
		/// \param[in] rowIndex The row index of the grid cell for which to retrieve the selection state. The
		///            index starts at -1, which identifies the week days row.
		///
		/// \remarks This property fails if the \c hWndCalendar property is set to 0.\n
		///          Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa CalendarGridCellText, hWndCalendar
		[propget, id(DISPID_DTP_CALENDARGRIDCELLSELECTED), helpstring("Retrieves whether the specified drop-down calendar grid cell is selected. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT CalendarGridCellSelected([in] LONG columnIndex, [in] LONG rowIndex, [out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves the text of the specified drop-down calendar grid cell</em>
		///
		/// Retrieves the text being displayed in the specified drop-down calendar grid cell. The string
		/// contains the Unicode character 8206 before each part of the text, e. g. &ldquo;?January,
		/// ?2009&rdquo; (? stands for character 8206). This marker can be used to extract specific parts from
		/// the text.
		///
		/// \param[in] columnIndex The column index of the grid cell for which to retrieve the text. The index
		///            starts at -1, which identifies the week numbers column.
		/// \param[in] rowIndex The row index of the grid cell for which to retrieve the text. The index starts
		///            at -1, which identifies the week days row.
		///
		/// \remarks This property fails if the \c hWndCalendar property is set to 0.\n
		///          Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa CalendarHeaderText, CalendarCaretDateText, CalendarGridCellSelected, hWndCalendar
		[propget, id(DISPID_DTP_CALENDARGRIDCELLTEXT), helpstring("Retrieves the text being displayed in the specified drop-down calendar grid cell. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT CalendarGridCellText([in] LONG columnIndex, [in] LONG rowIndex, [out, retval] BSTR* pValue);
		/// \brief <em>Retrieves the text being displayed in the drop-down calendar header, for instance &ldquo;January, 2009&rdquo;</em>
		///
		/// Retrieves the text being displayed in the drop-down calendar header, for instance
		/// &ldquo;January, 2009&rdquo;. The string contains the Unicode character 8206 before each part of the
		/// text, e. g. &ldquo;?January, ?2009&rdquo; (? stands for character 8206). This marker can be used to
		/// extract specific parts from the text.
		///
		/// \remarks This property fails if the \c hWndCalendar property is set to 0.\n
		///          Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa CalendarGridCellText, CalendarCaretDateText, hWndCalendar
		[propget, id(DISPID_DTP_CALENDARHEADERTEXT), helpstring("Retrieves the text being displayed in the drop-down calendar header, for instance 'January, 2009'. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT CalendarHeaderText([out, retval] BSTR* pValue);
		/// \brief <em>Specifies whether the &ldquo;Today&rdquo; date is highlighted in the drop-down calendar control</em>
		///
		/// Retrieves or sets whether the &ldquo;Today&rdquo; date is highlighted in the drop-down calendar
		/// control, e. g. by drawing a circle around it. If set to \c True, it is highlighted; otherwise not.
		///
		/// \sa CalendarShowTodayDate
		[propget, id(DISPID_DTP_CALENDARHIGHLIGHTTODAYDATE), helpstring("Retrieves or sets whether the 'Today' date is highlighted in the drop-down calendar control, e. g. by drawing a circle around it.")]
		HRESULT CalendarHighlightTodayDate([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_DTP_CALENDARHIGHLIGHTTODAYDATE), helpstring("Retrieves or sets whether the 'Today' date is highlighted in the drop-down calendar control, e. g. by drawing a circle around it.")]
		HRESULT CalendarHighlightTodayDate([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls when the \c CalendarMouseHover event is fired</em>
		///
		/// Retrieves or sets the number of milliseconds the mouse cursor must be located over the drop-down
		/// calendar control's client area before the \c CalendarMouseHover event is fired. If set to -1,
		/// the system hover time is used.
		///
		/// \sa HoverTime, _IDateTimePickerEvents::CalendarMouseHover
		[propget, id(DISPID_DTP_CALENDARHOVERTIME), helpstring("Retrieves or sets the number of milliseconds the mouse cursor must be located over the drop-down calendar control's client area before the 'CalendarMouseHover' event is fired.")]
		HRESULT CalendarHoverTime([out, retval] LONG* pValue);
		[propput, id(DISPID_DTP_CALENDARHOVERTIME), helpstring("Retrieves or sets the number of milliseconds the mouse cursor must be located over the drop-down calendar control's client area before the 'CalendarMouseHover' event is fired.")]
		HRESULT CalendarHoverTime([in] LONG newValue);
		/// \brief <em>Specifies whether the control keeps the selection while the user navigates to the next or previous view in the drop-down calendar control</em>
		///
		/// Retrieves or sets whether selected dates remain selected while the user scrolls to the next or
		/// previous view in the drop-down calendar control. If set to \c True, the selection is kept on
		/// navigation; otherwise not.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		[propget, id(DISPID_DTP_CALENDARKEEPSELECTIONONNAVIGATION), helpstring("Retrieves or sets whether selected dates remain selected while the user scrolls to the next or previous view in the drop-down calendar control. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT CalendarKeepSelectionOnNavigation([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_DTP_CALENDARKEEPSELECTIONONNAVIGATION), helpstring("Retrieves or sets whether selected dates remain selected while the user scrolls to the next or previous view in the drop-down calendar control. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT CalendarKeepSelectionOnNavigation([in] VARIANT_BOOL newValue);
		/// \brief <em>Retrieves the drop-down calendar's last date</em>
		///
		/// Retrieves the drop-down calendar's last date that belongs to the month it is displaying.
		///
		/// \param[in] rowIndex The zero-based row index for which to retrieve the date. If set to -1, the last
		///            date of the whole calendar is retrieved.
		///
		/// \remarks This property fails if the \c hWndCalendar property is set to 0.\n
		///          Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa CalendarFirstDate, MaxDate, hWndCalendar
		[propget, id(DISPID_DTP_CALENDARLASTDATE), helpstring("Retrieves the drop-down calendar's last date that belongs to the month it is displaying. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT CalendarLastDate([in, defaultvalue(-1)] LONG rowIndex, [out, retval] DATE* pValue);
		/// \brief <em>Specifies the month portion's background color for the drop-down calendar</em>
		///
		/// Retrieves or sets the background color of the month portion of the drop-down calendar control.
		///
		/// \remarks Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar
		///          controls.
		///
		/// \sa CalendarBackColor, CalendarForeColor, CalendarTitleBackColor, CalendarTitleForeColor,
		///     CalendarTrailingForeColor
		[propget, id(DISPID_DTP_CALENDARMONTHBACKCOLOR), helpstring("Retrieves or sets the background color of the month portion of the drop-down calendar control. Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar controls.")]
		HRESULT CalendarMonthBackColor([out, retval] OLE_COLOR* pValue);
		[propput, id(DISPID_DTP_CALENDARMONTHBACKCOLOR), helpstring("Retrieves or sets the background color of the month portion of the drop-down calendar control. Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar controls.")]
		HRESULT CalendarMonthBackColor([in] OLE_COLOR newValue);
		/// \brief <em>Specifies whether the &ldquo;Today&rdquo; date is displayed at the bottom of the drop-down calendar control</em>
		///
		/// Retrieves or sets whether the &ldquo;Today&rdquo; date is displayed at the bottom of the drop-down
		/// calendar control. If set to \c True, it is displayed; otherwise not.
		///
		/// \sa CalendarHighlightTodayDate
		[propget, id(DISPID_DTP_CALENDARSHOWTODAYDATE), helpstring("Retrieves or sets whether the 'Today' date is displayed at the bottom of the drop-down calendar control.")]
		HRESULT CalendarShowTodayDate([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_DTP_CALENDARSHOWTODAYDATE), helpstring("Retrieves or sets whether the 'Today' date is displayed at the bottom of the drop-down calendar control.")]
		HRESULT CalendarShowTodayDate([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether dates from the previous or next month are displayed in the drop-down calendar control</em>
		///
		/// Retrieves or sets whether dates from the previous or next month are displayed in the drop-down
		/// calendar control to fill up weeks that start or end in the previous or next month. If set to
		/// \c True, such trailing dates are displayed; otherwise not.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa StartOfWeek
		[propget, id(DISPID_DTP_CALENDARSHOWTRAILINGDATES), helpstring("Retrieves or sets whether dates from the previous or next month are displayed in the drop-down calendar control. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT CalendarShowTrailingDates([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_DTP_CALENDARSHOWTRAILINGDATES), helpstring("Retrieves or sets whether dates from the previous or next month are displayed in the drop-down calendar control. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT CalendarShowTrailingDates([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether week numbers are displayed to the left of each row of days in the drop-down calendar control</em>
		///
		/// Retrieves or sets whether week numbers are displayed to the left of each row of days in the
		/// drop-down calendar control. Week 1 is defined as the first week that contains at least four
		/// days. If set to \c True, week numbers are displayed; otherwise not.
		///
		/// \sa StartOfWeek
		[propget, id(DISPID_DTP_CALENDARSHOWWEEKNUMBERS), helpstring("Retrieves or sets whether week numbers are displayed to the left of each row of days in the drop-down calendar control.")]
		HRESULT CalendarShowWeekNumbers([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_DTP_CALENDARSHOWWEEKNUMBERS), helpstring("Retrieves or sets whether week numbers are displayed to the left of each row of days in the drop-down calendar control.")]
		HRESULT CalendarShowWeekNumbers([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies the title portion's background color for the drop-down calendar</em>
		///
		/// Retrieves or sets the background color of the title portion of the drop-down calendar
		/// control.
		///
		/// \remarks Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar
		///          controls.
		///
		/// \sa CalendarBackColor, CalendarForeColor, CalendarTitleForeColor, CalendarMonthBackColor,
		///     CalendarTrailingForeColor
		[propget, id(DISPID_DTP_CALENDARTITLEBACKCOLOR), helpstring("Retrieves or sets the background color of the title portion of the drop-down calendar control. Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar controls.")]
		HRESULT CalendarTitleBackColor([out, retval] OLE_COLOR* pValue);
		[propput, id(DISPID_DTP_CALENDARTITLEBACKCOLOR), helpstring("Retrieves or sets the background color of the title portion of the drop-down calendar control. Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar controls.")]
		HRESULT CalendarTitleBackColor([in] OLE_COLOR newValue);
		/// \brief <em>Specifies the title portion's text color for the drop-down calendar</em>
		///
		/// Retrieves or sets the text color of the title portion of the drop-down calendar control.
		///
		/// \remarks Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar
		///          controls.
		///
		/// \sa CalendarBackColor, CalendarForeColor, CalendarTitleBackColor, CalendarMonthBackColor,
		///     CalendarTrailingForeColor
		[propget, id(DISPID_DTP_CALENDARTITLEFORECOLOR), helpstring("Retrieves or sets the text color of the title portion of the drop-down calendar control. Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar controls.")]
		HRESULT CalendarTitleForeColor([out, retval] OLE_COLOR* pValue);
		[propput, id(DISPID_DTP_CALENDARTITLEFORECOLOR), helpstring("Retrieves or sets the text color of the title portion of the drop-down calendar control. Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar controls.")]
		HRESULT CalendarTitleForeColor([in] OLE_COLOR newValue);
		/// \brief <em>Specifies the date that is displayed as the &ldquo;Today&rdquo; date</em>
		///
		/// Retrieves or sets the date that is displayed as the &ldquo;Today&rdquo; date in the drop-down
		/// calendar control. If this property is set to zero, the system default is used.
		///
		/// \sa CalendarShowTodayDate, CalendarHighlightTodayDate, CurrentDate, CalendarGetMaxTodayWidth
		[propget, id(DISPID_DTP_CALENDARTODAYDATE), helpstring("Retrieves or sets the date that is displayed as the 'Today' date in the drop-down calendar control."), nonbrowsable]
		HRESULT CalendarTodayDate([out, retval] DATE* pValue);
		[propput, id(DISPID_DTP_CALENDARTODAYDATE), helpstring("Retrieves or sets the date that is displayed as the 'Today' date in the drop-down calendar control."), nonbrowsable]
		HRESULT CalendarTodayDate([in] DATE newValue);
		/// \brief <em>Specifies the text color of trailing dates in the drop-down calendar</em>
		///
		/// Retrieves or sets the text color of trailing dates in the drop-down calendar control.
		///
		/// \remarks Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar
		///          controls.
		///
		/// \sa CalendarBackColor, CalendarForeColor, CalendarTitleBackColor, CalendarTitleForeColor,
		///     CalendarMonthBackColor
		[propget, id(DISPID_DTP_CALENDARTRAILINGFORECOLOR), helpstring("Retrieves or sets the text color of trailing dates in the drop-down calendar control. Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar controls.")]
		HRESULT CalendarTrailingForeColor([out, retval] OLE_COLOR* pValue);
		[propput, id(DISPID_DTP_CALENDARTRAILINGFORECOLOR), helpstring("Retrieves or sets the text color of trailing dates in the drop-down calendar control. Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar controls.")]
		HRESULT CalendarTrailingForeColor([in] OLE_COLOR newValue);
		/// \brief <em>Specifies whether the control uses the shortest instead of the short day names in the drop-down calendar control</em>
		///
		/// Retrieves or sets whether the control uses the shortest instead of the short day names for the day
		/// of week column header in the drop-down calendar control. If set to \c True, the shortest,
		/// otherwise the short names are used.
		///
		/// \remarks Not all locales seem to define shortest day names. Therefore it may happen that there is
		///          no difference between short day names and shortest day names.\n
		///          Requires comctl32.dll version 6.10 or higher.
		[propget, id(DISPID_DTP_CALENDARUSESHORTESTDAYNAMES), helpstring("Retrieves or sets whether the control uses the shortest instead of the short day names for the day of week column header in the drop-down calendar control. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT CalendarUseShortestDayNames([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_DTP_CALENDARUSESHORTESTDAYNAMES), helpstring("Retrieves or sets whether the control uses the shortest instead of the short day names for the day of week column header in the drop-down calendar control. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT CalendarUseShortestDayNames([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether the drop-down calendar control uses the system font</em>
		///
		/// Retrieves or sets whether the drop-down calendar control uses the system's default dialog
		/// font or the font specified by the \c CalendarFont property. If set to \c True, the system font;
		/// otherwise the specified font is used.
		///
		/// \remarks Starting with comctl32.dll version 6.10, this property isn't supported for themed calendar
		///          controls.
		///
		/// \sa CalendarFont, UseSystemFont
		[propget, id(DISPID_DTP_CALENDARUSESYSTEMFONT), helpstring("Retrieves or sets whether the drop-down calendar control uses the system's default dialog font or the font specified by the 'CalendarFont' property. Unsupported for themed calendar controls (comctl32.dll version 6.10 and newer).")]
		HRESULT CalendarUseSystemFont([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_DTP_CALENDARUSESYSTEMFONT), helpstring("Retrieves or sets whether the drop-down calendar control uses the system's default dialog font or the font specified by the 'CalendarFont' property. Unsupported for themed calendar controls (comctl32.dll version 6.10 and newer).")]
		HRESULT CalendarUseSystemFont([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies the drop-down calendar control's view mode</em>
		///
		/// Retrieves or sets the drop-down calendar control's view mode. Any of the values defined by the
		/// \c ViewConstants enumeration is valid.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa _IDateTimePickerEvents::CalendarViewChanged, ViewConstants
		[propget, id(DISPID_DTP_CALENDARVIEW), helpstring("Retrieves or sets the drop-down calendar control's view mode. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT CalendarView([out, retval] ViewConstants* pValue);
		[propput, id(DISPID_DTP_CALENDARVIEW), helpstring("Retrieves or sets the drop-down calendar control's view mode. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT CalendarView([in] ViewConstants newValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's character set</em>
		///
		///   Retrieves the control's character set (Unicode or ANSI). This property is part of the
		///   fingerprint that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, AppShortName, Build, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_DTP_CHARSET), hidden]
		HRESULT CharSet([out, retval] BSTR* pValue);
		/// \brief <em>Retrieves the accessibility object state of the checkbox that is displayed if \c AllowNullSelection is set to \c True</em>
		///
		/// Retrieves the accessibility object state of the checkbox which is displayed if the
		/// \c AllowNullSelection property is set to \c True. For a list of possible object states see the
		/// <a href="https://msdn.microsoft.com/en-us/library/ms697270.aspx">MSDN article</a>.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa AllowNullSelection, DropDownButtonObjectState,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms697270.aspx">Accessibility Object State Constants</a>
		[propget, id(DISPID_DTP_CHECKBOXOBJECTSTATE), helpstring("Retrieves the accessibility object state of the checkbox which is displayed if the 'AllowNullSelection' property is set to 'True'. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT CheckboxObjectState([out, retval] LONG* pValue);
		/// \brief <em>Specifies the currently selected date</em>
		///
		/// Retrieves or sets the currently selected date.
		///
		/// \remarks This is the control's default property.
		///
		/// \sa MinDate, MaxDate, DateFormat, _IDateTimePickerEvents::CurrentDateChanged
		[propget, id(DISPID_DTP_CURRENTDATE), helpstring("Retrieves or sets the currently selected date."), bindable, displaybind, requestedit, nonbrowsable]
		HRESULT CurrentDate([out, retval] DATE* pValue);
		[propput, id(DISPID_DTP_CURRENTDATE), helpstring("Retrieves or sets the currently selected date."), bindable, displaybind, requestedit, nonbrowsable]
		HRESULT CurrentDate([in] DATE newValue);
		/// \brief <em>Controls formatting of the control's currently selected date</em>
		///
		/// Retrieves or sets the format that the currently selected date is displayed in if the \c DateFormat
		/// property is set to \c dfCustom. The string may be a usual date and time formatting string with
		/// the following placeholders:
		/// - \c d The one- or two-digit day.
		/// - \c dd The two-digit day. Single-digit day values are preceded by a zero.
		/// - \c ddd The three-character weekday abbreviation.
		/// - \c dddd The full weekday name.
		/// - \c h The one- or two-digit hour in 12-hour format.
		/// - \c hh The two-digit hour in 12-hour format. Single-digit values are preceded by a zero.
		/// - \c H The one- or two-digit hour in 24-hour format.
		/// - \c HH The two-digit hour in 24-hour format. Single-digit values are preceded by a zero.
		/// - \c m The one- or two-digit minute.
		/// - \c mm The two-digit minute. Single-digit values are preceded by a zero.
		/// - \c M The one- or two-digit month number.
		/// - \c MM The two-digit month number. Single-digit values are preceded by a zero.
		/// - \c MMM The three-character month abbreviation.
		/// - \c MMMM The full month name.
		/// - \c t The one-letter AM/PM abbreviation (that is, AM is displayed as "A").
		/// - \c tt The two-letter AM/PM abbreviation (that is, AM is displayed as "AM").
		/// - \c yy The last two digits of the year (that is, 1996 would be displayed as "96").
		/// - \c yyyy The full year (that is, 1996 would be displayed as "1996").
		/// - One or more \c X. This is a placeholder for a callback field. For each group of \c X the
		///   \c GetCallbackFieldTextSize and \c GetCallbackFieldText events will be raised. The number of \c X
		///   identifies the callback field the events refer to.
		///
		/// \remarks Any text other than the placeholders should be put into single quotes, e. g.
		///          &ldquo;'Today is: 'hh':'m':'s dddd MMM dd', 'yyyy&rdquo;.
		///
		/// \sa DateFormat, CurrentDate, DateFormatConstants, _IDateTimePickerEvents::CallbackFieldKeyDown,
		///     _IDateTimePickerEvents::GetCallbackFieldTextSize, _IDateTimePickerEvents::GetCallbackFieldText
		[propget, id(DISPID_DTP_CUSTOMDATEFORMAT), helpstring("Retrieves or sets the format that the currently selected date is displayed in if the 'DateFormat' property is set to 'dfCustom'.")]
		HRESULT CustomDateFormat([out, retval] BSTR* pValue);
		[propput, id(DISPID_DTP_CUSTOMDATEFORMAT), helpstring("Retrieves or sets the format that the currently selected date is displayed in if the 'DateFormat' property is set to 'dfCustom'.")]
		HRESULT CustomDateFormat([in] BSTR newValue);
		/// \brief <em>Controls formatting of the control's currently selected date</em>
		///
		/// Retrieves or sets the format that the currently selected date is displayed in. Any of the values
		/// defined by the \c DateFormatConstants enumeration is valid.
		///
		/// \sa CustomDateFormat, CurrentDate, Style, DateFormatConstants
		[propget, id(DISPID_DTP_DATEFORMAT), helpstring("Retrieves or sets the format that the currently selected date is displayed in.")]
		HRESULT DateFormat([out, retval] DateFormatConstants* pValue);
		[propput, id(DISPID_DTP_DATEFORMAT), helpstring("Retrieves or sets the format that the currently selected date is displayed in.")]
		HRESULT DateFormat([in] DateFormatConstants newValue);
		/// \brief <em>Specifies whether there's currently a date selected</em>
		///
		/// Retrieves or sets whether there's currently a date selected. If the \c AllowNullSelection property
		/// is set to \c True, the user may change the selected date to &ldquo;No selection&rdquo;. If this
		/// property is set to \c False, the selection is set to &ldquo;No selection&rdquo;; otherwise not.
		///
		/// \sa CurrentDate, AllowNullSelection, _IDateTimePickerEvents::CurrentDateChanged
		[propget, id(DISPID_DTP_DATESELECTED), helpstring("Retrieves or sets whether there's currently a date selected."), bindable, displaybind, requestedit]
		HRESULT DateSelected([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_DTP_DATESELECTED), helpstring("Retrieves or sets whether there's currently a date selected."), bindable, displaybind, requestedit]
		HRESULT DateSelected([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls which events are fired</em>
		///
		/// Retrieves or sets the events that won't be fired. Disabling events increases performance.
		/// Any combination of the values defined by the \c DisabledEventsConstants enumeration is valid.
		///
		/// \sa DisabledEventsConstants
		[propget, id(DISPID_DTP_DISABLEDEVENTS), helpstring("Retrieves or sets the events that won't be fired. Disabling events increases performance."), nonbrowsable]
		HRESULT DisabledEvents([out, retval] DisabledEventsConstants* pValue);
		[propput, id(DISPID_DTP_DISABLEDEVENTS), helpstring("Retrieves or sets the events that won't be fired. Disabling events increases performance."), nonbrowsable]
		HRESULT DisabledEvents([in] DisabledEventsConstants newValue);
		/// \brief <em>Controls redrawing of the control</em>
		///
		/// Enables or disables automatic redrawing of the control. Disabling redraw while doing large changes
		/// on the control may increase performance. If set to \c False, the control will redraw itself
		/// automatically; otherwise not.
		[propget, id(DISPID_DTP_DONTREDRAW), helpstring("Enables or disables automatic redrawing of the control.")]
		HRESULT DontRedraw([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_DTP_DONTREDRAW), helpstring("Enables or disables automatic redrawing of the control.")]
		HRESULT DontRedraw([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls the speed of automatic opening of the drop-down calendar control during drag'n'drop</em>
		///
		/// Retrieves or sets the number of milliseconds the mouse cursor must be placed over the drop-down
		/// button during a drag'n'drop operation before the drop-down calendar control will be opened
		/// automatically. If set to 0, automatic drop-down is disabled. If set to -1, the system's
		/// double-click time, multiplied with 4, is used.
		///
		/// \sa RegisterForOLEDragDrop, CalendarDragScrollTimeBase, _IDateTimePickerEvents::OLEDragMouseMove
		[propget, id(DISPID_DTP_DRAGDROPDOWNTIME), helpstring("Retrieves or sets the number of milliseconds the mouse cursor must be placed over the drop-down button during a drag'n'drop operation before the drop-down calendar control will be opened automatically.")]
		HRESULT DragDropDownTime([out, retval] LONG* pValue);
		[propput, id(DISPID_DTP_DRAGDROPDOWNTIME), helpstring("Retrieves or sets the number of milliseconds the mouse cursor must be placed over the drop-down button during a drag'n'drop operation before the drop-down calendar control will be opened automatically.")]
		HRESULT DragDropDownTime([in] LONG newValue);
		/// \brief <em>Controls the position of the drop-down calendar control</em>
		///
		/// Retrieves or sets the alignment of the drop-down calendar control. Any of the values defined by the
		/// \c DropDownAlignmentConstants enumeration is valid.
		///
		/// \sa DropDownAlignmentConstants
		[propget, id(DISPID_DTP_DROPDOWNALIGNMENT), helpstring("Retrieves or sets the alignment of the drop-down calendar control.")]
		HRESULT DropDownAlignment([out, retval] DropDownAlignmentConstants* pValue);
		[propput, id(DISPID_DTP_DROPDOWNALIGNMENT), helpstring("Retrieves or sets the alignment of the drop-down calendar control.")]
		HRESULT DropDownAlignment([in] DropDownAlignmentConstants newValue);
		/// \brief <em>Retrieves the accessibility object state of the drop-down button that is displayed if \c Style is set to \c sDropDown</em>
		///
		/// Retrieves the accessibility object state of the drop-down button which is displayed if the \c Style
		/// property is set to \c sDropDown. For a list of possible object states see the
		/// <a href="https://msdn.microsoft.com/en-us/library/ms697270.aspx">MSDN article</a>.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa Style, CheckboxObjectState,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms697270.aspx">Accessibility Object State Constants</a>
		[propget, id(DISPID_DTP_DROPDOWNBUTTONOBJECTSTATE), helpstring("Retrieves the accessibility object state of the drop-down button which is displayed if the 'Style' property is set to 'sDropDown'. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT DropDownButtonObjectState([out, retval] LONG* pValue);
		/// \brief <em>Controls whether the control accepts user input</em>
		///
		/// Enables or disables the control for user input. If set to \c True, it reacts to user input;
		/// otherwise not.
		[propget, id(DISPID_DTP_ENABLED), helpstring("Enables or disables the control for user input.")]
		HRESULT Enabled([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_DTP_ENABLED), helpstring("Enables or disables the control for user input.")]
		HRESULT Enabled([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies the control's font</em>
		///
		/// Retrieves or sets the control's font. It's used to draw the control's content.
		///
		/// \sa UseSystemFont, CalendarFont
		[propget, id(DISPID_DTP_FONT), helpstring("Retrieves or sets the control's font.")]
		HRESULT Font([out, retval] IFontDisp** ppFont);
		[propput, id(DISPID_DTP_FONT), helpstring("Retrieves or sets the control's font.")]
		HRESULT Font([in] IFontDisp* pNewFont);
		[propputref, id(DISPID_DTP_FONT), helpstring("Retrieves or sets the control's font.")]
		HRESULT Font([in] IFontDisp* pNewFont);
		/// \brief <em>Controls when the \c MouseHover event is fired</em>
		///
		/// Retrieves or sets the number of milliseconds the mouse cursor must be located over the
		/// control's client area before the \c MouseHover event is fired. If set to -1, the system hover
		/// time is used.
		///
		/// \sa CalendarHoverTime, _IDateTimePickerEvents::MouseHover
		[propget, id(DISPID_DTP_HOVERTIME), helpstring("Retrieves or sets the number of milliseconds the mouse cursor must be located over the control's client area before the 'MouseHover' event is fired.")]
		HRESULT HoverTime([out, retval] LONG* pValue);
		[propput, id(DISPID_DTP_HOVERTIME), helpstring("Retrieves or sets the number of milliseconds the mouse cursor must be located over the control's client area before the 'MouseHover' event is fired.")]
		HRESULT HoverTime([in] LONG newValue);
		/// \brief <em>Retrieves the control's window handle</em>
		///
		/// Retrieves the control's window handle.
		///
		/// \remarks This property is read-only.
		///
		/// \sa hWndCalendar, hWndUpDown, hWndEdit, _IDateTimePickerEvents::RecreatedControlWindow,
		///     _IDateTimePickerEvents::DestroyedControlWindow
		[propget, id(DISPID_DTP_HWND), helpstring("Retrieves the control's window handle."), nonbrowsable]
		HRESULT hWnd([out, retval] OLE_HANDLE* pValue);
		/// \brief <em>Retrieves the drop-down calendar control's window handle</em>
		///
		/// Retrieves the drop-down calendar control's window handle.
		///
		/// \remarks This property is read-only.
		///
		/// \sa hWnd, hWndUpDown, hWndEdit, _IDateTimePickerEvents::CreatedCalendarControlWindow,
		///     _IDateTimePickerEvents::DestroyedCalendarControlWindow,
		///     _IDateTimePickerEvents::CalendarDropDown, _IDateTimePickerEvents::CalendarCloseUp
		[propget, id(DISPID_DTP_HWNDCALENDAR), helpstring("Retrieves the drop-down calendar control's window handle."), nonbrowsable]
		HRESULT hWndCalendar([out, retval] OLE_HANDLE* pValue);
		/// \brief <em>Retrieves the the edit control's window handle in free-format edit mode</em>
		///
		/// Retrieves the window handle of the edit control that is used during free-format edit mode.
		/// Free-format edit mode can be entered by selecting the whole text or pressing F2 if the
		/// \c deParseUserInput flag of the \c DisabledEvents property is cleared.
		///
		/// \remarks This property is read-only.
		///
		/// \sa hWnd, hWndCalendar, hWndUpDown, DisabledEvents, DisabledEventsConstants
		[propget, id(DISPID_DTP_HWNDEDIT), helpstring("Retrieves the window handle of the edit control that is used during free-format edit mode."), nonbrowsable]
		HRESULT hWndEdit([out, retval] OLE_HANDLE* pValue);
		/// \brief <em>Retrieves the the up-down control's window handle</em>
		///
		/// Retrieves the window handle of the up-down control that is displayed if the \c Style property is
		/// set to \c sUpDown.
		///
		/// \remarks This property is read-only.
		///
		/// \sa hWnd, hWndCalendar, hWndEdit, Style, StyleConstants
		[propget, id(DISPID_DTP_HWNDUPDOWN), helpstring("Retrieves the window handle of the up-down control that is displayed if the 'Style' property is set to 'sUpDown'."), nonbrowsable]
		HRESULT hWndUpDown([out, retval] OLE_HANDLE* pValue);
		/// \brief <em>Controls the control's IME features</em>
		///
		/// Retrieves or sets the control's IME mode. IME is a Windows feature making it easy to enter
		/// Asian characters. Any of the values defined by the \c IMEModeConstants enumeration is valid.
		///
		/// \sa IMEModeConstants
		[propget, id(DISPID_DTP_IMEMODE), helpstring("Retrieves or sets the control's IME mode.")]
		HRESULT IMEMode([out, retval] IMEModeConstants* pValue);
		[propput, id(DISPID_DTP_IMEMODE), helpstring("Retrieves or sets the control's IME mode.")]
		HRESULT IMEMode([in] IMEModeConstants newValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's release type</em>
		///
		///   Retrieves the control's release type. This property is part of the fingerprint
		///   that uniquely identifies each software written by Timo "TimoSoft" Kunze. If set to
		///   \c True, the control was compiled for release; otherwise it was compiled for debugging.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, AppShortName, Build, CharSet, Programmer, Tester
		/// \endif
		[propget, id(DISPID_DTP_ISRELEASE), hidden]
		HRESULT IsRelease([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Specifies the maximum allowable date</em>
		///
		/// Retrieves or sets the maximum date accepted by the control.
		///
		/// \sa MinDate, CurrentDate
		[propget, id(DISPID_DTP_MAXDATE), helpstring("Retrieves or sets the maximum date accepted by the control.")]
		HRESULT MaxDate([out, retval] DATE* pValue);
		[propput, id(DISPID_DTP_MAXDATE), helpstring("Retrieves or sets the maximum date accepted by the control.")]
		HRESULT MaxDate([in] DATE newValue);
		/// \brief <em>Specifies the minimum allowable date</em>
		///
		/// Retrieves or sets the minimum date accepted by the control.
		///
		/// \sa MaxDate, CurrentDate
		[propget, id(DISPID_DTP_MINDATE), helpstring("Retrieves or sets the minimum date accepted by the control.")]
		HRESULT MinDate([out, retval] DATE* pValue);
		[propput, id(DISPID_DTP_MINDATE), helpstring("Retrieves or sets the minimum date accepted by the control.")]
		HRESULT MinDate([in] DATE newValue);
		/// \brief <em>Controls the control's mouse cursor</em>
		///
		/// Retrieves or sets a user-defined mouse cursor. It's used if \c MousePointer is set to
		/// \c mpCustom.
		///
		/// \sa MousePointer, MousePointerConstants
		[propget, id(DISPID_DTP_MOUSEICON), helpstring("Retrieves or sets a user-defined mouse cursor.")]
		HRESULT MouseIcon([out, retval] IPictureDisp** ppMouseIcon);
		[propput, id(DISPID_DTP_MOUSEICON), helpstring("Retrieves or sets a user-defined mouse cursor.")]
		HRESULT MouseIcon([in] IPictureDisp* pNewMouseIcon);
		[propputref, id(DISPID_DTP_MOUSEICON), helpstring("Retrieves or sets a user-defined mouse cursor.")]
		HRESULT MouseIcon([in] IPictureDisp* pNewMouseIcon);
		/// \brief <em>Controls the control's mouse cursor</em>
		///
		/// Retrieves or sets the cursor's type that's used if the mouse cursor is placed within the
		/// control's client area. Any of the values defined by the \c MousePointerConstants enumeration
		/// is valid.
		///
		/// \sa MouseIcon, MousePointerConstants
		[propget, id(DISPID_DTP_MOUSEPOINTER), helpstring("Retrieves or sets the cursor's type that's used if the mouse cursor is placed within the control's client area.")]
		HRESULT MousePointer([out, retval] MousePointerConstants* pValue);
		[propput, id(DISPID_DTP_MOUSEPOINTER), helpstring("Retrieves or sets the cursor's type that's used if the mouse cursor is placed within the control's client area.")]
		HRESULT MousePointer([in] MousePointerConstants newValue);
		/// \brief <em>Specifies whether the \c ContextMenu event can be invoked using the keyboard</em>
		///
		/// Retrieves or sets whether the control fires the \c ContextMenu event if the user presses
		/// [SHIFT]+[F10] or [WINDOWS CONTEXTMENU]. If set to \c True, the events get fired; otherwise not.
		///
		/// \sa _IDateTimePickerEvents::ContextMenu
		[propget, id(DISPID_DTP_PROCESSCONTEXTMENUKEYS), helpstring("Retrieves or sets whether the control fires the 'ContextMenu' event if the user presses [SHIFT]+[F10] or [WINDOWS CONTEXTMENU].")]
		HRESULT ProcessContextMenuKeys([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_DTP_PROCESSCONTEXTMENUKEYS), helpstring("Retrieves or sets whether the control fires the 'ContextMenu' event if the user presses [SHIFT]+[F10] or [WINDOWS CONTEXTMENU].")]
		HRESULT ProcessContextMenuKeys([in] VARIANT_BOOL newValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the name(s) of the control's programmer(s)</em>
		///
		///   Retrieves the name(s) of the control's programmer(s). This property is part of the
		///   fingerprint that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, AppShortName, Build, CharSet, IsRelease, Tester
		/// \endif
		[propget, id(DISPID_DTP_PROGRAMMER), hidden]
		HRESULT Programmer([out, retval] BSTR* pValue);
		/// \brief <em>Controls the control's behavior in drag'n'drop operations</em>
		///
		/// Retrieves or sets whether the control is registered as a target for OLE drag'n'drop. If set to
		/// \c True, the control accepts OLE drag'n'drop actions; otherwise not.
		///
		/// \sa SupportOLEDragImages, _IDateTimePickerEvents::OLEDragEnter,
		///     _IDateTimePickerEvents::CalendarOLEDragEnter
		[propget, id(DISPID_DTP_REGISTERFOROLEDRAGDROP), helpstring("Retrieves or sets whether the control is registered as a target for OLE drag'n'drop.")]
		HRESULT RegisterForOLEDragDrop([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_DTP_REGISTERFOROLEDRAGDROP), helpstring("Retrieves or sets whether the control is registered as a target for OLE drag'n'drop.")]
		HRESULT RegisterForOLEDragDrop([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls the control's right-to-left features</em>
		///
		/// Enables or disables bidirectional features. Any combination of the values defined by the
		/// \c RightToLeftConstants enumeration is valid.
		///
		/// \sa IMEMode, RightToLeftConstants
		[propget, id(DISPID_DTP_RIGHTTOLEFT), helpstring("Enables or disables bidirectional features.")]
		HRESULT RightToLeft([out, retval] RightToLeftConstants* pValue);
		[propput, id(DISPID_DTP_RIGHTTOLEFT), helpstring("Enables or disables bidirectional features.")]
		HRESULT RightToLeft([in] RightToLeftConstants newValue);
		/// \brief <em>Specifies which day is handled as the first day of a week</em>
		///
		/// Retrieves or sets the day that is handled as the first day of a week. Any of the values defined by
		/// the \c StartOfWeekConstants enumeration is valid.
		///
		/// \sa StartOfWeekConstants
		[propget, id(DISPID_DTP_STARTOFWEEK), helpstring("Retrieves or sets the day that is handled as the first day of a week.")]
		HRESULT StartOfWeek([out, retval] StartOfWeekConstants* pValue);
		[propput, id(DISPID_DTP_STARTOFWEEK), helpstring("Retrieves or sets the day that is handled as the first day of a week.")]
		HRESULT StartOfWeek([in] StartOfWeekConstants newValue);
		/// \brief <em>Controls which possibilities to edit the currently selected date are provided</em>
		///
		/// Retrieves or sets which possibilities to edit the currently selected date are provided. Any of the
		/// values defined by the \c StyleConstants enumeration is valid.
		///
		/// \attention Changing this property will destroy and recreate the control window.
		///
		/// \sa DateFormat, CurrentDate, StyleConstants
		[propget, id(DISPID_DTP_STYLE), helpstring("Retrieves or sets which possibilities to edit the currently selected date are provided. Changing this property will destroy and recreate the control window.")]
		HRESULT Style([out, retval] StyleConstants* pValue);
		[propput, id(DISPID_DTP_STYLE), helpstring("Retrieves or sets which possibilities to edit the currently selected date are provided. Changing this property will destroy and recreate the control window.")]
		HRESULT Style([in] StyleConstants newValue);
		/// \brief <em>Controls the control's behavior in drag'n'drop operations</em>
		///
		/// Retrieves or sets whether the control creates an \c IDropTargetHelper object, so that a drag image
		/// can be displayed during OLE drag'n'drop. If set to \c True, the control creates the object;
		/// otherwise not.
		///
		/// \remarks Requires shell32.dll version 5.0 or higher.
		///
		/// \sa RegisterForOLEDragDrop, FinishOLEDragDrop,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms646238.aspx">IDropTargetHelper</a>
		[propget, id(DISPID_DTP_SUPPORTOLEDRAGIMAGES), helpstring("Retrieves or sets whether the control creates an 'IDropTargetHelper' object, so that a drag image can be displayed during OLE drag'n'drop. Requires shell32.dll version 5.0 or higher.")]
		HRESULT SupportOLEDragImages([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_DTP_SUPPORTOLEDRAGIMAGES), helpstring("Retrieves or sets whether the control creates an 'IDropTargetHelper' object, so that a drag image can be displayed during OLE drag'n'drop. Requires shell32.dll version 5.0 or higher.")]
		HRESULT SupportOLEDragImages([in] VARIANT_BOOL newValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the name(s) of the control's tester(s)</em>
		///
		///   Retrieves the name(s) of the control's tester(s). This property is part of the
		///   fingerprint that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, AppShortName, Build, CharSet, IsRelease, Programmer
		/// \endif
		[propget, id(DISPID_DTP_TESTER), hidden]
		HRESULT Tester([out, retval] BSTR* pValue);
		/// \brief <em>Specifies whether the control uses the system font</em>
		///
		/// Retrieves or sets whether the control uses the MS Shell Dlg font (which is mapped to the system's
		/// default GUI font) or the font specified by the \c Font property. If set to \c True, the system
		/// font; otherwise the specified font is used.
		///
		/// \sa Font, CalendarUseSystemFont
		[propget, id(DISPID_DTP_USESYSTEMFONT), helpstring("Retrieves or sets whether the control uses the MS Shell Dlg font or the font specified by the 'Font' property.")]
		HRESULT UseSystemFont([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_DTP_USESYSTEMFONT), helpstring("Retrieves or sets whether the control uses the MS Shell Dlg font or the font specified by the 'Font' property.")]
		HRESULT UseSystemFont([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies the currently selected date</em>
		///
		/// Retrieves or sets the currently selected date. If this property is set to \c Empty and the
		/// \c AllowNullSelection property is set to \c True, the selection is set to &ldquo;No
		/// selection&rdquo;.
		///
		/// \remarks This property combines the \c CurrentDate and \c DateSelected properties. It can be used
		///          for data-binding if the table may contain \c NULL values.
		///
		/// \sa CurrentDate, DateSelected, _IDateTimePickerEvents::CurrentDateChanged
		[propget, id(DISPID_DTP_VALUE), helpstring("Retrieves or sets the currently selected date."), bindable, displaybind, requestedit, defaultbind, nonbrowsable]
		HRESULT Value([out, retval] VARIANT* pValue);
		[propput, id(DISPID_DTP_VALUE), helpstring("Retrieves or sets the currently selected date."), bindable, displaybind, requestedit, defaultbind, nonbrowsable]
		HRESULT Value([in] VARIANT newValue);
		/// \brief <em>Retrieves the control's version</em>
		///
		/// \remarks This property is read-only.
		[propget, id(DISPID_DTP_VERSION), helpstring("Retrieves the control's version."), nonbrowsable]
		HRESULT Version([out, retval] BSTR* pValue);

		/// \brief <em>Displays the control's credits</em>
		///
		/// Displays some information about this control and its author.
		[id(DISPID_DTP_ABOUT), helpstring("Displays some information about this control and its author.")]
		HRESULT About(void);
		/// \brief <em>Retrieves the maximum width of the &ldquo;Today&rdquo; string in the drop-down calendar control</em>
		///
		/// Retrieves the maximum width of the &ldquo;Today&rdquo; string in the drop-down calendar control.
		///
		/// \return The maximum width of the &ldquo;Today&rdquo; string in the drop-down calendar control.
		///
		/// \remarks This method fails if the \c hWndCalendar property is set to 0.
		///
		/// \sa CalendarShowTodayDate, CalendarTodayDate, hWndCalendar
		[id(DISPID_DTP_CALENDARGETMAXTODAYWIDTH), helpstring("Retrieves the maximum width of the 'Today' string in the drop-down calendar control.")]
		HRESULT CalendarGetMaxTodayWidth([out, retval] OLE_XSIZE_PIXELS* pWidth);
		/// \brief <em>Retrieves the bounding rectangle of the specified drop-down calendar control part</em>
		///
		/// Retrieves the bounding rectangle (in pixels relative to the drop-down calendar control's
		/// upper-left corner) of the specified drop-down calendar control part.
		///
		/// \param[in] controlPart The part of the drop-down calendar control for which to retrieve the
		///            rectangle. Any of the values defined by the \c ControlPartConstants enumeration is
		///            valid.
		/// \param[in] columnIndex The column index of the grid cell for which to retrieve the rectangle. The
		///            index starts at -1, which identifies the week numbers column. This parameter is ignored
		///            if \c controlPart is not equal to \c cpCalendarCell.
		/// \param[in] rowIndex The row index of the grid cell or row for which to retrieve the rectangle. The
		///            index starts at -1, which identifies the week days row. This parameter is ignored
		///            if \c controlPart is not equal to \c cpCalendarRow or \c cpCalendarCell.
		/// \param[out] left The x-coordinate (in pixels) of the upper-left corner of the drop-down calendar
		///             control part's bounding rectangle relative to the drop-down calendar control's
		///             upper-left corner.
		/// \param[out] top The y-coordinate (in pixels) of the upper-left corner of the drop-down calendar
		///             control part's bounding rectangle relative to the drop-down calendar control's
		///             upper-left corner.
		/// \param[out] right The x-coordinate (in pixels) of the lower-right corner of the drop-down calendar
		///             control part's bounding rectangle relative to the drop-down calendar control's
		///             upper-left corner.
		/// \param[out] bottom The y-coordinate (in pixels) of the lower-right corner of the drop-down calendar
		///             control part's bounding rectangle relative to the drop-down calendar control's
		///             upper-left corner.
		///
		/// \remarks This method fails if the \c hWndCalendar property is set to 0.\n
		///          Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa ControlPartConstants, hWndCalendar
		[id(DISPID_DTP_CALENDARGETRECTANGLE), helpstring("Retrieves the bounding rectangle (in pixels relative to the drop-down calendar control's upper-left corner) of the specified drop-down calendar control part. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT CalendarGetRectangle([in] ControlPartConstants controlPart, [in, defaultvalue(0)] LONG columnIndex, [in, defaultvalue(0)] LONG rowIndex, [in, out, defaultvalue(0)] OLE_XPOS_PIXELS* Left, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* Top, [in, out, defaultvalue(0)] OLE_XPOS_PIXELS* Right, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* Bottom);
		/// \brief <em>Closes the drop-down calendar control</em>
		///
		/// Closes the drop-down calendar control.
		///
		/// \sa OpenDropDownWindow, _IDateTimePickerEvents::CalendarCloseUp, hWndCalendar
		[id(DISPID_DTP_CLOSEDROPDOWNWINDOW), helpstring("Closes the drop-down calendar control.")]
		HRESULT CloseDropDownWindow(void);
		/// \brief <em>Retrieves the bounding rectangle of the checkbox that is displayed if \c AllowNullSelection is set to \c True</em>
		///
		/// Retrieves the bounding rectangle (in pixels relative to the control's upper-left corner) of the
		/// checkbox which is displayed if the \c AllowNullSelection property is set to \c True.
		///
		/// \param[out] left The x-coordinate (in pixels) of the upper-left corner of the checkbox's
		///             bounding rectangle relative to the control's upper-left corner.
		/// \param[out] top The y-coordinate (in pixels) of the upper-left corner of the checkbox's
		///             bounding rectangle relative to the control's upper-left corner.
		/// \param[out] right The x-coordinate (in pixels) of the lower-right corner of the checkbox's
		///             bounding rectangle relative to the control's upper-left corner.
		/// \param[out] bottom The y-coordinate (in pixels) of the lower-right corner of the checkbox's
		///             bounding rectangle relative to the control's upper-left corner.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa AllowNullSelection, GetDropDownButtonRectangle
		[id(DISPID_DTP_GETCHECKBOXRECTANGLE), helpstring("Retrieves the bounding rectangle (in pixels relative to the control's upper-left corner) of the checkbox which is displayed if the 'AllowNullSelection' property is set to 'True'. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT GetCheckboxRectangle([in, out, defaultvalue(0)] OLE_XPOS_PIXELS* Left, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* Top, [in, out, defaultvalue(0)] OLE_XPOS_PIXELS* Right, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* Bottom);
		/// \brief <em>Retrieves the bounding rectangle of the drop-down button that is displayed if \c Style is set to \c sDropDown</em>
		///
		/// Retrieves the bounding rectangle (in pixels relative to the control's upper-left corner) of the
		/// drop-down button which is displayed if the \c Style property is set to \c sDropDown.
		///
		/// \param[out] left The x-coordinate (in pixels) of the upper-left corner of the button's bounding
		///             rectangle relative to the control's upper-left corner.
		/// \param[out] top The y-coordinate (in pixels) of the upper-left corner of the button's bounding
		///             rectangle relative to the control's upper-left corner.
		/// \param[out] right The x-coordinate (in pixels) of the lower-right corner of the button's bounding
		///             rectangle relative to the control's upper-left corner.
		/// \param[out] bottom The y-coordinate (in pixels) of the lower-right corner of the button's bounding
		///             rectangle relative to the control's upper-left corner.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa Style, GetCheckboxRectangle
		[id(DISPID_DTP_GETDROPDOWNBUTTONRECTANGLE), helpstring("Retrieves the bounding rectangle (in pixels relative to the control's upper-left corner) of the drop-down button which is displayed if the 'Style' property is set to 'sDropDown'. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT GetDropDownButtonRectangle([in, out, defaultvalue(0)] OLE_XPOS_PIXELS* Left, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* Top, [in, out, defaultvalue(0)] OLE_XPOS_PIXELS* Right, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* Bottom);
		/// \brief <em>Retrieves the control's ideal size so that no clipping occurs</em>
		///
		/// Retrieves the control's ideal size so that no clipping occurs.
		///
		/// \param[out] width The ideal width.
		/// \param[out] height The ideal height.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		[id(DISPID_DTP_GETIDEALSIZE), helpstring("Retrieves the control's ideal size so that no clipping occurs. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT GetIdealSize([in, out, defaultvalue(0)] OLE_XSIZE_PIXELS* Width, [in, out, defaultvalue(0)] OLE_YSIZE_PIXELS* Height);
		/// \brief <em>Loads the control's settings from the specified file</em>
		///
		/// \param[in] file The file to read from.
		///
		/// \return \c True if the settings could be loaded; otherwise \c False.
		///
		/// \sa SaveSettingsToFile
		[id(DISPID_DTP_LOADSETTINGSFROMFILE), helpstring("Loads the control's settings from the specified file.")]
		HRESULT LoadSettingsFromFile([in] BSTR file, [out, retval] VARIANT_BOOL* pSucceeded);
		/// \brief <em>Opens the drop-down calendar control</em>
		///
		/// Opens the drop-down calendar control.
		///
		/// \sa CloseDropDownWindow, _IDateTimePickerEvents::CalendarDropDown, hWndCalendar
		[id(DISPID_DTP_OPENDROPDOWNWINDOW), helpstring("Opens the drop-down calendar control.")]
		HRESULT OpenDropDownWindow(void);
		/// \brief <em>Advises the control to redraw itself</em>
		[id(DISPID_DTP_REFRESH), helpstring("Advises the control to redraw itself.")]
		HRESULT Refresh(void);
		/// \brief <em>Saves the control's settings to the specified file</em>
		///
		/// \param[in] file The file to write to.
		///
		/// \return \c True if the settings could be saved; otherwise \c False.
		///
		/// \sa LoadSettingsFromFile
		[id(DISPID_DTP_SAVESETTINGSTOFILE), helpstring("Saves the control's settings to the specified file.")]
		HRESULT SaveSettingsToFile([in] BSTR file, [out, retval] VARIANT_BOOL* pSucceeded);
		/// \brief <em>Sets the dates that are displayed using a bold font</em>
		///
		/// Sets the dates that are displayed using a bold font in the drop-down calendar control.
		///
		/// \param[in] states An array containing the state for each currently displayed date. If a date's
		///            entry is set to \c True, it is displayed bold; otherwise not.\n
		///            <strong>Note:</strong> To simplify handling, it is assumed that each month has 31 days.
		///            So if the state for April 30th is stored at index 30, the state for May 1st would be
		///            stored at index 32 instead of 31.\n
		///            This array must contain at least 93 elements.
		///
		/// \return \c True on success; otherwise \c False.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          Due to a bug in Windows, bold dates won't show up bold if using comctl32.dll version 6.10
		///          on Windows Vista.\n
		///          If the drop-down calendar control's view changes or it is closed, any previously set bold
		///          states are lost.
		///
		/// \sa _IDateTimePickerEvents::GetBoldDates
		[id(DISPID_DTP_SETBOLDDATES), helpstring("Sets the dates that are displayed using a bold font in the drop-down calendar control. See helpfile for some important notes about the support of bold dates.")]
		HRESULT SetBoldDates([in] SAFEARRAY(VARIANT_BOOL)* states, [out, retval] VARIANT_BOOL* pSucceeded);

		/// \brief <em>Specifies whether the control intercepts double clicks</em>
		///
		/// Enables or disables double clicks. If set to \c True, double clicks are accepted; otherwise all
		/// clicks are handled as single clicks.
		///
		/// \remarks Enabling double-clicks may lead to accidental double-clicks.
		///
		/// \sa _IDateTimePickerEvents::DblClick, _IDateTimePickerEvents::MDblClick,
		///     _IDateTimePickerEvents::RDblClick, _IDateTimePickerEvents::XDblClick
		[propget, id(DISPID_DTP_DETECTDOUBLECLICKS), helpstring("Enables or disables double clicks. Enabling double-clicks may lead to accidental double-clicks.")]
		HRESULT DetectDoubleClicks([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_DTP_DETECTDOUBLECLICKS), helpstring("Enables or disables double clicks. Enabling double-clicks may lead to accidental double-clicks.")]
		HRESULT DetectDoubleClicks([in] VARIANT_BOOL newValue);

		/// \brief <em>Finishes a pending drop operation</em>
		///
		/// During a drag'n'drop operation the drag image is displayed until the \c OLEDragDrop event has been
		/// handled. This order is intended by Microsoft Windows. However, if a message box is displayed from
		/// within the \c OLEDragDrop event, or the drop operation cannot be performed asynchronously and takes
		/// a long time, it may be desirable to remove the drag image earlier.\n
		/// This method will break the intended order and finish the drag'n'drop operation (including removal
		/// of the drag image) immediately.
		///
		/// \remarks This method will fail if not called from the \c OLEDragDrop event handler or if no drag
		///          images are used.
		///
		/// \sa _IDateTimePickerEvents::OLEDragDrop, SupportOLEDragImages
		[id(DISPID_DTP_FINISHOLEDRAGDROP), helpstring("Finishes a pending drop operation from within the 'OLEDragDrop' event, removing the drag image, but breaking the intended order. See documentation for details.")]
		HRESULT FinishOLEDragDrop(void);
	};


	/// \interface _IDateTimePickerEvents
	/// \author Timo "TimoSoft" Kunze
	/// \brief <em>The \c DateTimePicker class' events interface</em>
	///
	/// This interface defines all events the \c DateTimePicker class may raise.
	///
	/// \sa IDateTimePicker
	[
		uuid(F2BF8F66-B895-4c59-B3BF-5B17D8EBE821),
		helpstring("IDateTimePicker-event-interface")
	]
	dispinterface _IDateTimePickerEvents
	{
		properties:
		methods:
			/// \brief <em>The currently selected date was changed</em>
			///
			/// Will be fired after another date was selected.
			///
			/// \param[in] dateSelected Specifies whether a date or the &ldquo;No selection&rdquo; state has been
			///            selected. If \c True, the date specified by \c selectedDate has been selected;
			///            otherwise the &ldquo;No selection&rdquo; state has been selected.
			/// \param[in] selectedDate The date that has been selected.
			///
			/// \remarks This event maps directly to the \c DTN_DATETIMECHANGE notification that the
			///          \c SysDateTimePick32 window is sending whenever the selection changes. This notification
			///          sometimes is sent twice (and therefore the event may be raised twice).
			///
			/// \sa IDateTimePicker::CurrentDate, IDateTimePicker::DateSelected,
			///     <a href="https://msdn.microsoft.com/en-us/library/bb761737.aspx">DTN_DATETIMECHANGE</a>
			[id(DISPID_DTPE_CURRENTDATECHANGED), helpstring("Will be fired after another date was selected.")]
			void CurrentDateChanged(VARIANT_BOOL DateSelected, DATE selectedDate);
			/// \brief <em>The user clicked into the drop-down calendar control's client area</em>
			///
			/// Will be fired if the user clicks into the drop-down calendar control's client area using
			/// the left mouse button.
			///
			/// \param[in] hitDate The date that was clicked. May be zero.
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be \c vbLeftButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the drop-down
			///            calendar control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the drop-down
			///            calendar control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the drop-down calendar control that was clicked.
			///            Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa CalendarMClick, CalendarRClick, CalendarXClick, Click, HitTestConstants,
			///     IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_CALENDARCLICK), helpstring("Will be fired if the user clicks into the drop-down calendar control's client area using the left mouse button. This event may be disabled.")]
			void CalendarClick(DATE hitDate, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The control's drop-down calendar window was closed</em>
			///
			/// Will be fired after the drop-down calendar window has been closed.
			///
			/// \sa CalendarDropDown, IDateTimePicker::CloseDropDownWindow, IDateTimePicker::hWndCalendar
			[id(DISPID_DTPE_CALENDARCLOSEUP), helpstring("Will be fired after the drop-down calendar window has been closed.")]
			void CalendarCloseUp();
			/// \brief <em>The context menu should be displayed</em>
			///
			/// Will be fired if the drop-down calendar control's context menu should be displayed.
			///
			/// \param[in] hitDate The date the context menu refers to. Will be zero if the context menu
			///            should be displayed for the whole drop-down calendar control instead of only for
			///            a single date.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the menu's proposed position relative to the
			///            drop-down calendar control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the menu's proposed position relative to the
			///            drop-down calendar control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the drop-down calendar control that the menu's
			///            proposed position lies in. Any of the values defined by the \c HitTestConstants
			///            enumeration is valid.
			/// \param[in,out] showDefaultMenu If set to \c True, the default context menu is displayed;
			///                otherwise the drop-down calendar control doesn't display any context menu
			///                itself, but you may display your custom menu.
			///
			/// \sa CalendarRClick, ContextMenu, HitTestConstants
			[id(DISPID_DTPE_CALENDARCONTEXTMENU), helpstring("Will be fired if the drop-down calendar control's context menu should be displayed.")]
			void CalendarContextMenu(DATE hitDate, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails, VARIANT_BOOL* showDefaultMenu);
			/// \brief <em>The mouse cursor was moved into a drop-down calendar date cell's bounding rectangle</em>
			///
			/// Will be fired if the user moved the mouse cursor into the specified drop-down calendar date
			/// cell's bounding rectangle.
			///
			/// \param[in] hitDate The date that was entered.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the drop-down
			///            calendar control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the drop-down
			///            calendar control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the drop-down calendar control that the mouse
			///            cursor's position lies in. Most of the values defined by the \c HitTestConstants
			///            enumeration are valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa CalendarDateMouseLeave, CalendarMouseMove, HitTestConstants, ExtendedMouseButtonConstants,
			///     IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_CALENDARDATEMOUSEENTER), helpstring("Will be fired if the user moved the mouse cursor into the specified drop-down calendar date cell's bounding rectangle. This event may be disabled.")]
			void CalendarDateMouseEnter(DATE hitDate, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The mouse cursor was moved out of a drop-down calendar date cell's bounding rectangle</em>
			///
			/// Will be fired if the user moved the mouse cursor out of the specified drop-down calendar date
			/// cell's bounding rectangle.
			///
			/// \param[in] hitDate The date that was left.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the drop-down
			///            calendar control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the drop-down
			///            calendar control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the drop-down calendar control that the mouse
			///            cursor's position lies in. Most of the values defined by the \c HitTestConstants
			///            enumeration are valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa CalendarDateMouseEnter, CalendarMouseMove, HitTestConstants, ExtendedMouseButtonConstants,
			///     IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_CALENDARDATEMOUSELEAVE), helpstring("Will be fired if the user moved the mouse cursor out of the specified drop-down calendar date cell's bounding rectangle. This event may be disabled.")]
			void CalendarDateMouseLeave(DATE hitDate, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The control's drop-down calendar window was opened</em>
			///
			/// Will be fired after the drop-down calendar window has been opened (before it is made
			/// visible).
			///
			/// \sa CalendarCloseUp, IDateTimePicker::OpenDropDownWindow, IDateTimePicker::hWndCalendar
			[id(DISPID_DTPE_CALENDARDROPDOWN), helpstring("Will be fired after the drop-down calendar window has been opened (before it is made visible).")]
			void CalendarDropDown();
			/// \brief <em>A key was pressed while the drop-down calendar control has the focus</em>
			///
			/// Will be fired if the user presses a key while the drop-down calendar control has the focus.
			///
			/// \param[in,out] keyCode The pressed key. Any of the values defined by VB's
			///                \c KeyCodeConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			///
			/// \remarks You may set \c keyCode to 0 to eat the message.\n
			///          This event may be disabled.
			///
			/// \sa CalendarKeyUp, CalendarKeyPress, KeyDown, IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_CALENDARKEYDOWN), helpstring("Will be fired if the user presses a key while the drop-down calendar control has the focus. This event may be disabled.")]
			void CalendarKeyDown(SHORT* keyCode, SHORT shift);
			/// \brief <em>An alphanumeric key was pressed and released while the drop-down calendar control has the focus</em>
			///
			/// Will be fired if the user presses and releases an alphanumeric key while the drop-down calendar
			/// control has the focus.
			///
			/// \param[in,out] keyAscii The pressed key's ASCII code.
			///
			/// \remarks You may set \c keyAscii to 0 to eat the message.\n
			///          This event may be disabled.
			///
			/// \sa CalendarKeyDown, CalendarKeyUp, KeyPress, IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_CALENDARKEYPRESS), helpstring("Will be fired if the user presses and releases an alphanumeric key while the drop-down calendar control has the focus. This event may be disabled.")]
			void CalendarKeyPress(SHORT* keyAscii);
			/// \brief <em>A key was released while the drop-down calendar control has the focus</em>
			///
			/// Will be fired if the user releases a key while the drop-down calendar control has the focus.
			///
			/// \param[in,out] keyCode The released key. Any of the values defined by VB's
			///                \c KeyCodeConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			///
			/// \remarks You may set \c keyCode to 0 to eat the message.\n
			///          This event may be disabled.
			///
			/// \sa CalendarKeyDown, CalendarKeyPress, KeyUp, IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_CALENDARKEYUP), helpstring("Will be fired if the user releases a key while the drop-down calendar control has the focus. This event may be disabled.")]
			void CalendarKeyUp(SHORT* keyCode, SHORT shift);
			/// \brief <em>The user clicked into the drop-down calendar control's client area</em>
			///
			/// Will be fired if the user clicks into the drop-down calendar control's client area using the
			/// middle mouse button.
			///
			/// \param[in] hitDate The date that was clicked. May be zero.
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be \c vbMiddleButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the drop-down
			///            calendar control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the drop-down
			///            calendar control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the drop-down calendar control that was clicked.
			///            Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa CalendarClick, CalendarRClick, CalendarXClick, MClick, HitTestConstants,
			///     IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_CALENDARMCLICK), helpstring("Will be fired if the user clicks into the drop-down calendar control's client area using the middle mouse button. This event may be disabled.")]
			void CalendarMClick(DATE hitDate, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>A mouse button was pressed over the drop-down calendar control's client area</em>
			///
			/// Will be fired if the user presses a mouse button while the mouse cursor is located over the
			/// drop-down calendar control's client area.
			///
			/// \param[in] hitDate The date that the mouse cursor is located over. May be zero.
			/// \param[in] button The pressed mouse button. Any of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            drop-down calendar control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            drop-down calendar control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the drop-down calendar control that the mouse
			///            cursor's position lies in. Any of the values defined by the \c HitTestConstants
			///            enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa CalendarMouseUp, CalendarClick, CalendarMClick, CalendarRClick, CalendarXClick, MouseDown,
			///     HitTestConstants, ExtendedMouseButtonConstants, IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_CALENDARMOUSEDOWN), helpstring("Will be fired if the user presses a mouse button while the mouse cursor is located over the drop-down calendar control's client area. This event may be disabled.")]
			void CalendarMouseDown(DATE hitDate, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The mouse cursor was moved into the drop-down calendar control's client area</em>
			///
			/// Will be fired if the user moved the mouse cursor into the drop-down calendar control's client
			/// area.
			///
			/// \param[in] hitDate The date that the mouse cursor is located over. May be zero.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            drop-down calendar control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            drop-down calendar control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the drop-down calendar control that the mouse
			///            cursor's position lies in. Any of the values defined by the \c HitTestConstants
			///            enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa CalendarMouseLeave, CalendarDateMouseEnter, CalendarMouseHover, CalendarMouseMove,
			///     MouseEnter, HitTestConstants, ExtendedMouseButtonConstants, IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_CALENDARMOUSEENTER), helpstring("Will be fired if the user moved the mouse cursor into the drop-down calendar control's client area. This event may be disabled.")]
			void CalendarMouseEnter(DATE hitDate, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The mouse cursor was moved into the drop-down calendar control's client area a specified period of time before</em>
			///
			/// Will be fired if the mouse cursor has been located over the drop-down calendar control's client
			/// area for the number of milliseconds specified by the \c IDateTimePicker::CalendarHoverTime
			/// property.
			///
			/// \param[in] hitDateThe date that the mouse cursor is located over. May be zero.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            drop-down calendar control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            drop-down calendar control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the drop-down calendar control that the mouse
			///            cursor's position lies in. Any of the values defined by the \c HitTestConstants
			///            enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa CalendarMouseEnter, CalendarMouseLeave, CalendarMouseMove, MouseHover,
			///     IDateTimePicker::CalendarHoverTime, HitTestConstants, ExtendedMouseButtonConstants,
			///     IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_CALENDARMOUSEHOVER), helpstring("Will be fired if the mouse cursor has been located over the drop-down calendar control's client area for the number of milliseconds specified by the 'CalendarHoverTime' property. This event may be disabled.")]
			void CalendarMouseHover(DATE hitDate, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The mouse cursor was moved out of the drop-down calendar control's client area</em>
			///
			/// Will be fired if the user moves the mouse cursor out of the drop-down calendar control's client
			/// area.
			///
			/// \param[in] hitDate The date that the mouse cursor is located over. May be zero.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            drop-down calendar control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            drop-down calendar control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the drop-down calendar control that the mouse
			///            cursor's position lies in. Any of the values defined by the \c HitTestConstants
			///            enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa CalendarMouseEnter, CalendarDateMouseLeave, CalendarMouseHover, CalendarMouseMove,
			///     MouseLeave, HitTestConstants, ExtendedMouseButtonConstants, IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_CALENDARMOUSELEAVE), helpstring("Will be fired if the user moves the mouse cursor out of the drop-down calendar control's client area. This event may be disabled.")]
			void CalendarMouseLeave(DATE hitDate, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The mouse cursor was moved over the drop-down calendar control's client area</em>
			///
			/// Will be fired if the user moves the mouse cursor over the drop-down calendar control's client
			/// area.
			///
			/// \param[in] hitDate The date that the mouse cursor is located over. May be zero.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            drop-down calendar control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            drop-down calendar control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the drop-down calendar control that the mouse
			///            cursor's position lies in. Any of the values defined by the \c HitTestConstants
			///            enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa CalendarMouseEnter, CalendarMouseLeave, CalendarMouseDown, CalendarMouseUp,
			///     CalendarMouseWheel, MouseMove, HitTestConstants, ExtendedMouseButtonConstants,
			///     IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_CALENDARMOUSEMOVE), helpstring("Will be fired if the user moves the mouse cursor over the drop-down calendar control's client area. This event may be disabled.")]
			void CalendarMouseMove(DATE hitDate, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>A mouse button was released over the drop-down calendar control's client area</em>
			///
			/// Will be fired if the user releases a mouse button while the mouse cursor is located over the
			/// drop-down calendar control's client area.
			///
			/// \param[in] hitDate The date that the mouse cursor is located over. May be zero.
			/// \param[in] button The released mouse button. Any of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            drop-down calendar control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            drop-down calendar control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the drop-down calendar control that the mouse
			///            cursor's position lies in. Any of the values defined by the \c HitTestConstants
			///            enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa CalendarMouseDown, CalendarClick, CalendarMClick, CalendarRClick, CalendarXClick, MouseUp,
			///     HitTestConstants, ExtendedMouseButtonConstants, IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_CALENDARMOUSEUP), helpstring("Will be fired if the user releases a mouse button while the mouse cursor is located over the drop-down calendar control's client area. This event may be disabled.")]
			void CalendarMouseUp(DATE hitDate, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The mouse wheel was rotated over the drop-down calendar control's client area</em>
			///
			/// Will be fired if the user rotates the mouse wheel over the drop-down calendar control's client
			/// area.
			///
			/// \param[in] hitDate The date that the mouse cursor is located over. May be zero.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the drop-down
			///            list box control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the drop-down
			///            list box control's upper-left corner.
			/// \param[in] scrollAxis Specifies whether the user intents to scroll vertically or horizontally.
			///            Any of the values defined by the \c ScrollAxisConstants enumeration is valid.
			/// \param[in] wheelDelta The distance the wheel has been rotated.
			/// \param[in] hitTestDetails Specifies the part of the drop-down calendar control that the mouse
			///            cursor's position lies in. Any of the values defined by the \c HitTestConstants
			///            enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa CalendarMouseMove, MouseWheel, HitTestConstants, ExtendedMouseButtonConstants,
			///     ScrollAxisConstants, IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_CALENDARMOUSEWHEEL), helpstring("Will be fired if the user rotates the mouse wheel over the drop-down calendar control's client area. This event may be disabled.")]
			void CalendarMouseWheel(DATE hitDate, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, ScrollAxisConstants scrollAxis, SHORT wheelDelta, HitTestConstants hitTestDetails);
			/// \brief <em>The data was dropped onto the drop-down calendar control during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user completes the operation while the mouse cursor
			/// is located over the drop-down calendar control's client area.
			///
			/// \param[in] data The dropped data.
			/// \param[in,out] effect On entry, a bit field of the drop effects (defined by the
			///                \c OLEDropEffectConstants enumeration) supported by the drag source. On
			///                return, this paramter must be set to the drop effect that the target finally
			///                executed.
			/// \param[in] dropTarget The date that is below the mouse cursor's position.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the drop-down
			///            calendar control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the drop-down
			///            calendar control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the drop-down calendar control that the mouse
			///            cursor's position lies in. Any of the values defined by the \c HitTestConstants
			///            enumeration is valid.
			///
			/// \remarks Don't forget to release any references that you hold to the data object.
			///
			/// \sa CalendarOLEDragEnter, CalendarOLEDragMouseMove, CalendarOLEDragLeave, CalendarMouseUp,
			///     OLEDragDrop, IDateTimePicker::RegisterForOLEDragDrop, IDateTimePicker::FinishOLEDragDrop,
			///     OLEDropEffectConstants, HitTestConstants
			[id(DISPID_DTPE_CALENDAROLEDRAGDROP), helpstring("Will be fired during OLE drag'n'drop if the user completes the operation while the mouse cursor is located over the drop-down calendar control's client area.")]
			void CalendarOLEDragDrop(IOLEDataObject* data, OLEDropEffectConstants* effect, DATE dropTarget, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The data was dragged into the drop-down calendar control during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user moved the mouse cursor into the drop-down
			/// calendar control's client area.
			///
			/// \param[in] data The dragged data.
			/// \param[in,out] effect On entry, a bit field of the drop effects (defined by the
			///                \c OLEDropEffectConstants enumeration) supported by the drag source. On
			///                return, this paramter must be set to the drop effect that the target wants
			///                to be used on drop.
			/// \param[in] dropTarget The date that is below the mouse cursor's position.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the drop-down
			///            calendar control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the drop-down
			///            calendar control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the drop-down calendar control that the mouse
			///            cursor's position lies in. Any of the values defined by the \c HitTestConstants
			///            enumeration is valid.
			/// \param[in,out] autoHScrollVelocity The speed multiplier for horizontal auto-scrolling. If set to
			///                0, horizontal auto-scrolling is disabled; if set to a value less than 0, the
			///                drop-down calendar control auto-scrolls to the left; if set to a value greater
			///                than 0, the drop-down calendar control auto-scrolls to the right. The higher/lower
			///                the value is, the faster the drop-down calendar control scrolls.
			///
			/// \sa CalendarOLEDragMouseMove, CalendarOLEDragLeave, CalendarOLEDragDrop, CalendarMouseEnter,
			///     OLEDragEnter, IDateTimePicker::RegisterForOLEDragDrop, OLEDropEffectConstants,
			///     IDateTimePicker::CalendarDragScrollTimeBase, HitTestConstants
			[id(DISPID_DTPE_CALENDAROLEDRAGENTER), helpstring("Will be fired during OLE drag'n'drop if the user moved the mouse cursor into the drop-down calendar control's client area.")]
			void CalendarOLEDragEnter(IOLEDataObject* data, OLEDropEffectConstants* effect, DATE dropTarget, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails, LONG* autoHScrollVelocity);
			/// \brief <em>The data was dragged out of the drop-down calendar control during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user moves the mouse cursor out of the drop-down
			/// calendar control's client area or if the user canceled the drag'n'drop operation.
			///
			/// \param[in] data The dragged data.
			/// \param[in] dropTarget The date that is below the mouse cursor's position.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the drop-down
			///            calendar control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the drop-down
			///            calendar control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the drop-down calendar control that the mouse
			///            cursor's position lies in. Any of the values defined by the \c HitTestConstants
			///            enumeration is valid.
			/// \param[in,out] autoCloseUp If set to \c True, the drop-down calendar control will be closed
			///                automatically; otherwise not.
			///
			/// \remarks Don't forget to release any references that you hold to the data object.
			///
			/// \sa CalendarOLEDragEnter, CalendarOLEDragMouseMove, CalendarOLEDragDrop, CalendarMouseLeave,
			///     OLEDragLeave, IDateTimePicker::RegisterForOLEDragDrop, HitTestConstants
			[id(DISPID_DTPE_CALENDAROLEDRAGLEAVE), helpstring("Will be fired during OLE drag'n'drop if the user moves the mouse cursor over the drop-down calendar control's client area or if the user canceled the drag'n'drop operation.")]
			void CalendarOLEDragLeave(IOLEDataObject* data, DATE dropTarget, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails, VARIANT_BOOL* autoCloseUp);
			/// \brief <em>The data was dragged over the drop-down calendar control during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user moves the mouse cursor over the drop-down
			/// calendar control's client area.
			///
			/// \param[in] data The dragged data.
			/// \param[in,out] effect On entry, a bit field of the drop effects (defined by the
			///                \c OLEDropEffectConstants enumeration) supported by the drag source. On
			///                return, this paramter must be set to the drop effect that the target wants
			///                to be used on drop.
			/// \param[in] dropTarget The date that is below the mouse cursor's position.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the drop-down
			///            calendar control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the drop-down
			///            calendar control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the drop-down calendar control that the mouse
			///            cursor's position lies in. Any of the values defined by the \c HitTestConstants
			///            enumeration is valid.
			/// \param[in,out] autoHScrollVelocity The speed multiplier for horizontal auto-scrolling. If set to
			///                0, horizontal auto-scrolling is disabled; if set to a value less than 0, the
			///                drop-down calendar control auto-scrolls to the left; if set to a value greater
			///                than 0, the drop-down calendar control auto-scrolls to the right. The higher/lower
			///                the value is, the faster the drop-down calendar control scrolls.
			///
			/// \sa CalendarOLEDragEnter, CalendarOLEDragLeave, CalendarOLEDragDrop, CalendarMouseMove,
			///     OLEDragMouseMove, IDateTimePicker::RegisterForOLEDragDrop, OLEDropEffectConstants,
			///     IDateTimePicker::CalendarDragScrollTimeBase, HitTestConstants
			[id(DISPID_DTPE_CALENDAROLEDRAGMOUSEMOVE), helpstring("Will be fired during OLE drag'n'drop if the user moves the mouse cursor over the drop-down calendar control's client area.")]
			void CalendarOLEDragMouseMove(IOLEDataObject* data, OLEDropEffectConstants* effect, DATE dropTarget, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails, LONG* autoHScrollVelocity);
			/// \brief <em>The user clicked into the drop-down calendar control's client area</em>
			///
			/// Will be fired if the user clicks into the drop-down calendar control's client area using the
			/// right mouse button.
			///
			/// \param[in] hitDate The date that was clicked. May be zero.
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be \c vbRightButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the drop-down
			///            calendar control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the drop-down
			///            calendar control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the drop-down calendar control that was clicked.
			///            Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa CalendarContextMenu, CalendarClick, CalendarMClick, CalendarXClick, RClick, HitTestConstants,
			///     IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_CALENDARRCLICK), helpstring("Will be fired if the user clicks into the drop-down calendar control's client area using the right mouse button. This event may be disabled.")]
			void CalendarRClick(DATE hitDate, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The view mode of the drop-down calendar control was changed</em>
			///
			/// Will be fired after the drop-down calendar control's view mode was changed.
			///
			/// \param[in] oldView The previous view mode.
			/// \param[in] newView The new view mode.
			///
			/// \remarks Requires comctl32.dll version 6.10 or higher.
			///
			/// \sa IDateTimePicker::CalendarView, ViewConstants
			[id(DISPID_DTPE_CALENDARVIEWCHANGED), helpstring("Will be fired after the drop-down calendar control's view mode was changed. Requires comctl32.dll version 6.10 or higher.")]
			void CalendarViewChanged(ViewConstants oldView, ViewConstants newView);
			/// \brief <em>The user clicked into the drop-down calendar control's client area</em>
			///
			/// Will be fired if the user clicks into the drop-down calendar control's client area using one of
			/// the extended mouse buttons.
			///
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be a constant defined by the \c ExtendedMouseButtonConstants enumeration.
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the drop-down
			///            calendar control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the drop-down
			///            calendar control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the drop-down calendar control that was clicked.
			///            Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa CalendarClick, CalendarMClick, CalendarRClick, XClick, HitTestConstants,
			///     ExtendedMouseButtonConstants, IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_CALENDARXCLICK), helpstring("Will be fired if the user clicks into the drop-down calendar control's client area using one of the extended mouse buttons. This event may be disabled.")]
			void CalendarXClick(DATE hitDate, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>A key was pressed while a callback field has the focus</em>
			///
			/// Will be fired if the user presses a key while a callback field has the focus.
			///
			/// \param[in] callbackField The callback field currently being edited. The number of \c X identifies
			///            the field.
			/// \param[in] keyCode The pressed key. Any of the values defined by VB's \c KeyCodeConstants
			///            enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in,out] currentDate The currently selected date. You may want to change it depending on
			///                the pressed key.
			///
			/// \sa KeyDown, GetCallbackFieldText, IDateTimePicker::CustomDateFormat
			[id(DISPID_DTPE_CALLBACKFIELDKEYDOWN), helpstring("Will be fired if the user presses a key while a callback field has the focus.")]
			void CallbackFieldKeyDown(BSTR callbackField, SHORT keyCode, SHORT shift, DATE* CurrentDate);
			/// \brief <em>The user clicked into the control's client area</em>
			///
			/// Will be fired if the user clicks into the control's client area using the left mouse button.
			///
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be \c vbLeftButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa DblClick, MClick, RClick, XClick, CalendarClick, IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_CLICK), helpstring("Will be fired if the user clicks into the control's client area using the left mouse button. This event may be disabled.")]
			void Click(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The context menu should be displayed</em>
			///
			/// Will be fired if the control's context menu should be displayed.
			///
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the menu's proposed position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the menu's proposed position relative to the
			///            control's upper-left corner.
			/// \param[in,out] showDefaultMenu If set to \c True, the default context menu is displayed;
			///                otherwise the control doesn't display any context menu itself, but you may
			///                display your custom menu.
			///
			/// \sa RClick, CalendarContextMenu
			[id(DISPID_DTPE_CONTEXTMENU), helpstring("Will be fired if the control's context menu should be displayed.")]
			void ContextMenu(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, VARIANT_BOOL* showDefaultMenu);
			/// \brief <em>The drop-down calendar control was created</em>
			///
			/// Will be fired after the drop-down calendar control was created.
			///
			/// \param[in] hWndCalendar The drop-down calendar control's window handle.
			///
			/// \sa DestroyedCalendarControlWindow, CalendarDropDown, IDateTimePicker::hWndCalendar
			[id(DISPID_DTPE_CREATEDCALENDARCONTROLWINDOW), helpstring("Will be fired after the drop-down calendar control was created.")]
			void CreatedCalendarControlWindow(LONG hWndCalendar);
			/// \brief <em>The edit control was created</em>
			///
			/// Will be fired after the edit control was created.
			///
			/// \param[in] hWndEdit The edit control's window handle.
			///
			/// \sa DestroyedEditControlWindow, IDateTimePicker::hWndEdit
			[id(DISPID_DTPE_CREATEDEDITCONTROLWINDOW), helpstring("Will be fired after the edit control was created.")]
			void CreatedEditControlWindow(LONG hWndEdit);
			/// \brief <em>The user double-clicked into the control's client area</em>
			///
			/// Will be fired if the user double-clicks into the control's client area using the left mouse
			/// button.
			///
			/// \param[in] button The mouse buttons that were pressed during the double-click. This should
			///            always be \c vbLeftButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the
			///            double-click. Any combination of the values defined by VB's \c ShiftConstants
			///            enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the double-click's position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the double-click's position relative to the
			///            control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa Click, MDblClick, RDblClick, XDblClick, IDateTimePicker::DetectDoubleClicks,
			///     IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_DBLCLICK), helpstring("Will be fired if the user double-clicks into the control's client area using the left mouse button. This event may be disabled.")]
			void DblClick(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The drop-down calendar control was destroyed</em>
			///
			/// Will be fired after the drop-down calendar control was destroyed.
			///
			/// \param[in] hWndCalendar The drop-down calendar control's window handle.
			///
			/// \sa CreatedCalendarControlWindow, CalendarCloseUp, IDateTimePicker::hWndCalendar
			[id(DISPID_DTPE_DESTROYEDCALENDARCONTROLWINDOW), helpstring("Will be fired after the drop-down calendar control was destroyed.")]
			void DestroyedCalendarControlWindow(LONG hWndCalendar);
			/// \brief <em>The control window was destroyed</em>
			///
			/// Will be fired after the control window was destroyed.
			///
			/// \param[in] hWnd The control's window handle.
			///
			/// \sa RecreatedControlWindow, IDateTimePicker::hWnd
			[id(DISPID_DTPE_DESTROYEDCONTROLWINDOW), helpstring("Will be fired after the control window was destroyed.")]
			void DestroyedControlWindow(LONG hWnd);
			/// \brief <em>The edit control was destroyed</em>
			///
			/// Will be fired after the edit control was destroyed.
			///
			/// \param[in] hWndEdit The edit control's window handle.
			///
			/// \sa CreatedEditControlWindow, IDateTimePicker::hWndEdit
			[id(DISPID_DTPE_DESTROYEDEDITCONTROLWINDOW), helpstring("Will be fired after the edit control was destroyed.")]
			void DestroyedEditControlWindow(LONG hWndEdit);
			/// \brief <em>The control needs to know which dates shall be displayed bold</em>
			///
			/// Will be fired if the control needs to know which dates shall be displayed bold in the drop-down
			/// calendar control.
			///
			/// \param[in] firstDate The first date for which to retrieve the state.
			/// \param[in] numberOfDates The number of dates for which to retrieve the states.
			/// \param[in,out] states An array containing the state for each date.
			///
			/// \remarks Requires comctl32.dll version 6.10 or higher.\n
			///          Due to a bug in Windows, bold dates won't show up bold if using comctl32.dll version
			///          6.10 on Windows Vista.
			///
			/// \sa IDateTimePicker::SetBoldDates
			[id(DISPID_DTPE_GETBOLDDATES), helpstring("Will be fired if the control needs to know which dates shall be displayed bold in the drop-down calendar control. See the helpfile for important details about the support of bold dates.")]
			void GetBoldDates(DATE FirstDate, LONG numberOfDates, SAFEARRAY(VARIANT_BOOL)* states);
			/// \brief <em>The control needs to know the content of a callback field</em>
			///
			/// Will be fired if the control needs to know the text to be displayed in a callback field.
			///
			/// \param[in] callbackField The callback field for which the text is required. The number of
			///            \c X identifies the field.
			/// \param[in] dateToFormat The date to be formatted.
			/// \param[in,out] textToDisplay The text to display in the callback field.
			///
			/// \sa GetCallbackFieldTextSize, CallbackFieldKeyDown, IDateTimePicker::CustomDateFormat
			[id(DISPID_DTPE_GETCALLBACKFIELDTEXT), helpstring("Will be fired if the control needs to know the text to be displayed in a callback field.")]
			void GetCallbackFieldText(BSTR callbackField, DATE dateToFormat, BSTR* textToDisplay);
			/// \brief <em>The control needs to know the maximum size of a callback field</em>
			///
			/// Will be fired if the control needs to know the maximum size of a callback field.
			///
			/// \param[in] callbackField The callback field for which the size is required. The number of
			///            \c X identifies the field.
			/// \param[in,out] textWidth Receives the maximum width of the callback field's content.
			/// \param[in,out] textHeight Receives the maximum height of the callback field's content.
			///
			/// \sa GetCallbackFieldText, IDateTimePicker::CustomDateFormat
			[id(DISPID_DTPE_GETCALLBACKFIELDTEXTSIZE), helpstring("Will be fired if the control needs to know the maximum size of a callback field.")]
			void GetCallbackFieldTextSize(BSTR callbackField, OLE_XSIZE_PIXELS* textWidth, OLE_YSIZE_PIXELS* textHeight);
			/// \brief <em>A key was pressed while the control has the focus</em>
			///
			/// Will be fired if the user presses a key while the control has the focus.
			///
			/// \param[in,out] keyCode The pressed key. Any of the values defined by VB's
			///                \c KeyCodeConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			///
			/// \remarks You may set \c keyCode to 0 to eat the message.\n
			///          This event may be disabled.
			///
			/// \sa KeyUp, KeyPress, CalendarKeyDown, CallbackFieldKeyDown, IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_KEYDOWN), helpstring("Will be fired if the user presses a key while the control has the focus. This event may be disabled.")]
			void KeyDown(SHORT* keyCode, SHORT shift);
			/// \brief <em>An alphanumeric key was pressed and released while the control has the focus</em>
			///
			/// Will be fired if the user presses and releases an alphanumeric key while the control has the
			/// focus.
			///
			/// \param[in,out] keyAscii The pressed key's ASCII code.
			///
			/// \remarks You may set \c keyAscii to 0 to eat the message.\n
			///          This event may be disabled.
			///
			/// \sa KeyDown, KeyUp, CalendarKeyPress, IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_KEYPRESS), helpstring("Will be fired if the user presses and releases an alphanumeric key while the control has the focus. This event may be disabled.")]
			void KeyPress(SHORT* keyAscii);
			/// \brief <em>A key was released while the control has the focus</em>
			///
			/// Will be fired if the user releases a key while the control has the focus.
			///
			/// \param[in,out] keyCode The released key. Any of the values defined by VB's
			///                \c KeyCodeConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			///
			/// \remarks You may set \c keyCode to 0 to eat the message.\n
			///          This event may be disabled.
			///
			/// \sa KeyDown, KeyPress, CalendarKeyUp, IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_KEYUP), helpstring("Will be fired if the user releases a key while the control has the focus. This event may be disabled.")]
			void KeyUp(SHORT* keyCode, SHORT shift);
			/// \brief <em>The user clicked into the control's client area</em>
			///
			/// Will be fired if the user clicks into the control's client area using the middle mouse button.
			///
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be \c vbMiddleButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MDblClick, Click, RClick, XClick, CalendarMClick, IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_MCLICK), helpstring("Will be fired if the user clicks into the control's client area using the middle mouse button. This event may be disabled.")]
			void MClick(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The user double-clicked into the control's client area</em>
			///
			/// Will be fired if the user double-clicks into the control's client area using the middle mouse
			/// button.
			///
			/// \param[in] button The mouse buttons that were pressed during the double-click. This should
			///            always be \c vbMiddleButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the
			///            double-click. Any combination of the values defined by VB's \c ShiftConstants
			///            enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the double-click's position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the double-click's position relative to the
			///            control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MClick, DblClick, RDblClick, XDblClick, IDateTimePicker::DetectDoubleClicks,
			///     IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_MDBLCLICK), helpstring("Will be fired if the user double-clicks into the control's client area using the middle mouse button. This event may be disabled.")]
			void MDblClick(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>A mouse button was pressed over the control's client area</em>
			///
			/// Will be fired if the user presses a mouse button while the mouse cursor is located over the
			/// control's client area.
			///
			/// \param[in] button The pressed mouse button. Any of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseUp, Click, MClick, RClick, XClick, CalendarMouseDown, ExtendedMouseButtonConstants,
			///     IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_MOUSEDOWN), helpstring("Will be fired if the user presses a mouse button while the mouse cursor is located over the control's client area. This event may be disabled.")]
			void MouseDown(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The mouse cursor was moved into the control's client area</em>
			///
			/// Will be fired if the user moved the mouse cursor into the control's client area.
			///
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseLeave, MouseHover, MouseMove, CalendarMouseEnter, ExtendedMouseButtonConstants,
			///     IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_MOUSEENTER), helpstring("Will be fired if the user moved the mouse cursor into the control's client area. This event may be disabled.")]
			void MouseEnter(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The mouse cursor was moved into the control's client area a specified period of time before</em>
			///
			/// Will be fired if the mouse cursor has been located over the control's client area for the
			/// number of milliseconds specified by the \c IDateTimePicker::HoverTime property.
			///
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseEnter, MouseLeave, MouseMove, CalendarMouseHover, IDateTimePicker::HoverTime,
			///     ExtendedMouseButtonConstants, IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_MOUSEHOVER), helpstring("Will be fired if the mouse cursor has been located over the control's client area for the number of milliseconds specified by the 'HoverTime' property. This event may be disabled.")]
			void MouseHover(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The mouse cursor was moved out of the control's client area</em>
			///
			/// Will be fired if the user moves the mouse cursor out of the control's client area.
			///
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseEnter, MouseHover, MouseMove, CalendarMouseLeave, ExtendedMouseButtonConstants,
			///     IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_MOUSELEAVE), helpstring("Will be fired if the user moves the mouse cursor out of the control's client area. This event may be disabled.")]
			void MouseLeave(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The mouse cursor was moved over the control's client area</em>
			///
			/// Will be fired if the user moves the mouse cursor over the control's client area.
			///
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseEnter, MouseLeave, MouseDown, MouseUp, MouseWheel, CalendarMouseMove,
			///     ExtendedMouseButtonConstants, IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_MOUSEMOVE), helpstring("Will be fired if the user moves the mouse cursor over the control's client area. This event may be disabled.")]
			void MouseMove(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>A mouse button was released over the control's client area</em>
			///
			/// Will be fired if the user releases a mouse button while the mouse cursor is located over the
			/// control's client area.
			///
			/// \param[in] button The released mouse button. Any of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseDown, Click, MClick, RClick, XClick, CalendarMouseUp, ExtendedMouseButtonConstants,
			///     IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_MOUSEUP), helpstring("Will be fired if the user releases a mouse button while the mouse cursor is located over the control's client area. This event may be disabled.")]
			void MouseUp(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The mouse wheel was rotated over the control's client area</em>
			///
			/// Will be fired if the user rotates the mouse wheel over the control's client area.
			///
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] scrollAxis Specifies whether the user intents to scroll vertically or horizontally.
			///            Any of the values defined by the \c ScrollAxisConstants enumeration is valid.
			/// \param[in] wheelDelta The distance the wheel has been rotated.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseMove, CalendarMouseWheel, ExtendedMouseButtonConstants, ScrollAxisConstants,
			///     IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_MOUSEWHEEL), helpstring("Will be fired if the user rotates the mouse wheel over the control's client area. This event may be disabled.")]
			void MouseWheel(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, ScrollAxisConstants scrollAxis, SHORT wheelDelta);
			/// \brief <em>The data was dropped onto the control during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user completes the operation while the mouse cursor
			/// is located over the control's client area.
			///
			/// \param[in] data The dropped data.
			/// \param[in,out] effect On entry, a bit field of the drop effects (defined by the
			///                \c OLEDropEffectConstants enumeration) supported by the drag source. On
			///                return, this paramter must be set to the drop effect that the target finally
			///                executed.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			///
			/// \remarks Don't forget to release any references that you hold to the data object.
			///
			/// \sa OLEDragEnter, OLEDragMouseMove, OLEDragLeave, MouseUp, CalendarOLEDragDrop,
			///     IDateTimePicker::RegisterForOLEDragDrop, IDateTimePicker::FinishOLEDragDrop,
			///     OLEDropEffectConstants
			[id(DISPID_DTPE_OLEDRAGDROP), helpstring("Will be fired during OLE drag'n'drop if the user completes the operation while the mouse cursor is located over the control's client area.")]
			void OLEDragDrop(IOLEDataObject* data, OLEDropEffectConstants* effect, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The data was dragged into the control during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user moved the mouse cursor into the control's
			/// client area.
			///
			/// \param[in] data The dragged data.
			/// \param[in,out] effect On entry, a bit field of the drop effects (defined by the
			///                \c OLEDropEffectConstants enumeration) supported by the drag source. On
			///                return, this paramter must be set to the drop effect that the target wants
			///                to be used on drop.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in,out] autoDropDown If set to \c True, the drop-down calendar control will be opened
			///                automatically; otherwise not.
			///
			/// \sa OLEDragMouseMove, OLEDragLeave, OLEDragDrop, MouseEnter, CalendarOLEDragEnter,
			///     IDateTimePicker::RegisterForOLEDragDrop, OLEDropEffectConstants,
			///     IDateTimePicker::DragDropDownTime
			[id(DISPID_DTPE_OLEDRAGENTER), helpstring("Will be fired during OLE drag'n'drop if the user moved the mouse cursor into the control's client area.")]
			void OLEDragEnter(IOLEDataObject* data, OLEDropEffectConstants* effect, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, VARIANT_BOOL* autoDropDown);
			/// \brief <em>The data was dragged out of the control during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user moves the mouse cursor out of the control's
			/// client area or if the user canceled the drag'n'drop operation.
			///
			/// \param[in] data The dragged data.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			///
			/// \remarks Don't forget to release any references that you hold to the data object.
			///
			/// \sa OLEDragEnter, OLEDragMouseMove, OLEDragDrop, MouseLeave, CalendarOLEDragLeave,
			///     IDateTimePicker::RegisterForOLEDragDrop
			[id(DISPID_DTPE_OLEDRAGLEAVE), helpstring("Will be fired during OLE drag'n'drop if the user moves the mouse cursor over the control's client area or if the user canceled the drag'n'drop operation.")]
			void OLEDragLeave(IOLEDataObject* data, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The data was dragged over the control during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user moves the mouse cursor over the control's
			/// client area.
			///
			/// \param[in] data The dragged data.
			/// \param[in,out] effect On entry, a bit field of the drop effects (defined by the
			///                \c OLEDropEffectConstants enumeration) supported by the drag source. On
			///                return, this paramter must be set to the drop effect that the target wants
			///                to be used on drop.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in,out] autoDropDown If set to \c True, the drop-down calendar control will be opened
			///                automatically; otherwise not.
			///
			/// \sa OLEDragEnter, OLEDragLeave, OLEDragDrop, MouseMove, CalendarOLEDragMouseMove,
			///     IDateTimePicker::RegisterForOLEDragDrop, OLEDropEffectConstants,
			///     IDateTimePicker::DragDropDownTime
			[id(DISPID_DTPE_OLEDRAGMOUSEMOVE), helpstring("Will be fired during OLE drag'n'drop if the user moves the mouse cursor over the control's client area.")]
			void OLEDragMouseMove(IOLEDataObject* data, OLEDropEffectConstants* effect, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, VARIANT_BOOL* autoDropDown);
			/// \brief <em>User input needs to be parsed</em>
			///
			/// Will be fired if the user has finished editing the current date and the user input needs to be
			/// parsed to update the \c CurrentDate property.
			///
			/// \param[in] userInput The string that the user entered and that needs to be parsed.
			/// \param[out] inputDate Must be set to the date that has been extracted from the user input. To
			///             indicate the &ldquo;No Selection&rdquo; state, this parameter can be set to 0.
			/// \param[out] dateIsValid Specifies whether the entered string is a valid date. If set to \c True,
			///             it is a valid date; otherwise not.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa IDateTimePicker::CurrentDate, IDateTimePicker::DateSelected, IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_PARSEUSERINPUT), helpstring("Will be fired if the user has finished editing the current date and the user input needs to be parsed to update the 'CurrentDate' property. This event may be disabled.")]
			void ParseUserInput(BSTR userInput, DATE* inputDate, VARIANT_BOOL* dateIsValid);
			/// \brief <em>The user clicked into the control's client area</em>
			///
			/// Will be fired if the user clicks into the control's client area using the right mouse button.
			///
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be \c vbRightButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa ContextMenu, RDblClick, Click, MClick, XClick, CalendarRClick,
			///     IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_RCLICK), helpstring("Will be fired if the user clicks into the control's client area using the right mouse button. This event may be disabled.")]
			void RClick(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The user double-clicked into the control's client area</em>
			///
			/// Will be fired if the user double-clicks into the control's client area using the right mouse
			/// button.
			///
			/// \param[in] button The mouse buttons that were pressed during the double-click. This should
			///            always be \c vbRightButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the
			///            double-click. Any combination of the values defined by VB's \c ShiftConstants
			///            enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the double-click's position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the double-click's position relative to the
			///            control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa RClick, DblClick, MDblClick, XDblClick, IDateTimePicker::DetectDoubleClicks,
			///     IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_RDBLCLICK), helpstring("Will be fired if the user double-clicks into the control's client area using the right mouse button. This event may be disabled.")]
			void RDblClick(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The control window was recreated</em>
			///
			/// Will be fired after the control window was destroyed and recreated.\n
			/// Some properties can't be changed after the control window was created. If such a property is
			/// changed and the control window already exists, it is destroyed and recreated.
			///
			/// \param[in] hWnd The control's window handle.
			///
			/// \sa DestroyedControlWindow, IDateTimePicker::hWnd
			[id(DISPID_DTPE_RECREATEDCONTROLWINDOW), helpstring("Will be fired after the control window was destroyed and recreated.")]
			void RecreatedControlWindow(LONG hWnd);
			/// \brief <em>The control window was resized</em>
			///
			/// Will be fired after the control window was resized.
			[id(DISPID_DTPE_RESIZEDCONTROLWINDOW), helpstring("Will be fired after the control window was resized.")]
			void ResizedControlWindow(void);
			/// \brief <em>The user clicked into the control's client area</em>
			///
			/// Will be fired if the user clicks into the control's client area using one of the extended mouse
			/// buttons.
			///
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be a constant defined by the \c ExtendedMouseButtonConstants enumeration.
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa XDblClick, Click, MClick, RClick, CalendarXClick, ExtendedMouseButtonConstants,
			///     IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_XCLICK), helpstring("Will be fired if the user clicks into the control's client area using one of the extended mouse buttons. This event may be disabled.")]
			void XClick(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The user double-clicked into the control's client area</em>
			///
			/// Will be fired if the user double-clicks into the control's client area using one of the extended
			/// mouse buttons.
			///
			/// \param[in] button The mouse buttons that were pressed during the double-click. This should
			///            be a constant defined by the \c ExtendedMouseButtonConstants enumeration.
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the
			///            double-click. Any combination of the values defined by VB's \c ShiftConstants
			///            enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the double-click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the double-click's position relative to the control's
			///            upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa XClick, DblClick, MDblClick, RDblClick, ExtendedMouseButtonConstants,
			///     IDateTimePicker::DetectDoubleClicks, IDateTimePicker::DisabledEvents
			[id(DISPID_DTPE_XDBLCLICK), helpstring("Will be fired if the user double-clicks into the control's client area using one of the extended mouse buttons. This event may be disabled.")]
			void XDblClick(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
	};


	/// \author Timo "TimoSoft" Kunze
	/// \brief <em>The \c DateTimePicker class</em>
	///
	/// The control's main COM class. It implements the \c IDateTimePicker and
	/// \c _IDateTimePickerEvents interfaces.
	///
	/// \sa IDateTimePicker, _IDateTimePickerEvents
	[
		uuid(D5386857-D018-4098-940B-74DEF343E45E),
		version(1.5),
		helpstring("DateTimePicker Control 1.5 (ANSI)")
	]
	coclass DateTimePicker
	{
		[default] interface IDateTimePicker;
		[default, source] dispinterface _IDateTimePickerEvents;
	};


	[
		uuid(8F804737-35FF-4c65-848D-238A97D7D4F7),
		version(1.5),
		noncreatable,
		helpstring("CommonProperties Class 1.5 (ANSI)"),
		hidden
	]
	coclass CommonProperties
	{
		[default] interface IUnknown;
	};


	[
		uuid(57A8AF15-DE57-4fc1-87B7-200510EA091F),
		version(1.5),
		noncreatable,
		helpstring("StringProperties Class 1.5 (ANSI)"),
		hidden
	]
	coclass StringProperties
	{
		[default] interface IUnknown;
	};
};
